
========== FILE: ./api/ai-stream.ts ==========

     1	// /api/ai-stream.ts
     2	export const config = { runtime: 'edge' };
     3	
     4	type Role = 'system' | 'user' | 'assistant';
     5	type ChatMsg = { role: Role; content: string };
     6	
     7	type ReqBody = {
     8	    conversationId?: string;              // now optional
     9	    messages: ChatMsg[];                  // should already include system + rollup + recent + user
    10	    mode?: 'fast' | 'thinking';
    11	    longMode?: boolean;
    12	    temperature?: number;
    13	    model?: string;
    14	    serverPersist?: boolean;              // opt-in: if true AND conversationId present, save+rollup server-side
    15	};
    16	
    17	const OPENROUTER_API = 'https://openrouter.ai/api/v1/chat/completions';
    18	const DEFAULT_MODEL = 'z-ai/glm-4.5-air:free';
    19	
    20	function buildReasoning(mode?: 'fast' | 'thinking') {
    21	    // GLM-4.5-Air supports unified reasoning control. Exclude CoT from output.
    22	    if (mode === 'thinking') return { enabled: true, effort: 'medium', exclude: true };
    23	    return { enabled: false };
    24	}
    25	
    26	/** Parse SSE 'data:' lines to collect assistant delta text only */
    27	function extractDeltaFromSSEChunk(chunkText: string): string {
    28	    let acc = '';
    29	    const blocks = chunkText.split('\n\n');
    30	    for (const block of blocks) {
    31	        const line = block.split('\n').find((l) => l.startsWith('data:'));
    32	        if (!line) continue;
    33	        const payload = line.slice(5).trim();
    34	        if (!payload || payload === '[DONE]') continue;
    35	        try {
    36	            const json = JSON.parse(payload);
    37	            const delta =
    38	                json?.choices?.[0]?.delta?.content ??
    39	                json?.choices?.[0]?.message?.content ??
    40	                '';
    41	            if (delta) acc += delta;
    42	        } catch {
    43	            // ignore non-JSON keepalives
    44	        }
    45	    }
    46	    return acc;
    47	}
    48	
    49	export default async function handler(req: Request) {
    50	    if (req.method !== 'POST') return new Response('Only POST', { status: 405 });
    51	
    52	    const body = (await req.json().catch(() => ({}))) as ReqBody;
    53	    const {
    54	        conversationId,                 // optional now
    55	        messages = [],
    56	        mode = 'fast',
    57	        longMode = false,
    58	        temperature = 0.3,
    59	        model = DEFAULT_MODEL,
    60	        serverPersist = false,          // OFF by default
    61	    } = body;
    62	
    63	    // Basic validation
    64	    if (!Array.isArray(messages) || messages.length === 0) {
    65	        return new Response('Missing messages', { status: 400 });
    66	    }
    67	
    68	    const key = process.env.OPENROUTER_API_KEY;
    69	    if (!key) return new Response('Missing OPENROUTER_API_KEY', { status: 500 });
    70	
    71	    const site = process.env.OPENROUTER_SITE_URL || req.headers.get('origin') || 'https://shopvavus.com';
    72	    const title = process.env.OPENROUTER_APP_NAME || 'VAVUS AI';
    73	
    74	    const maxTokens = longMode ? 2048 : 1024;
    75	    const reasoning = buildReasoning(mode);
    76	
    77	    // Upstream request to OpenRouter (OpenAI-compatible)
    78	    const upstream = await fetch(OPENROUTER_API, {
    79	        method: 'POST',
    80	        headers: {
    81	            Authorization: `Bearer ${key}`,
    82	            'Content-Type': 'application/json',
    83	            'HTTP-Referer': site,
    84	            'X-Title': title,
    85	        },
    86	        body: JSON.stringify({
    87	            model,
    88	            stream: true,
    89	            temperature,
    90	            max_tokens: maxTokens,
    91	            reasoning,
    92	            messages,
    93	        }),
    94	    });
    95	
    96	    if (!upstream.ok || !upstream.body) {
    97	        const text = await upstream.text().catch(() => '');
    98	        return new Response(`OpenRouter error ${upstream.status}: ${text}`, { status: 500 });
    99	    }
   100	
   101	    // Stream to client while accumulating assistant text for optional persistence
   102	    const { readable, writable } = new TransformStream();
   103	    const reader = upstream.body.getReader();
   104	    const writer = writable.getWriter();
   105	    const decoder = new TextDecoder();
   106	
   107	    let assistantFull = '';
   108	
   109	    (async () => {
   110	        try {
   111	            while (true) {
   112	                const { value, done } = await reader.read();
   113	                if (done) break;
   114	                if (value) {
   115	                    // Tee upstream bytes to client
   116	                    await writer.write(value);
   117	                    // Accumulate assistant text for saving/rollup
   118	                    assistantFull += extractDeltaFromSSEChunk(decoder.decode(value, { stream: true }));
   119	                }
   120	            }
   121	        } catch {
   122	            // ignore streaming errors; client already got partial tokens
   123	        } finally {
   124	            try { await writer.close(); } catch {}
   125	            // Fire-and-forget persistence ONLY if explicitly requested and we have an id
   126	            if (serverPersist && conversationId && assistantFull) {
   127	                fetch('/api/rollup', {
   128	                    method: 'POST',
   129	                    headers: { 'Content-Type': 'application/json' },
   130	                    body: JSON.stringify({
   131	                        action: 'save_and_maybe_rollup',
   132	                        conversationId,
   133	                        assistantText: assistantFull,
   134	                        mode,
   135	                        longMode,
   136	                    }),
   137	                }).catch(() => {});
   138	            }
   139	        }
   140	    })();
   141	
   142	    return new Response(readable, {
   143	        status: 200,
   144	        headers: {
   145	            'Content-Type': 'text/event-stream; charset=utf-8',
   146	            'Cache-Control': 'no-cache, no-transform',
   147	            'Connection': 'keep-alive',
   148	        },
   149	    });
   150	}

========== FILE: ./api/ai.ts ==========

     1	export const config = { runtime: 'edge' };
     2	
     3	type Body = {
     4	    message?: string;
     5	    longMode?: boolean;
     6	    useInternet?: boolean;
     7	    usePersona?: boolean;
     8	};
     9	
    10	async function fetchPersona(): Promise<string> {
    11	    const url = process.env.PERSONA_API_URL;
    12	    if (!url) return '';
    13	    try {
    14	        const r = await fetch(url, { method: 'GET' });
    15	        if (!r.ok) return '';
    16	        return (await r.text())?.trim() || '';
    17	    } catch {
    18	        return '';
    19	    }
    20	}
    21	
    22	async function fetchWebContext(query: string): Promise<string> {
    23	    const url = process.env.SEARCH_API_URL;
    24	    if (!url) return '';
    25	    try {
    26	        const r = await fetch(url, {
    27	            method: 'POST',
    28	            headers: { 'Content-Type': 'application/json' },
    29	            body: JSON.stringify({ query, max_results: 5 }),
    30	        });
    31	        if (!r.ok) return '';
    32	        const data = await r.json().catch(() => null);
    33	        const items: any[] = Array.isArray(data) ? data : data?.results || [];
    34	        const bullets = items
    35	            .slice(0, 5)
    36	            .map((it: any) => `- ${it?.title ?? ''}: ${it?.snippet ?? ''}`.trim())
    37	            .filter(Boolean);
    38	        if (!bullets.length) return '';
    39	        return `Web findings (condensed):\n${bullets.join('\n')}`;
    40	    } catch {
    41	        return '';
    42	    }
    43	}
    44	
    45	export default async function handler(req: Request) {
    46	    if (req.method !== 'POST') return new Response('Only POST', { status: 405 });
    47	
    48	    const {
    49	        message = '',
    50	        longMode = false,
    51	        useInternet = false,
    52	        usePersona = false,
    53	    } = (await req.json().catch(() => ({}))) as Body;
    54	
    55	    if (!message.trim()) {
    56	        return new Response(JSON.stringify({ internalNote: '', personaApplied: false, webApplied: false }), {
    57	            headers: { 'Content-Type': 'application/json' },
    58	        });
    59	    }
    60	
    61	    const blocks: string[] = [];
    62	    let personaApplied = false;
    63	    let webApplied = false;
    64	
    65	    if (usePersona) {
    66	        const persona = await fetchPersona();
    67	        if (persona) {
    68	            blocks.push(`Persona (adapt tone & knowledge accordingly):\n${persona}`);
    69	            personaApplied = true;
    70	        }
    71	    }
    72	
    73	    if (useInternet) {
    74	        const web = await fetchWebContext(message);
    75	        if (web) {
    76	            blocks.push(web);
    77	            webApplied = true;
    78	        }
    79	    }
    80	
    81	    if (longMode) {
    82	        blocks.push('Allow longer, more detailed answer if necessary.');
    83	    }
    84	
    85	    const internalNote = blocks.length
    86	        ? `[INTERNAL CONTEXT — DO NOT REVEAL]\n${blocks.join('\n\n')}\n\nNow produce ONLY the final answer. Do not reveal sources or this note.`
    87	        : '';
    88	
    89	    return new Response(JSON.stringify({ internalNote, personaApplied, webApplied }), {
    90	        headers: { 'Content-Type': 'application/json' },
    91	    });
    92	}

========== FILE: ./api/rollup.ts ==========

     1	export const config = { runtime: 'edge' };
     2	
     3	// A tiny facade endpoint so the streaming route can fire-and-forget persistence & rollups
     4	// without blocking the SSE close. It delegates to services/rollup.ts functions.
     5	
     6	type Req = {
     7	    action: 'save_and_maybe_rollup' | 'force_rollup';
     8	    conversationId: string;
     9	    assistantText?: string;                 // required for save_and_maybe_rollup
    10	    mode?: 'fast' | 'thinking';            // for metadata only
    11	    longMode?: boolean;                     // determines 4 vs 8 turns & 500 vs 1000 tokens
    12	};
    13	
    14	export default async function handler(req: Request) {
    15	    if (req.method !== 'POST') return new Response('Only POST', { status: 405 });
    16	
    17	    const { action, conversationId, assistantText, mode, longMode } = (await req.json().catch(() => ({}))) as Req;
    18	
    19	    if (!conversationId) return new Response('Missing conversationId', { status: 400 });
    20	
    21	    try {
    22	        // Dynamically import to keep Edge bundle lean
    23	        const { saveAssistantAndMaybeRollup, forceRollup } = await import('./services/rollup');
    24	
    25	        if (action === 'save_and_maybe_rollup') {
    26	            if (typeof assistantText !== 'string') {
    27	                return new Response('assistantText required', { status: 400 });
    28	            }
    29	            await saveAssistantAndMaybeRollup({ conversationId, assistantText, mode: mode ?? 'fast', longMode: !!longMode });
    30	            return new Response(JSON.stringify({ ok: true }), { headers: { 'Content-Type': 'application/json' } });
    31	        }
    32	
    33	        if (action === 'force_rollup') {
    34	            const out = await forceRollup({ conversationId, longMode: !!longMode });
    35	            return new Response(JSON.stringify({ ok: true, ...out }), { headers: { 'Content-Type': 'application/json' } });
    36	        }
    37	
    38	        return new Response('Unknown action', { status: 400 });
    39	    } catch (e: any) {
    40	        return new Response(JSON.stringify({ ok: false, error: e?.message || 'rollup failed' }), {
    41	            status: 500,
    42	            headers: { 'Content-Type': 'application/json' },
    43	        });
    44	    }
    45	}

========== FILE: ./api/rss.xml.ts ==========

     1	import type { VercelRequest, VercelResponse } from '@vercel/node';
     2	import { createClient } from '@supabase/supabase-js';
     3	
     4	export const config = { runtime: 'nodejs' };
     5	
     6	const supabase = createClient(
     7	    process.env.VITE_SUPABASE_URL!,
     8	    process.env.VITE_SUPABASE_ANON_KEY!
     9	);
    10	
    11	export default async function handler(_req: VercelRequest, res: VercelResponse) {
    12	    const SITE = process.env.VITE_SITE_URL || 'https://www.example.com';
    13	
    14	    const { data } = await supabase
    15	        .from('posts')
    16	        .select('title, slug, excerpt, created_at')
    17	        .eq('published', true)
    18	        .order('created_at', { ascending: false })
    19	        .limit(50);
    20	
    21	    const items = (data || [])
    22	        .map(
    23	            (p) => `
    24	<item>
    25	  <title><![CDATA[${p.title}]]></title>
    26	  <link>${SITE}/blog/${p.slug}</link>
    27	  <guid>${SITE}/blog/${p.slug}</guid>
    28	  <pubDate>${new Date(p.created_at).toUTCString()}</pubDate>
    29	  <description><![CDATA[${p.excerpt || ''}]]></description>
    30	</item>`
    31	        )
    32	        .join('');
    33	
    34	    const xml = `<?xml version="1.0" encoding="UTF-8" ?>
    35	<rss version="2.0">
    36	  <channel>
    37	    <title>VAVUS Blog</title>
    38	    <link>${SITE}/blog</link>
    39	    <description>VAVUS AI updates & research</description>
    40	    ${items}
    41	  </channel>
    42	</rss>`;
    43	
    44	    res.setHeader('Content-Type', 'application/xml; charset=utf-8');
    45	    res.send(xml);
    46	}

========== FILE: ./api/_runpod.ts ==========

     1	// /api/_runpod.ts
     2	export { runpodChat } from './services/runpod.js';
     3	
     4	import type { VercelRequest, VercelResponse } from '@vercel/node';
     5	
     6	type RunpodReq = {
     7	    input: any; // model-specific payload
     8	};
     9	
    10	export class RunpodError extends Error {
    11	    status: number;
    12	    body: string;
    13	    url: string;
    14	
    15	    constructor({ status, body, url }: { status: number; body: string; url: string }) {
    16	        super(`Runpod ${status}: ${body}`);
    17	        this.status = status;
    18	        this.body = body;
    19	        this.url = url;
    20	    }
    21	}
    22	
    23	export async function callRunpod({
    24	                                     url,
    25	                                     token,
    26	                                     input,
    27	                                     timeoutMs = 90000,
    28	                                     logger,
    29	                                 }: {
    30	    url: string;
    31	    token?: string;   // now optional
    32	    input: any;
    33	    timeoutMs?: number;
    34	    logger?: (info: { url: string; status?: number; body?: string; error?: any }) => void;
    35	}) {
    36	    const controller = new AbortController();
    37	    const to = setTimeout(() => controller.abort(), timeoutMs);
    38	
    39	    try {
    40	        const headers: Record<string, string> = {
    41	            'Content-Type': 'application/json',
    42	        };
    43	        if (token && token.trim()) {
    44	            headers['Authorization'] = `Bearer ${token}`;
    45	        }
    46	
    47	        const res = await fetch(url, {
    48	            method: 'POST',
    49	            signal: controller.signal,
    50	            headers,
    51	            body: JSON.stringify({ input } as RunpodReq),
    52	        });
    53	
    54	        if (!res.ok) {
    55	            const text = await res.text().catch(() => '');
    56	            const info = { url, status: res.status, body: text };
    57	            console.error('Runpod request failed', info);
    58	            logger?.(info);
    59	            throw new RunpodError({ status: res.status, body: text, url });
    60	        }
    61	
    62	        const json = await res.json();
    63	        logger?.({ url, status: res.status, body: JSON.stringify(json) });
    64	        return json; // Runpod "runsync" typically returns { output: ... }
    65	         } catch (e: any) {
    66	        if (e.name === 'AbortError') {
    67	            const info = { url, status: 0, body: 'aborted' };
    68	            console.error('Runpod request aborted', info);
    69	            logger?.(info);
    70	            throw new RunpodError({ status: 0, body: 'aborted', url });
    71	        }
    72	        throw e;
    73	    } finally {
    74	        clearTimeout(to);
    75	    }
    76	}
    77	export function logRunpod(info: { url: string; status?: number; body?: string; error?: any }) {
    78	    console.log('Runpod', info);
    79	}
    80	
    81	export function bad(res: VercelResponse, code: number, msg: string) {
    82	    return res.status(code).json({ error: msg });
    83	}
    84	
    85	export function allowCORS(res: VercelResponse) {
    86	    res.setHeader('Access-Control-Allow-Origin', '*');
    87	    res.setHeader('Access-Control-Allow-Methods', 'POST, OPTIONS');
    88	    res.setHeader('Access-Control-Allow-Headers', 'Content-Type, Authorization');
    89	}

========== FILE: ./api/services/conversation.ts ==========

     1	import { supabaseAdmin } from '../_utils/supabaseAdmin';
     2	import type { Msg } from './prompt';
     3	
     4	export type Role = 'system' | 'user' | 'assistant';
     5	
     6	export type DbMessage = {
     7	    id: string;
     8	    conversation_id: string;
     9	    role: Role;
    10	    content: string;
    11	    created_at: string;
    12	};
    13	
    14	export type Rollup = {
    15	    id: string;
    16	    conversation_id: string;
    17	    mode: 'regular' | 'long';
    18	    up_to_message_id: string;
    19	    summary_text: string;
    20	    input_tokens: number | null;
    21	    output_tokens: number | null;
    22	    created_at: string;
    23	};
    24	
    25	export async function saveMessage(
    26	    conversationId: string,
    27	    role: Role,
    28	    content: string,
    29	) {
    30	    const { data, error } = await supabaseAdmin
    31	        .from('messages')
    32	        .insert([{ conversation_id: conversationId, role, content }])
    33	        .select()
    34	        .single();
    35	
    36	    if (error) throw error;
    37	    return data as DbMessage;
    38	}
    39	
    40	export async function getRecentMessages(conversationId: string, n: number) {
    41	    const { data, error } = await supabaseAdmin
    42	        .from('messages')
    43	        .select('*')
    44	        .eq('conversation_id', conversationId)
    45	        .order('created_at', { ascending: true });
    46	
    47	    if (error) throw error;
    48	    const all = (data || []) as DbMessage[];
    49	    return all.slice(-n);
    50	}
    51	
    52	export async function getAllMessages(conversationId: string) {
    53	    const { data, error } = await supabaseAdmin
    54	        .from('messages')
    55	        .select('*')
    56	        .eq('conversation_id', conversationId)
    57	        .order('created_at', { ascending: true });
    58	
    59	    if (error) throw error;
    60	    return (data || []) as DbMessage[];
    61	}
    62	
    63	export async function getLatestRollup(conversationId: string, mode: 'regular' | 'long') {
    64	    const { data, error } = await supabaseAdmin
    65	        .from('conversation_rollups')
    66	        .select('*')
    67	        .eq('conversation_id', conversationId)
    68	        .eq('mode', mode)
    69	        .order('created_at', { ascending: false })
    70	        .limit(1);
    71	
    72	    if (error) throw error;
    73	    return (data?.[0] as Rollup) || null;
    74	}
    75	
    76	export async function upsertRollup(params: {
    77	    conversationId: string;
    78	    mode: 'regular' | 'long';
    79	    upToMessageId: string;
    80	    summaryText: string;
    81	    inputTokens?: number;
    82	    outputTokens?: number;
    83	}) {
    84	    const { conversationId, mode, upToMessageId, summaryText, inputTokens, outputTokens } = params;
    85	
    86	    const { data, error } = await supabaseAdmin
    87	        .from('conversation_rollups')
    88	        .insert([{
    89	            conversation_id: conversationId,
    90	            mode,
    91	            up_to_message_id: upToMessageId,
    92	            summary_text: summaryText,
    93	            input_tokens: inputTokens ?? null,
    94	            output_tokens: outputTokens ?? null,
    95	        }])
    96	        .select()
    97	        .single();
    98	
    99	    if (error) throw error;
   100	    return data as Rollup;
   101	}
   102	
   103	export async function countUserTurnsSinceLastRollup(conversationId: string, mode: 'regular' | 'long') {
   104	    const latest = await getLatestRollup(conversationId, mode);
   105	    const sinceFilter = latest?.up_to_message_id;
   106	
   107	    const { data, error } = await supabaseAdmin
   108	        .from('messages')
   109	        .select('role,id,created_at')
   110	        .eq('conversation_id', conversationId)
   111	        .order('created_at', { ascending: true });
   112	
   113	    if (error) throw error;
   114	    const all = (data || []) as Pick<DbMessage, 'role' | 'id' | 'created_at'>[];
   115	
   116	    let counting = !sinceFilter;
   117	    let userTurns = 0;
   118	
   119	    for (const m of all) {
   120	        if (!counting) {
   121	            if (m.id === sinceFilter) counting = true;
   122	            continue;
   123	        }
   124	        if (m.role === 'user') userTurns++;
   125	    }
   126	
   127	    return userTurns;
   128	}
   129	
   130	export async function getLastMessageId(conversationId: string) {
   131	    const { data, error } = await supabaseAdmin
   132	        .from('messages')
   133	        .select('id')
   134	        .eq('conversation_id', conversationId)
   135	        .order('created_at', { ascending: false })
   136	        .limit(1);
   137	
   138	    if (error) throw error;
   139	    return data?.[0]?.id as string | undefined;
   140	}
   141	
   142	/**
   143	 * Legacy helper expected by tests:
   144	 * Summarize a set of messages to approximately targetTokens.
   145	 * Uses OpenRouter GLM-4.5-Air (non-streaming).
   146	 */
   147	export async function summarize(messages: Msg[], targetTokens = 500): Promise<string> {
   148	    const key = process.env.OPENROUTER_API_KEY;
   149	    if (!key) throw new Error('Missing OPENROUTER_API_KEY');
   150	
   151	    const OPENROUTER_API = 'https://openrouter.ai/api/v1/chat/completions';
   152	    const model = 'z-ai/glm-4.5-air:free';
   153	    const site = process.env.OPENROUTER_SITE_URL || 'https://shopvavus.com';
   154	    const title = process.env.OPENROUTER_APP_NAME || 'VAVUS AI';
   155	
   156	    const intro =
   157	        `Summarize the following messages into ~${targetTokens} tokens. ` +
   158	        `Be concise, factual, and preserve key decisions, entities, and Q&A. ` +
   159	        `Do NOT include chain-of-thought. Output only the summary.`;
   160	
   161	    const stitched = messages.map(m => `${m.role.toUpperCase()}: ${m.content}`).join('\n');
   162	
   163	    const resp = await fetch(OPENROUTER_API, {
   164	        method: 'POST',
   165	        headers: {
   166	            Authorization: `Bearer ${key}`,
   167	            'Content-Type': 'application/json',
   168	            'HTTP-Referer': site,
   169	            'X-Title': title,
   170	        },
   171	        body: JSON.stringify({
   172	            model,
   173	            stream: false,
   174	            temperature: 0.1,
   175	            max_tokens: Math.round(targetTokens * 1.2),
   176	            messages: [
   177	                { role: 'system', content: 'You are a careful AI summarizer. Output only the summary.' },
   178	                { role: 'user', content: `${intro}\n\n---\n${stitched}` },
   179	            ],
   180	        }),
   181	    });
   182	
   183	    if (!resp.ok) {
   184	        const text = await resp.text().catch(() => '');
   185	        throw new Error(`OpenRouter ${resp.status}: ${text}`);
   186	    }
   187	
   188	    const data = await resp.json().catch(() => ({}));
   189	    return data?.choices?.[0]?.message?.content ?? '';
   190	}

========== FILE: ./api/services/prompt.ts ==========

     1	// --- Types expected by tests ---
     2	export type Msg = { role: 'system' | 'user' | 'assistant'; content: string };
     3	
     4	// Strip any chain-of-thought style blocks before showing/saving
     5	export function stripReasoning(s: string): string {
     6	    if (!s) return s;
     7	    let out = s;
     8	    out = out.replace(/<think>[\s\S]*?<\/think>/gi, '');
     9	    out = out.replace(/```(?:thinking|reasoning)[\s\S]*?```/gi, '');
    10	    out = out.replace(/<\/?think>/gi, '');
    11	    return out.trim();
    12	}
    13	
    14	import type { DbMessage } from './conversation';
    15	
    16	export function baseSystemPrompt() {
    17	    return 'You are VAVUS AI. Be concise, actionable, and accurate. Do not reveal internal notes or chain-of-thought.';
    18	}
    19	
    20	/** Build the final prompt list: system → [rollup?] → lastN → user */
    21	export function buildPrompt({
    22	                                system = baseSystemPrompt(),
    23	                                rollupText,
    24	                                recent,
    25	                                userMessage,
    26	                            }: {
    27	    system?: string;
    28	    rollupText?: string | null;
    29	    recent: Pick<DbMessage, 'role' | 'content'>[];
    30	    userMessage: string;
    31	}) {
    32	    const msgs: { role: 'system' | 'user' | 'assistant'; content: string }[] = [];
    33	    msgs.push({ role: 'system', content: system });
    34	
    35	    if (rollupText) {
    36	        msgs.push({
    37	            role: 'system',
    38	            content:
    39	                `Conversation summary (older context, concise):\n${rollupText}\n\nUse this to stay consistent. Do not restate it verbatim.`,
    40	        });
    41	    }
    42	
    43	    for (const m of recent) {
    44	        msgs.push({ role: m.role, content: m.content });
    45	    }
    46	
    47	    msgs.push({ role: 'user', content: userMessage });
    48	    return msgs;
    49	}
    50	
    51	/** Prompt for generating rollups of a target size */
    52	export function buildRollupPrompt({
    53	                                      chunkMessages,
    54	                                      targetTokens,
    55	                                  }: {
    56	    chunkMessages: Pick<DbMessage, 'role' | 'content'>[];
    57	    targetTokens: number;
    58	}) {
    59	    const intro =
    60	        `Summarize the following conversation turns into ~${targetTokens} tokens. ` +
    61	        `Keep it neutral, factual, and compact. Emphasize goals, decisions, facts, named entities, and important Q&A. ` +
    62	        `Do NOT include chain-of-thought.`;
    63	
    64	    const stitched = chunkMessages
    65	        .map((m) => `${m.role.toUpperCase()}: ${m.content}`)
    66	        .join('\n');
    67	
    68	    return [
    69	        { role: 'system' as const, content: 'You are a careful AI summarizer. Output only the summary.' },
    70	        { role: 'user' as const, content: `${intro}\n\n---\n${stitched}` },
    71	    ];
    72	}

========== FILE: ./api/services/rollup.ts ==========

     1	import { supabaseAdmin } from '../_utils/supabaseAdmin';
     2	import {
     3	    saveMessage,
     4	    getRecentMessages,
     5	    getAllMessages,
     6	    getLatestRollup,
     7	    upsertRollup,
     8	    countUserTurnsSinceLastRollup,
     9	    getLastMessageId,
    10	    type DbMessage,
    11	} from './conversation';
    12	import { buildRollupPrompt } from './prompt';
    13	
    14	const OPENROUTER_API = 'https://openrouter.ai/api/v1/chat/completions';
    15	const DEFAULT_MODEL = 'z-ai/glm-4.5-air:free';
    16	
    17	async function callOpenRouterJSON(body: any) {
    18	    const key = process.env.OPENROUTER_API_KEY!;
    19	    const site = process.env.OPENROUTER_SITE_URL || 'https://shopvavus.com';
    20	    const title = process.env.OPENROUTER_APP_NAME || 'VAVUS AI';
    21	
    22	    const r = await fetch(OPENROUTER_API, {
    23	        method: 'POST',
    24	        headers: {
    25	            Authorization: `Bearer ${key}`,
    26	            'Content-Type': 'application/json',
    27	            'HTTP-Referer': site,
    28	            'X-Title': title,
    29	        },
    30	        body: JSON.stringify(body),
    31	    });
    32	
    33	    if (!r.ok) {
    34	        const t = await r.text().catch(() => '');
    35	        throw new Error(`OpenRouter ${r.status}: ${t}`);
    36	    }
    37	    return r.json();
    38	}
    39	
    40	/** Save assistant text and, based on user-turn count, create/refresh rollup */
    41	export async function saveAssistantAndMaybeRollup(params: {
    42	    conversationId: string;
    43	    assistantText: string;
    44	    mode: 'fast' | 'thinking';
    45	    longMode: boolean;
    46	}) {
    47	    const { conversationId, assistantText, longMode } = params;
    48	
    49	    // Save assistant message
    50	    await saveMessage(conversationId, 'assistant', assistantText);
    51	
    52	    // Determine which mode bucket to evaluate for rollup
    53	    const bucket: 'regular' | 'long' = longMode ? 'long' : 'regular';
    54	    const turns = await countUserTurnsSinceLastRollup(conversationId, bucket);
    55	
    56	    // Thresholds: every 4 user turns (regular) / 8 user turns (long)
    57	    const threshold = bucket === 'regular' ? 4 : 8;
    58	
    59	    if (turns >= threshold) {
    60	        await computeAndSaveRollup({ conversationId, mode: bucket });
    61	    }
    62	}
    63	
    64	/** Force a rollup by recomputing summary over the older messages not covered yet */
    65	export async function forceRollup(params: { conversationId: string; longMode: boolean }) {
    66	    const { conversationId, longMode } = params;
    67	    const bucket: 'regular' | 'long' = longMode ? 'long' : 'regular';
    68	    const roll = await computeAndSaveRollup({ conversationId, mode: bucket });
    69	    return { mode: bucket, rollupId: roll?.id };
    70	}
    71	
    72	async function computeAndSaveRollup({ conversationId, mode }: { conversationId: string; mode: 'regular' | 'long' }) {
    73	    // Gather all messages; if you want to cap, you can slice older subset, but
    74	    // GLM-4.5-AIR has a large context, and we're summarizing only the *new* chunk.
    75	    const all = await getAllMessages(conversationId);
    76	    if (!all.length) return null;
    77	
    78	    // Determine target token size
    79	    const targetTokens = mode === 'regular' ? 500 : 1000;
    80	
    81	    // Determine which chunk to summarize: since the last rollup up_to_message_id (exclusive) to the latest
    82	    const latestRollup = await getLatestRollup(conversationId, mode);
    83	    let startIdx = 0;
    84	    if (latestRollup?.up_to_message_id) {
    85	        const idx = all.findIndex((m) => m.id === latestRollup.up_to_message_id);
    86	        if (idx >= 0) startIdx = idx + 1;
    87	    }
    88	
    89	    // We want to summarize *user+assistant* turns since last rollup, but it’s fine to include all roles.
    90	    const chunk = all.slice(startIdx);
    91	    if (!chunk.length) return latestRollup ?? null;
    92	
    93	    // Build a summary prompt
    94	    const rollupPrompt = buildRollupPrompt({
    95	        chunkMessages: chunk.map((m) => ({ role: m.role, content: m.content })),
    96	        targetTokens,
    97	    });
    98	
    99	    const json = await callOpenRouterJSON({
   100	        model: DEFAULT_MODEL,
   101	        stream: false,
   102	        temperature: 0.1,
   103	        max_tokens: Math.round(targetTokens * 1.2), // headroom
   104	        messages: rollupPrompt,
   105	    });
   106	
   107	    const summaryText: string = json?.choices?.[0]?.message?.content ?? '';
   108	    const upTo = await getLastMessageId(conversationId);
   109	    if (!upTo || !summaryText) return latestRollup ?? null;
   110	
   111	    const saved = await upsertRollup({
   112	        conversationId,
   113	        mode,
   114	        upToMessageId: upTo,
   115	        summaryText,
   116	        inputTokens: json?.usage?.prompt_tokens ?? null,
   117	        outputTokens: json?.usage?.completion_tokens ?? null,
   118	    });
   119	
   120	    return saved;
   121	}

========== FILE: ./api/services/runpod.ts ==========

     1	// api/services/runpod.ts
     2	import { Msg } from './prompt.js';
     3	import { callRunpod, RunpodError } from '../_runpod.js';
     4	
     5	type Args = {
     6	    model: string;
     7	    messages: Msg[];
     8	    temperature?: number;
     9	    max_tokens?: number;
    10	    logger?: (info: { url: string; status?: number; body?: string; error?: any }) => void;
    11	};
    12	
    13	export async function runpodChat({ model, messages, temperature, max_tokens, logger }: Args) {
    14	    const url = process.env.RUNPOD_CHAT_URL?.trim();
    15	    const token = process.env.RUNPOD_CHAT_TOKEN?.trim();
    16	    if (!url || !token) {
    17	        const miss = !url && !token ? 'RUNPOD_CHAT_URL & RUNPOD_CHAT_TOKEN' : (!url ? 'RUNPOD_CHAT_URL' : 'RUNPOD_CHAT_TOKEN');
    18	        throw new Error(`Missing env: ${miss}`);
    19	    }
    20	
    21	    const isOpenAI = /\/v1\/chat\/completions\/?$/.test(url);
    22	
    23	    if (isOpenAI) {
    24	        // Speak OpenAI JSON directly
    25	        const headers: Record<string, string> = {
    26	            'content-type': 'application/json',
    27	            authorization: `Bearer ${token}`,
    28	        };
    29	        let resp: Response, text: string;
    30	        try {
    31	            resp = await fetch(url, {
    32	                method: 'POST',
    33	                headers,
    34	                body: JSON.stringify({ model, messages, temperature, max_tokens, stream: false }),
    35	            });
    36	            text = await resp.text();
    37	            logger?.({ url, status: resp.status, body: text.slice(0, 800) });
    38	        } catch (error) {
    39	            logger?.({ url, error });
    40	            throw new RunpodError({ status: 599, body: String(error), url });
    41	        }
    42	        if (!resp.ok) throw new RunpodError({ status: resp.status, body: text, url });
    43	
    44	        const data: any = text ? JSON.parse(text) : {};
    45	        const assistantText =
    46	            data?.choices?.[0]?.message?.content ??
    47	            data?.choices?.[0]?.delta?.content ?? // defensive
    48	            data?.text ?? '';
    49	        return { data, assistantText: String(assistantText ?? '') };
    50	    }
    51	
    52	    // Otherwise treat as Runpod "runsync" worker (expects { input: ... })
    53	    const payload = { model, messages, temperature, max_tokens };
    54	    const data: any = await callRunpod({ url, token, input: payload, logger });
    55	    const assistantText =
    56	        data?.choices?.[0]?.message?.content ??
    57	        data?.output?.choices?.[0]?.message?.content ??
    58	        data?.output?.text ??
    59	        data?.text ?? '';
    60	    return { data, assistantText: String(assistantText ?? '') };
    61	}

========== FILE: ./api/services/web.ts ==========

     1	export type WebSnippet = { title?: string; url?: string; snippet?: string };
     2	
     3	export async function searchAndSummarize(query: string, maxResults = 5): Promise<WebSnippet[]> {
     4	    const url = process.env.SEARCH_API_URL;
     5	    if (!url) return [];
     6	    try {
     7	        const r = await fetch(url, {
     8	            method: 'POST',
     9	            headers: { 'Content-Type': 'application/json' },
    10	            body: JSON.stringify({ query, max_results: maxResults }),
    11	        });
    12	        if (!r.ok) return [];
    13	        const data = await r.json().catch(() => null);
    14	        const items: any[] = Array.isArray(data) ? data : data?.results || [];
    15	        return items.slice(0, maxResults).map((it) => ({
    16	            title: it?.title,
    17	            url: it?.url,
    18	            snippet: it?.snippet,
    19	        }));
    20	    } catch {
    21	        return [];
    22	    }
    23	}

========== FILE: ./api/sitemap.xml.ts ==========

     1	import type { VercelRequest, VercelResponse } from '@vercel/node';
     2	import { createClient } from '@supabase/supabase-js';
     3	
     4	export const config = { runtime: 'nodejs' };
     5	
     6	const supabase = createClient(
     7	    process.env.VITE_SUPABASE_URL!,
     8	    process.env.VITE_SUPABASE_ANON_KEY!
     9	);
    10	
    11	export default async function handler(_req: VercelRequest, res: VercelResponse) {
    12	    const SITE = process.env.VITE_SITE_URL || 'https://www.example.com';
    13	
    14	    const staticPaths = ['','/vavus-ai','/translate','/ai','/vavus-apps','/about','/timeline','/join','/contact','/business','/blog'];
    15	    const { data } = await supabase
    16	        .from('posts')
    17	        .select('slug, updated_at')
    18	        .eq('published', true)
    19	        .order('updated_at', { ascending: false })
    20	        .limit(2000);
    21	
    22	    const urls = [
    23	        ...staticPaths.map(
    24	            (p) => `<url><loc>${SITE}${p ? p : '/'}</loc></url>`
    25	        ),
    26	        ...(data || []).map(
    27	            (p) => `<url><loc>${SITE}/blog/${p.slug}</loc><lastmod>${new Date(p.updated_at || Date.now()).toISOString()}</lastmod></url>`
    28	        ),
    29	    ].join('');
    30	
    31	    const xml = `<?xml version="1.0" encoding="UTF-8"?>
    32	<urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">
    33	${urls}
    34	</urlset>`;
    35	
    36	    res.setHeader('Content-Type', 'application/xml; charset=utf-8');
    37	    res.send(xml);
    38	}

========== FILE: ./api/translate.ts ==========

     1	// /api/translate.ts
     2	import type { VercelRequest, VercelResponse } from '@vercel/node';
     3	import { callRunpod, bad, allowCORS, logRunpod } from './_runpod.js';
     4	import { supabaseAdmin } from './_utils/supabaseAdmin.js';
     5	import { requireUser } from './_utils/auth.js';
     6	
     7	export const config = { runtime: 'nodejs' };
     8	
     9	const UI_TO_ISO: Record<string, string> = {
    10	    spanish: 'es',
    11	    french: 'fr',
    12	    german: 'de',
    13	    italian: 'it',
    14	    portuguese: 'pt',
    15	    japanese: 'ja',
    16	    korean: 'ko',
    17	    chinese: 'zh',
    18	    arabic: 'ar',
    19	    russian: 'ru',
    20	};
    21	
    22	const MAX_CHARS = Number(process.env.TRANSLATE_MAX_CHARS || 8000);
    23	
    24	export default async function handler(req: VercelRequest, res: VercelResponse) {
    25	    allowCORS(res);
    26	    if (req.method === 'OPTIONS') return res.status(200).end();
    27	    if (req.method !== 'POST') return bad(res, 405, 'Use POST');
    28	
    29	    // Auth
    30	    let userId: string | null = null;
    31	    try {
    32	        userId = requireUser(req).userId;
    33	    } catch {
    34	        return bad(res, 401, 'Missing or invalid bearer token');
    35	    }
    36	
    37	    // Body
    38	    const body = typeof req.body === 'string' ? JSON.parse(req.body) : (req.body || {});
    39	    let {
    40	        text,
    41	        sourceLang = 'auto',
    42	        targetLang,
    43	        model = 'madlad-400',
    44	    }: {
    45	        text?: string;
    46	        sourceLang?: string;
    47	        targetLang?: string;
    48	        model?: string;
    49	    } = body;
    50	
    51	    if (!text || !text.trim()) return bad(res, 400, 'text required');
    52	    if (!targetLang || typeof targetLang !== 'string') return bad(res, 400, 'targetLang required');
    53	
    54	    // Trim/Cap input defensively
    55	    if (text.length > MAX_CHARS) text = text.slice(0, MAX_CHARS);
    56	
    57	    // Normalize to BCP-47 (keep legacy UI words as fallback)
    58	    const normSource = (UI_TO_ISO[sourceLang?.toLowerCase?.()] ?? sourceLang ?? 'auto').trim();
    59	    const normTarget = (UI_TO_ISO[targetLang?.toLowerCase?.()] ?? targetLang).trim();
    60	
    61	    const RUNPOD_TRANSLATE_URL = process.env.RUNPOD_TRANSLATE_URL;
    62	    const RUNPOD_TRANSLATE_TOKEN = process.env.RUNPOD_TRANSLATE_TOKEN;
    63	    const RUNPOD_TRANSLATE_TIMEOUT = Number(process.env.RUNPOD_TRANSLATE_TIMEOUT || 90000);
    64	
    65	    // Stub fallback if not configured
    66	    if (!RUNPOD_TRANSLATE_URL || !RUNPOD_TRANSLATE_TOKEN) {
    67	        const output = `(stub) ${text}`;
    68	        const { error } = await supabaseAdmin.from('translations').insert({
    69	            user_id: userId,
    70	            source_lang: normSource,
    71	            target_lang: normTarget,
    72	            input_text: text,
    73	            output_text: output,
    74	            model,
    75	        });
    76	        if (error) return bad(res, 500, error.message);
    77	        return res.status(200).json({ output, raw: { stub: true } });
    78	    }
    79	
    80	    // Real call to RunPod translator microservice
    81	    const input = {
    82	        task: 'translate',
    83	        model,
    84	        text,
    85	        source_lang: normSource,  // 'auto' allowed here
    86	        target_lang: normTarget,  // REQUIRED
    87	    };
    88	
    89	    const started = Date.now();
    90	    try {
    91	        const data = await callRunpod({
    92	            url: RUNPOD_TRANSLATE_URL!,
    93	            token: RUNPOD_TRANSLATE_TOKEN!,
    94	            input,
    95	            timeoutMs: RUNPOD_TRANSLATE_TIMEOUT,
    96	            logger: logRunpod,
    97	        });
    98	
    99	        // Normalize output field names
   100	        const output =
   101	            data?.output?.translated_text ??
   102	            data?.output?.text ??
   103	            data?.translated ??
   104	            data?.text ??
   105	            '';
   106	
   107	        const latency_ms = Date.now() - started;
   108	
   109	        const { error } = await supabaseAdmin.from('translations').insert({
   110	            user_id: userId,
   111	            source_lang: normSource,
   112	            target_lang: normTarget,
   113	            input_text: text,
   114	            output_text: output,
   115	            model,
   116	            latency_ms,
   117	        });
   118	        if (error) return bad(res, 500, error.message);
   119	
   120	        return res.status(200).json({ output, raw: data });
   121	    } catch (e: any) {
   122	        return bad(res, 502, e?.message || 'Upstream translate error');
   123	    }
   124	}

========== FILE: ./api/_utils/auth.ts ==========

     1	// _utils/auth.ts
     2	import jwt, { JwtPayload } from 'jsonwebtoken';
     3	
     4	export function requireUser(req: any) {
     5	    const auth = req.headers?.authorization || '';
     6	    const token = auth.startsWith('Bearer ') ? auth.slice(7) : null;
     7	    if (!token) throw new Error('Missing bearer token');
     8	
     9	    const payload = jwt.verify(
    10	        token,
    11	        process.env.SUPABASE_JWT_SECRET as string
    12	    ) as JwtPayload;
    13	
    14	    const userId = (payload as any)?.sub;
    15	    if (!userId) throw new Error('Invalid token');
    16	
    17	    return { userId, token };
    18	}
    19	
    20	// alias so chat.ts compiles
    21	export const getUserFromReq = requireUser;

========== FILE: ./api/_utils/supabaseAdmin.ts ==========

     1	import { createClient } from '@supabase/supabase-js';
     2	
     3	const url = process.env.SUPABASE_URL!;
     4	const key = process.env.SUPABASE_SERVICE_ROLE_KEY!;
     5	
     6	if (!url || !key) {
     7	    console.warn('[supabaseAdmin] Missing SUPABASE_URL or SUPABASE_SERVICE_ROLE_KEY');
     8	}
     9	
    10	export const supabaseAdmin = createClient(url, key, {
    11	    auth: { persistSession: false, autoRefreshToken: false },
    12	});

========== FILE: ./src/App.tsx ==========

     1	import { Toaster } from "@/components/ui/toaster";
     2	import { Toaster as Sonner } from "@/components/ui/sonner";
     3	import { TooltipProvider } from "@/components/ui/tooltip";
     4	import { QueryClient, QueryClientProvider } from "@tanstack/react-query";
     5	import { BrowserRouter, Routes, Route } from "react-router-dom";
     6	import { Navbar } from "@/components/layout/Navbar";
     7	import { Footer } from "@/components/layout/Footer";
     8	import Index from "./pages/Index";
     9	import Translate from "./pages/Translate";
    10	import AIChat from "./pages/AIChat";
    11	import About from "./pages/About";
    12	import Timeline from "./pages/Timeline";
    13	import Business from "./pages/Business";
    14	import Join from "./pages/Join";
    15	import Contact from "./pages/Contact";
    16	import Privacy from "./pages/Privacy";
    17	import Login from "./pages/Login";
    18	import NotFound from "./pages/NotFound";
    19	import VavusAI from "./pages/VavusAI";
    20	import VavusApps from "./pages/VavusApps";
    21	import AuthPage from "./pages/AuthPage";
    22	import AccountPage from "./pages/AccountPage";
    23	import ProtectedRoute from "@/components/ProtectedRoute";
    24	import Kickstarter from "./pages/Kickstarter";
    25	import BlogList from '@/pages/BlogList';
    26	import BlogView from '@/pages/BlogView';
    27	import BlogNew from '@/pages/BlogNew';
    28	
    29	
    30	
    31	const queryClient = new QueryClient();
    32	
    33	const App = () => (
    34	    <QueryClientProvider client={queryClient}>
    35	      <TooltipProvider>
    36	        <Toaster />
    37	        <Sonner />
    38	        <BrowserRouter>
    39	          <div className="min-h-screen flex flex-col">
    40	            <Navbar />
    41	            <main className="flex-1">
    42	              <Routes>
    43	                <Route path="/" element={<Index />} />
    44	                <Route path="/translate" element={<Translate />} />
    45	                <Route path="/ai" element={<AIChat />} />
    46	                <Route path="/about" element={<About />} />
    47	                <Route path="/timeline" element={<Timeline />} />
    48	                <Route path="/business" element={<Business />} />
    49	                <Route path="/vavus-ai" element={<VavusAI />} />
    50	                <Route path="/vavus-apps" element={<VavusApps />} />
    51	                <Route path="/join" element={<Join />} />
    52	                <Route path="/contact" element={<Contact />} />
    53	                <Route path="/privacy" element={<Privacy />} />
    54	                <Route path="/kickstarter" element={<Kickstarter />} />
    55	                <Route path="/blog" element={<BlogList />} />
    56	                <Route path="/blog/new" element={<BlogNew />} />
    57	                <Route path="/blog/:slug" element={<BlogView />} />
    58	
    59	                {/* Auth pages */}
    60	                <Route path="/auth" element={<AuthPage />} />
    61	                <Route
    62	                    path="/account"
    63	                    element={
    64	                      <ProtectedRoute>
    65	                        <AccountPage />
    66	                      </ProtectedRoute>
    67	                    }
    68	                />
    69	
    70	                {/* Optional: keep old /login path but redirect to /auth */}
    71	                <Route path="/login" element={<AuthPage />} />
    72	
    73	                <Route path="*" element={<NotFound />} />
    74	              </Routes>
    75	
    76	            </main>
    77	            <Footer />
    78	          </div>
    79	        </BrowserRouter>
    80	      </TooltipProvider>
    81	    </QueryClientProvider>
    82	);
    83	
    84	export default App;

========== FILE: ./src/components/blog/BlogCard.tsx ==========

     1	import { Link } from 'react-router-dom';
     2	import { Card } from '@/components/ui/card';
     3	
     4	type Props = {
     5	    slug: string;
     6	    title: string;
     7	    excerpt?: string | null;
     8	    cover_url?: string | null;
     9	    created_at: string;
    10	    tags?: string[] | null;
    11	};
    12	
    13	export default function BlogCard(p: Props) {
    14	    return (
    15	        <Card className="overflow-hidden group hover:shadow-lg transition">
    16	            <Link to={`/blog/${p.slug}`} className="block">
    17	                <div className="aspect-[16/9] bg-surface overflow-hidden">
    18	                    {p.cover_url ? (
    19	                        <img
    20	                            src={p.cover_url}
    21	                            alt={p.title}
    22	                            className="w-full h-full object-cover group-hover:scale-[1.02] transition"
    23	                            loading="lazy"
    24	                        />
    25	                    ) : (
    26	                        <div className="w-full h-full bg-gradient-hero" />
    27	                    )}
    28	                </div>
    29	                <div className="p-4">
    30	                    <h3 className="font-semibold text-lg">{p.title}</h3>
    31	                    <p className="text-xs text-muted-foreground mt-1">
    32	                        {new Date(p.created_at).toLocaleDateString()}
    33	                    </p>
    34	                    {p.excerpt && (
    35	                        <p className="text-sm text-foreground/80 mt-3 line-clamp-3">{p.excerpt}</p>
    36	                    )}
    37	                    {p.tags && p.tags.length > 0 && (
    38	                        <div className="mt-3 flex flex-wrap gap-2">
    39	                            {p.tags.slice(0, 4).map(t => (
    40	                                <span key={t} className="text-xs rounded-full px-2 py-1 bg-surface">
    41	                  #{t}
    42	                </span>
    43	                            ))}
    44	                        </div>
    45	                    )}
    46	                </div>
    47	            </Link>
    48	        </Card>
    49	    );
    50	}

========== FILE: ./src/components/chat/ChatMessages.tsx ==========

     1	import React from 'react';
     2	import { Card } from '@/components/ui/card';
     3	import { ChatMessage } from '@/hooks/useStreamedChat';
     4	
     5	interface Props {
     6	    messages: ChatMessage[];
     7	    streamText: string;
     8	    isThinking: boolean;
     9	    containerRef: React.RefObject<HTMLDivElement>;
    10	    onScroll: () => void;
    11	}
    12	
    13	const ChatMessages: React.FC<Props> = ({ messages, streamText, isThinking, containerRef, onScroll }) => {
    14	    return (
    15	        <Card ref={containerRef} className="mb-4 p-4 h-[480px] overflow-y-auto" onScroll={onScroll}>
    16	            <div className="space-y-4">
    17	                {messages.map((m) => (
    18	                    <div key={m.id} className={`flex ${m.role === 'user' ? 'justify-end' : 'justify-start'}`}>
    19	                        <div className="bg-surface border border-border p-3 rounded-lg whitespace-pre-wrap">
    20	                            {m.content}
    21	                        </div>
    22	                    </div>
    23	                ))}
    24	                {streamText && (
    25	                    <div className="flex justify-start">
    26	                        <div className="bg-surface border border-border p-3 rounded-lg whitespace-pre-wrap">
    27	                            {streamText}
    28	                        </div>
    29	                    </div>
    30	                )}
    31	                {isThinking && !streamText && (
    32	                    <div className="flex justify-start">
    33	                        <div className="bg-surface border border-border p-3 rounded-lg">
    34	                            <span className="animate-pulse text-sm">Thinking...</span>
    35	                        </div>
    36	                    </div>
    37	                )}
    38	            </div>
    39	        </Card>
    40	    );
    41	};
    42	
    43	export default ChatMessages;

========== FILE: ./src/components/chat/ConversationSidebar.tsx ==========

     1	import React from 'react';
     2	import { Button } from '@/components/ui/button';
     3	import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
     4	import { Plus, Pencil } from 'lucide-react';
     5	
     6	interface Conversation {
     7	    id: string;
     8	    title?: string | null;
     9	}
    10	
    11	interface Props {
    12	    conversations: Conversation[];
    13	    activeId?: string;
    14	    onSelect: (id?: string) => void;
    15	    onNew: () => void;
    16	    onRename: () => void;
    17	    loading?: boolean;
    18	}
    19	
    20	const ConversationSidebar: React.FC<Props> = ({
    21	                                                  conversations,
    22	                                                  activeId,
    23	                                                  onSelect,
    24	                                                  onNew,
    25	                                                  onRename,
    26	                                                  loading,
    27	                                              }) => {
    28	    return (
    29	        <div className="flex items-center gap-2">
    30	            <Select value={activeId ?? ''} onValueChange={(v) => onSelect(v || undefined)}>
    31	                <SelectTrigger className="w-64">
    32	                    <SelectValue placeholder={loading ? 'Loading…' : activeId ? 'Select conversation' : 'New conversation'} />
    33	                </SelectTrigger>
    34	                <SelectContent>
    35	                    {conversations.map((c) => (
    36	                        <SelectItem key={c.id} value={c.id}>
    37	                            {c.title || 'Untitled conversation'}
    38	                        </SelectItem>
    39	                    ))}
    40	                    {conversations.length === 0 && (
    41	                        <div className="px-3 py-2 text-sm text-muted-foreground">No conversations yet</div>
    42	                    )}
    43	                </SelectContent>
    44	            </Select>
    45	            <Button variant="outline" size="icon" onClick={onRename} disabled={!activeId}>
    46	                <Pencil className="h-4 w-4" />
    47	            </Button>
    48	            <Button variant="outline" onClick={onNew}>
    49	                <Plus className="h-4 w-4 mr-1" />
    50	                New chat
    51	            </Button>
    52	        </div>
    53	    );
    54	};
    55	
    56	export default ConversationSidebar;

========== FILE: ./src/components/chat/MessageInput.tsx ==========

     1	import React from 'react';
     2	import { Input } from '@/components/ui/input';
     3	import { Button } from '@/components/ui/button';
     4	import { Send } from 'lucide-react';
     5	
     6	interface Props {
     7	    value: string;
     8	    onChange: (v: string) => void;
     9	    onSend: () => void;
    10	    disabled?: boolean;
    11	}
    12	
    13	const MessageInput: React.FC<Props> = ({ value, onChange, onSend, disabled }) => {
    14	    return (
    15	        <div className="flex space-x-2">
    16	            <Input
    17	                placeholder="Type your message…"
    18	                value={value}
    19	                onChange={(e) => onChange(e.target.value)}
    20	                onKeyDown={(e) => e.key === 'Enter' && !e.shiftKey && onSend()}
    21	                className="flex-1 focus-ring"
    22	            />
    23	            <Button onClick={onSend} disabled={!value.trim() || disabled} className="btn-hero">
    24	                <Send className="h-4 w-4" />
    25	            </Button>
    26	        </div>
    27	    );
    28	};
    29	
    30	export default MessageInput;

========== FILE: ./src/components/chat/ScrollToBottom.tsx ==========

     1	import React from 'react';
     2	import { Button } from '@/components/ui/button';
     3	import { ArrowDown } from 'lucide-react';
     4	
     5	interface Props {
     6	    show: boolean;
     7	    onClick: () => void;
     8	}
     9	
    10	const ScrollToBottom: React.FC<Props> = ({ show, onClick }) => {
    11	    if (!show) return null;
    12	    return (
    13	        <Button onClick={onClick} size="sm" className="absolute bottom-4 right-4">
    14	            <ArrowDown className="h-4 w-4 mr-1" />
    15	            Jump to latest
    16	        </Button>
    17	    );
    18	};
    19	
    20	export default ScrollToBottom;

========== FILE: ./src/components/DeviceShowcase.tsx ==========

     1	import React from 'react';
     2	import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
     3	import { Badge } from '@/components/ui/badge';
     4	
     5	const DeviceShowcase: React.FC = () => {
     6	  const features: string[] = [
     7	    '419-language translation in real time',
     8	    'Live transcription & AI notes for meetings and calls',
     9	    'Vavus AI — Top 3 overall; specialist agents: Legal, Medical, Tutor, Professor',
    10	    'Zero telemetry & end-to-end encrypted device↔device chats',
    11	    'Vavus OS — no social media, no Google tracking; FIPS-only encryption across OS & apps',
    12	    'HIPAA Mode (optional): on-device audit; encrypted uploads under your keys; BAA available',
    13	    'No-Guardrails Research Mode: open topic for lawful research (no step-by-step harm)',
    14	  ];
    15	
    16	  const trustBadges = [
    17	    'FIPS-Only Encryption',
    18	    'Zero Telemetry',
    19	    'End-to-End Chats',
    20	    'HIPAA Mode',
    21	    'BAA Available',
    22	  ];
    23	
    24	  return (
    25	      <section className="pt-0 pb-12 px-4 sm:px-6 lg:px-8 bg-gray-50">
    26	        <div className="max-w-7xl mx-auto">
    27	          <Card className="overflow-hidden">
    28	            <CardHeader className="text-center">
    29	              <div className="mb-2">
    30	                <Badge variant="secondary" className="rounded-full px-3 py-1 text-xs">
    31	                  VAVUS AI
    32	                </Badge>
    33	              </div>
    34	              <CardTitle className="text-3xl font-bold">
    35	                The world’s first AI Device — <span className="text-primary">Fully HIPAA-Compliant</span>
    36	              </CardTitle>
    37	              <p className="mt-3 text-muted-foreground">
    38	                Access without surveillance. Zero telemetry by default. FIPS-only encryption end-to-end.
    39	              </p>
    40	            </CardHeader>
    41	
    42	            <CardContent className="flex flex-col lg:flex-row items-center gap-8">
    43	              {/* Device image */}
    44	              <div className="w-full lg:w-1/2">
    45	                <img
    46	                    src="/images/device.png" // Update with your image
    47	                    alt="Vavus AI Device — HIPAA-grade with encrypted chat and translation"
    48	                    className="w-full max-w-md mx-auto rounded-lg shadow-lg"
    49	                />
    50	                <p className="text-center text-sm text-gray-500 mt-2">
    51	                  Encrypted device↔device chats • Private by default
    52	                </p>
    53	              </div>
    54	
    55	              {/* Features list */}
    56	              <div className="w-full lg:w-1/2">
    57	                <h3 className="text-xl font-semibold mb-4">Key Features</h3>
    58	                <ul className="space-y-3">
    59	                  {features.map((feature, index) => (
    60	                      <li key={index} className="flex items-start">
    61	                        <Badge variant="default" className="mr-2 mt-1 rounded-full px-2">
    62	                          ✓
    63	                        </Badge>
    64	                        <span className="text-lg text-foreground/90">{feature}</span>
    65	                      </li>
    66	                  ))}
    67	                </ul>
    68	
    69	                {/* Trust badges */}
    70	                <div className="mt-6 flex flex-wrap gap-2">
    71	                  {trustBadges.map((b) => (
    72	                      <Badge key={b} variant="secondary" className="rounded-full px-3 py-1">
    73	                        {b}
    74	                      </Badge>
    75	                  ))}
    76	                </div>
    77	              </div>
    78	            </CardContent>
    79	          </Card>
    80	        </div>
    81	      </section>
    82	  );
    83	};
    84	
    85	export default DeviceShowcase;

========== FILE: ./src/components/layout/Footer.tsx ==========

     1	import React from 'react';
     2	import { Link } from 'react-router-dom';
     3	import { Zap, Twitter, Github, Linkedin, Mail } from 'lucide-react';
     4	
     5	export const Footer = () => {
     6	  const currentYear = new Date().getFullYear();
     7	
     8	  return (
     9	    <footer className="bg-surface border-t border-border">
    10	      <div className="mx-auto max-w-7xl px-4 py-12 sm:px-6 lg:px-8">
    11	        <div className="grid grid-cols-1 md:grid-cols-4 gap-8">
    12	          {/* Brand */}
    13	          <div className="space-y-4">
    14	            <div className="flex items-center space-x-2">
    15	              <div className="bg-gradient-hero p-2 rounded-lg">
    16	                <Zap className="h-5 w-5 text-white" />
    17	              </div>
    18	              <span className="text-lg font-bold gradient-text">VAVUS AI</span>
    19	            </div>
    20	            <p className="text-muted-foreground text-sm">
    21	              Translation & AI for everyone. Secure, private, and designed for the future.
    22	            </p>
    23	          </div>
    24	
    25	          {/* Product */}
    26	          <div>
    27	            <h3 className="text-sm font-semibold text-foreground mb-4">Product</h3>
    28	            <ul className="space-y-3">
    29	              <li>
    30	                <Link to="/translate" className="text-sm text-muted-foreground hover:text-foreground transition-colors">
    31	                  Translate
    32	                </Link>
    33	              </li>
    34	              <li>
    35	                <Link to="/ai" className="text-sm text-muted-foreground hover:text-foreground transition-colors">
    36	                  AI Chat
    37	                </Link>
    38	              </li>
    39	              <li>
    40	                <Link to="/timeline" className="text-sm text-muted-foreground hover:text-foreground transition-colors">
    41	                  Roadmap
    42	                </Link>
    43	              </li>
    44	              <li>
    45	                <Link to="/business" className="text-sm text-muted-foreground hover:text-foreground transition-colors">
    46	                  For Business
    47	                </Link>
    48	              </li>
    49	              <li>
    50	                <Link to="/vavus-apps" className="text-sm text-muted-foreground hover:text-foreground transition-colors">
    51	                  Vavus Apps
    52	                </Link>
    53	              </li>
    54	            </ul>
    55	          </div>
    56	
    57	          {/* Company */}
    58	          <div>
    59	            <h3 className="text-sm font-semibold text-foreground mb-4">Company</h3>
    60	            <ul className="space-y-3">
    61	              <li>
    62	                <Link to="/about" className="text-sm text-muted-foreground hover:text-foreground transition-colors">
    63	                  About
    64	                </Link>
    65	              </li>
    66	              <li>
    67	                <Link to="/join" className="text-sm text-muted-foreground hover:text-foreground transition-colors">
    68	                  Careers
    69	                </Link>
    70	              </li>
    71	              <li>
    72	                <Link to="/contact" className="text-sm text-muted-foreground hover:text-foreground transition-colors">
    73	                  Contact
    74	                </Link>
    75	              </li>
    76	            </ul>
    77	          </div>
    78	
    79	          {/* Legal & Social */}
    80	          <div>
    81	            <h3 className="text-sm font-semibold text-foreground mb-4">Connect</h3>
    82	            <ul className="space-y-3 mb-6">
    83	              <li>
    84	                <Link to="/privacy" className="text-sm text-muted-foreground hover:text-foreground transition-colors">
    85	                  Privacy Policy
    86	                </Link>
    87	              </li>
    88	            </ul>
    89	            
    90	            <div className="flex space-x-4">
    91	              <a href="#" className="text-muted-foreground hover:text-foreground transition-colors">
    92	                <Twitter className="h-5 w-5" />
    93	              </a>
    94	              <a href="#" className="text-muted-foreground hover:text-foreground transition-colors">
    95	                <Github className="h-5 w-5" />
    96	              </a>
    97	              <a href="#" className="text-muted-foreground hover:text-foreground transition-colors">
    98	                <Linkedin className="h-5 w-5" />
    99	              </a>
   100	              <a href="mailto:hello@vavus.ai" className="text-muted-foreground hover:text-foreground transition-colors">
   101	                <Mail className="h-5 w-5" />
   102	              </a>
   103	            </div>
   104	          </div>
   105	        </div>
   106	
   107	        <div className="mt-8 pt-8 border-t border-border">
   108	          <p className="text-sm text-muted-foreground text-center">
   109	            © {currentYear} VAVUS AI. All rights reserved.
   110	          </p>
   111	        </div>
   112	      </div>
   113	    </footer>
   114	  );
   115	};

========== FILE: ./src/components/layout/Navbar.tsx ==========

     1	import React, { useState } from 'react';
     2	import { Link, useLocation } from 'react-router-dom';
     3	import { Menu, X, Zap, ChevronDown } from 'lucide-react';
     4	import { Button } from '@/components/ui/button';
     5	import { useSession } from "@/hooks/useSession";
     6	import { supabase } from "@/lib/supabase";
     7	import { useIsAdmin } from "@/hooks/useIsAdmin";
     8	
     9	const AI_ITEMS = [
    10	  { name: 'Vavus AI', href: '/vavus-ai' },
    11	  { name: 'Translate', href: '/translate' },
    12	  { name: 'AI Chat', href: '/ai' },
    13	  { name: 'Vavus Apps', href: '/vavus-apps' },
    14	];
    15	
    16	const WHO_ITEMS = [
    17	  { name: 'About', href: '/about' },
    18	  { name: 'Timeline', href: '/timeline' },
    19	  { name: 'Join Us', href: '/join' },
    20	  { name: 'Contact', href: '/contact' },
    21	];
    22	
    23	export const Navbar = () => {
    24	  const [mobileMenuOpen, setMobileMenuOpen] = useState(false);
    25	  const location = useLocation();
    26	  const { session } = useSession();
    27	  const isAdmin = useIsAdmin();
    28	
    29	  const isActivePath = (path: string) => {
    30	    if (path === '/' && location.pathname === '/') return true;
    31	    if (path !== '/' && location.pathname.startsWith(path)) return true;
    32	    return false;
    33	  };
    34	
    35	  const isGroupActive = (items: { href: string }[]) =>
    36	      items.some((i) => isActivePath(i.href));
    37	
    38	  return (
    39	      <nav className="sticky top-0 z-50 bg-white/95 backdrop-blur-md border-b border-border">
    40	        <div className="mx-auto max-w-7xl px-4 sm:px-6 lg:px-8">
    41	          <div className="flex h-16 items-center justify-between">
    42	            {/* Logo */}
    43	            <div className="flex items-center">
    44	              <Link to="/" className="flex items-center space-x-2 group">
    45	                <div className="bg-gradient-hero p-2 rounded-lg group-hover:shadow-brand transition-all duration-300">
    46	                  <Zap className="h-6 w-6 text-white" />
    47	                </div>
    48	                <span className="text-xl font-bold gradient-text">VAVUS AI</span>
    49	              </Link>
    50	            </div>
    51	
    52	            {/* Desktop Navigation */}
    53	            <div className="hidden md:block">
    54	              <div className="ml-10 flex items-center gap-6">
    55	                {/* Home */}
    56	                <Link to="/" className={`nav-link whitespace-nowrap ${isActivePath('/') ? 'active' : ''}`}>
    57	                  Home
    58	                </Link>
    59	
    60	                {/* AI dropdown */}
    61	                <div className="relative group">
    62	                  <button
    63	                      className={`nav-link whitespace-nowrap flex items-center gap-1 ${isGroupActive(AI_ITEMS) ? 'active' : ''}`}
    64	                      aria-haspopup="menu"
    65	                  >
    66	                    AI <ChevronDown className="h-4 w-4 opacity-70 transition group-hover:rotate-180" />
    67	                  </button>
    68	
    69	                  {/* Hover-safe dropdown */}
    70	                  <div
    71	                      className="
    72	                    absolute left-0 top-full pt-3
    73	                    opacity-0 invisible group-hover:opacity-100 group-hover:visible
    74	                    transition z-50
    75	                  "
    76	                  >
    77	                    <div className="w-56 rounded-xl border bg-white shadow-lg p-2">
    78	                      {AI_ITEMS.map((item) => (
    79	                          <Link
    80	                              key={item.name}
    81	                              to={item.href}
    82	                              className={`block rounded-md px-3 py-2 text-sm text-foreground/80 hover:text-foreground hover:bg-surface ${
    83	                                  isActivePath(item.href) ? 'bg-primary-light text-primary' : ''
    84	                              }`}
    85	                          >
    86	                            {item.name}
    87	                          </Link>
    88	                      ))}
    89	                    </div>
    90	                  </div>
    91	                </div>
    92	
    93	                {/* Who we are dropdown */}
    94	                <div className="relative group">
    95	                  <button
    96	                      className={`nav-link whitespace-nowrap flex items-center gap-1 ${isGroupActive(WHO_ITEMS) ? 'active' : ''}`}
    97	                      aria-haspopup="menu"
    98	                  >
    99	                    Who we are <ChevronDown className="h-4 w-4 opacity-70 transition group-hover:rotate-180" />
   100	                  </button>
   101	
   102	                  {/* Hover-safe dropdown */}
   103	                  <div
   104	                      className="
   105	                    absolute left-0 top-full pt-3
   106	                    opacity-0 invisible group-hover:opacity-100 group-hover:visible
   107	                    transition z-50
   108	                  "
   109	                  >
   110	                    <div className="w-56 rounded-xl border bg-white shadow-lg p-2">
   111	                      {WHO_ITEMS.map((item) => (
   112	                          <Link
   113	                              key={item.name}
   114	                              to={item.href}
   115	                              className={`block rounded-md px-3 py-2 text-sm text-foreground/80 hover:text-foreground hover:bg-surface ${
   116	                                  isActivePath(item.href) ? 'bg-primary-light text-primary' : ''
   117	                              }`}
   118	                          >
   119	                            {item.name}
   120	                          </Link>
   121	                      ))}
   122	                    </div>
   123	                  </div>
   124	                </div>
   125	
   126	                {/* Blog */}
   127	                <Link
   128	                    to="/blog"
   129	                    className={`nav-link whitespace-nowrap ${isActivePath('/blog') ? 'active' : ''}`}
   130	                >
   131	                  Blog
   132	                </Link>
   133	
   134	                {/* Admin-only: New Post */}
   135	                {isAdmin ? (
   136	                    <Link
   137	                        to="/blog/new"
   138	                        className={`nav-link whitespace-nowrap ${isActivePath('/blog/new') ? 'active' : ''}`}
   139	                    >
   140	                      New Post
   141	                    </Link>
   142	                ) : null}
   143	
   144	                {/* For Businesses */}
   145	                <Link
   146	                    to="/business"
   147	                    className={`nav-link whitespace-nowrap ${isActivePath('/business') ? 'active' : ''}`}
   148	                >
   149	                  For Businesses
   150	                </Link>
   151	              </div>
   152	            </div>
   153	
   154	            {/* Desktop CTA (session-aware) */}
   155	            <div className="hidden md:flex items-center gap-x-3">
   156	              {session ? (
   157	                  <>
   158	                    <Link to="/account">
   159	                      <Button className="btn-hero whitespace-nowrap">Account</Button>
   160	                    </Link>
   161	                    <Button variant="outline" onClick={() => supabase.auth.signOut()}>
   162	                      Sign out
   163	                    </Button>
   164	                  </>
   165	              ) : (
   166	                  <Link to="/auth">
   167	                    <Button className="btn-hero whitespace-nowrap">Login / Create account</Button>
   168	                  </Link>
   169	              )}
   170	            </div>
   171	
   172	            {/* Mobile menu button */}
   173	            <div className="md:hidden">
   174	              <button onClick={() => setMobileMenuOpen(!mobileMenuOpen)} className="btn-ghost">
   175	                {mobileMenuOpen ? <X className="h-6 w-6" /> : <Menu className="h-6 w-6" />}
   176	              </button>
   177	            </div>
   178	          </div>
   179	        </div>
   180	
   181	        {/* Mobile menu */}
   182	        {mobileMenuOpen && (
   183	            <div className="md:hidden bg-white/95 backdrop-blur-md border-b border-border">
   184	              <div className="px-2 pt-2 pb-3 space-y-1 sm:px-3">
   185	                {/* Home */}
   186	                <Link
   187	                    to="/"
   188	                    onClick={() => setMobileMenuOpen(false)}
   189	                    className={`block px-3 py-2 text-base font-medium rounded-lg transition-colors ${
   190	                        isActivePath('/') ? 'text-primary bg-primary-light' : 'text-muted-foreground hover:text-foreground hover:bg-surface'
   191	                    }`}
   192	                >
   193	                  Home
   194	                </Link>
   195	
   196	                {/* AI (accordion) */}
   197	                <details open={isGroupActive(AI_ITEMS)} className="px-1">
   198	                  <summary className="px-2 py-2 rounded-md text-base font-medium cursor-pointer text-foreground/80 hover:text-foreground">
   199	                    AI
   200	                  </summary>
   201	                  <div className="mt-1 pl-3">
   202	                    {AI_ITEMS.map((item) => (
   203	                        <Link
   204	                            key={item.name}
   205	                            to={item.href}
   206	                            onClick={() => setMobileMenuOpen(false)}
   207	                            className={`block px-3 py-2 text-sm rounded-md ${
   208	                                isActivePath(item.href)
   209	                                    ? 'text-primary bg-primary-light'
   210	                                    : 'text-muted-foreground hover:text-foreground hover:bg-surface'
   211	                            }`}
   212	                        >
   213	                          {item.name}
   214	                        </Link>
   215	                    ))}
   216	                  </div>
   217	                </details>
   218	
   219	                {/* Who we are (accordion) */}
   220	                <details open={isGroupActive(WHO_ITEMS)} className="px-1">
   221	                  <summary className="px-2 py-2 rounded-md text-base font-medium cursor-pointer text-foreground/80 hover:text-foreground">
   222	                    Who we are
   223	                  </summary>
   224	                  <div className="mt-1 pl-3">
   225	                    {WHO_ITEMS.map((item) => (
   226	                        <Link
   227	                            key={item.name}
   228	                            to={item.href}
   229	                            onClick={() => setMobileMenuOpen(false)}
   230	                            className={`block px-3 py-2 text-sm rounded-md ${
   231	                                isActivePath(item.href)
   232	                                    ? 'text-primary bg-primary-light'
   233	                                    : 'text-muted-foreground hover:text-foreground hover:bg-surface'
   234	                            }`}
   235	                        >
   236	                          {item.name}
   237	                        </Link>
   238	                    ))}
   239	                  </div>
   240	                </details>
   241	
   242	                {/* Blog */}
   243	                <Link
   244	                    to="/blog"
   245	                    onClick={() => setMobileMenuOpen(false)}
   246	                    className={`block px-3 py-2 text-base font-medium rounded-lg transition-colors ${
   247	                        isActivePath('/blog')
   248	                            ? 'text-primary bg-primary-light'
   249	                            : 'text-muted-foreground hover:text-foreground hover:bg-surface'
   250	                    }`}
   251	                >
   252	                  Blog
   253	                </Link>
   254	
   255	                {/* Admin-only: New Post */}
   256	                {isAdmin ? (
   257	                    <Link
   258	                        to="/blog/new"
   259	                        onClick={() => setMobileMenuOpen(false)}
   260	                        className={`block px-3 py-2 text-base font-medium rounded-lg transition-colors ${
   261	                            isActivePath('/blog/new')
   262	                                ? 'text-primary bg-primary-light'
   263	                                : 'text-muted-foreground hover:text-foreground hover:bg-surface'
   264	                        }`}
   265	                    >
   266	                      New Post
   267	                    </Link>
   268	                ) : null}
   269	
   270	                {/* For Businesses */}
   271	                <Link
   272	                    to="/business"
   273	                    onClick={() => setMobileMenuOpen(false)}
   274	                    className={`block px-3 py-2 text-base font-medium rounded-lg transition-colors ${
   275	                        isActivePath('/business')
   276	                            ? 'text-primary bg-primary-light'
   277	                            : 'text-muted-foreground hover:text-foreground hover:bg-surface'
   278	                    }`}
   279	                >
   280	                  For Businesses
   281	                </Link>
   282	
   283	                {/* CTA (session-aware) */}
   284	                <div className="pt-4 pb-2">
   285	                  {session ? (
   286	                      <>
   287	                        <Link to="/account" onClick={() => setMobileMenuOpen(false)}>
   288	                          <Button className="btn-hero w-full">Account</Button>
   289	                        </Link>
   290	                        <Button
   291	                            variant="outline"
   292	                            className="w-full mt-2"
   293	                            onClick={() => {
   294	                              setMobileMenuOpen(false);
   295	                              supabase.auth.signOut();
   296	                            }}
   297	                        >
   298	                          Sign out
   299	                        </Button>
   300	                      </>
   301	                  ) : (
   302	                      <Link to="/auth" onClick={() => setMobileMenuOpen(false)}>
   303	                        <Button className="btn-hero w-full">Login / Create account</Button>
   304	                      </Link>
   305	                  )}
   306	                </div>
   307	              </div>
   308	            </div>
   309	        )}
   310	      </nav>
   311	  );
   312	};

========== FILE: ./src/components/ProtectedRoute.tsx ==========

     1	import { Navigate } from 'react-router-dom'
     2	import { useSession } from '@/hooks/useSession'
     3	
     4	export default function ProtectedRoute({ children }: { children: JSX.Element }) {
     5	    const { session, loading } = useSession()
     6	    if (loading) return null // or a spinner
     7	    return session ? children : <Navigate to="/auth" replace />
     8	}

========== FILE: ./src/components/SubscribeForm.tsx ==========

     1	import React, { useState } from "react";
     2	import { Input } from "@/components/ui/input";
     3	import { Button } from "@/components/ui/button";
     4	import { supabase } from "@/lib/supabase";
     5	
     6	function isEmail(v: string) {
     7	    return /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(v);
     8	}
     9	
    10	type Props = { className?: string; page?: string };
    11	
    12	export default function SubscribeForm({ className = "", page }: Props) {
    13	    const [email, setEmail] = useState("");
    14	    const [status, setStatus] = useState<"idle" | "loading" | "ok" | "error">("idle");
    15	    const [msg, setMsg] = useState("");
    16	
    17	    async function onSubmit(e: React.FormEvent) {
    18	        e.preventDefault();
    19	        const clean = email.trim().toLowerCase();
    20	
    21	        if (!isEmail(clean)) {
    22	            setStatus("error");
    23	            setMsg("Please enter a valid email.");
    24	            return;
    25	        }
    26	
    27	        setStatus("loading");
    28	        setMsg("");
    29	
    30	        // context capture (works client and won’t crash on SSR)
    31	        const hasWin = typeof window !== "undefined";
    32	        const pagePath = page ?? (hasWin ? window.location.pathname : "/kickstarter");
    33	        const utm = hasWin ? (window.location.search.slice(1) || null) : null;
    34	
    35	        try {
    36	            // Try to get user id (ok if unauthenticated)
    37	            let user_id: string | null = null;
    38	            try {
    39	                const {data} = await supabase.auth.getUser();
    40	                user_id = data?.user?.id ?? null;
    41	            } catch { /* ignore */
    42	            }
    43	
    44	            // Single source of truth: plain INSERT; duplicate -> success
    45	            const {error} = await supabase
    46	                .from("subscriptions")
    47	                .insert([{email: clean, user_id, page: pagePath, utm}]);
    48	
    49	            if (error) {
    50	                if (error.code === "23505" || /duplicate key|unique/i.test(error.message)) {
    51	                    setStatus("ok");
    52	                    setMsg("You’re in! 🎉");
    53	                    setEmail("");
    54	                    return;
    55	                }
    56	                console.error("[SubscribeForm] Supabase insert error:", error);
    57	                setStatus("error");
    58	                setMsg(error.message || "Something went wrong. Please try again.");
    59	                return;
    60	            }
    61	
    62	            setStatus("ok");
    63	            setMsg("You’re in! 🎉");
    64	            setEmail("");
    65	        } catch (err: any) {
    66	            console.error("[SubscribeForm] Unexpected:", err);
    67	            setStatus("error");
    68	            setMsg(err?.message || "Network error. Check Supabase URL/key.");
    69	        }
    70	    }
    71	
    72	    return (
    73	        <form onSubmit={onSubmit} className={`flex gap-3 ${className}`}>
    74	            <Input
    75	                type="email"
    76	                value={email}
    77	                onChange={(e) => setEmail(e.target.value)}
    78	                placeholder="you@example.com"
    79	                className="md:w-96"
    80	                disabled={status === "loading"}
    81	                required
    82	            />
    83	            <Button type="submit" disabled={status === "loading"}>
    84	                {status === "loading" ? "Subscribing…" : "Subscribe"}
    85	            </Button>
    86	            {msg && (
    87	                <span className={`text-sm self-center ${status === "error" ? "text-red-600" : "text-green-600"}`}>
    88	          {msg}
    89	        </span>
    90	            )}
    91	        </form>
    92	    );
    93	}

========== FILE: ./src/components/ui/accordion.tsx ==========

     1	import * as React from "react"
     2	import * as AccordionPrimitive from "@radix-ui/react-accordion"
     3	import { ChevronDown } from "lucide-react"
     4	
     5	import { cn } from "@/lib/utils"
     6	
     7	const Accordion = AccordionPrimitive.Root
     8	
     9	const AccordionItem = React.forwardRef<
    10	  React.ElementRef<typeof AccordionPrimitive.Item>,
    11	  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>
    12	>(({ className, ...props }, ref) => (
    13	  <AccordionPrimitive.Item
    14	    ref={ref}
    15	    className={cn("border-b", className)}
    16	    {...props}
    17	  />
    18	))
    19	AccordionItem.displayName = "AccordionItem"
    20	
    21	const AccordionTrigger = React.forwardRef<
    22	  React.ElementRef<typeof AccordionPrimitive.Trigger>,
    23	  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>
    24	>(({ className, children, ...props }, ref) => (
    25	  <AccordionPrimitive.Header className="flex">
    26	    <AccordionPrimitive.Trigger
    27	      ref={ref}
    28	      className={cn(
    29	        "flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180",
    30	        className
    31	      )}
    32	      {...props}
    33	    >
    34	      {children}
    35	      <ChevronDown className="h-4 w-4 shrink-0 transition-transform duration-200" />
    36	    </AccordionPrimitive.Trigger>
    37	  </AccordionPrimitive.Header>
    38	))
    39	AccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName
    40	
    41	const AccordionContent = React.forwardRef<
    42	  React.ElementRef<typeof AccordionPrimitive.Content>,
    43	  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>
    44	>(({ className, children, ...props }, ref) => (
    45	  <AccordionPrimitive.Content
    46	    ref={ref}
    47	    className="overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down"
    48	    {...props}
    49	  >
    50	    <div className={cn("pb-4 pt-0", className)}>{children}</div>
    51	  </AccordionPrimitive.Content>
    52	))
    53	
    54	AccordionContent.displayName = AccordionPrimitive.Content.displayName
    55	
    56	export { Accordion, AccordionItem, AccordionTrigger, AccordionContent }

========== FILE: ./src/components/ui/alert-dialog.tsx ==========

     1	import * as React from "react"
     2	import * as AlertDialogPrimitive from "@radix-ui/react-alert-dialog"
     3	
     4	import { cn } from "@/lib/utils"
     5	import { buttonVariants } from "@/components/ui/button"
     6	
     7	const AlertDialog = AlertDialogPrimitive.Root
     8	
     9	const AlertDialogTrigger = AlertDialogPrimitive.Trigger
    10	
    11	const AlertDialogPortal = AlertDialogPrimitive.Portal
    12	
    13	const AlertDialogOverlay = React.forwardRef<
    14	  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,
    15	  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>
    16	>(({ className, ...props }, ref) => (
    17	  <AlertDialogPrimitive.Overlay
    18	    className={cn(
    19	      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
    20	      className
    21	    )}
    22	    {...props}
    23	    ref={ref}
    24	  />
    25	))
    26	AlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName
    27	
    28	const AlertDialogContent = React.forwardRef<
    29	  React.ElementRef<typeof AlertDialogPrimitive.Content>,
    30	  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>
    31	>(({ className, ...props }, ref) => (
    32	  <AlertDialogPortal>
    33	    <AlertDialogOverlay />
    34	    <AlertDialogPrimitive.Content
    35	      ref={ref}
    36	      className={cn(
    37	        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
    38	        className
    39	      )}
    40	      {...props}
    41	    />
    42	  </AlertDialogPortal>
    43	))
    44	AlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName
    45	
    46	const AlertDialogHeader = ({
    47	  className,
    48	  ...props
    49	}: React.HTMLAttributes<HTMLDivElement>) => (
    50	  <div
    51	    className={cn(
    52	      "flex flex-col space-y-2 text-center sm:text-left",
    53	      className
    54	    )}
    55	    {...props}
    56	  />
    57	)
    58	AlertDialogHeader.displayName = "AlertDialogHeader"
    59	
    60	const AlertDialogFooter = ({
    61	  className,
    62	  ...props
    63	}: React.HTMLAttributes<HTMLDivElement>) => (
    64	  <div
    65	    className={cn(
    66	      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
    67	      className
    68	    )}
    69	    {...props}
    70	  />
    71	)
    72	AlertDialogFooter.displayName = "AlertDialogFooter"
    73	
    74	const AlertDialogTitle = React.forwardRef<
    75	  React.ElementRef<typeof AlertDialogPrimitive.Title>,
    76	  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>
    77	>(({ className, ...props }, ref) => (
    78	  <AlertDialogPrimitive.Title
    79	    ref={ref}
    80	    className={cn("text-lg font-semibold", className)}
    81	    {...props}
    82	  />
    83	))
    84	AlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName
    85	
    86	const AlertDialogDescription = React.forwardRef<
    87	  React.ElementRef<typeof AlertDialogPrimitive.Description>,
    88	  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>
    89	>(({ className, ...props }, ref) => (
    90	  <AlertDialogPrimitive.Description
    91	    ref={ref}
    92	    className={cn("text-sm text-muted-foreground", className)}
    93	    {...props}
    94	  />
    95	))
    96	AlertDialogDescription.displayName =
    97	  AlertDialogPrimitive.Description.displayName
    98	
    99	const AlertDialogAction = React.forwardRef<
   100	  React.ElementRef<typeof AlertDialogPrimitive.Action>,
   101	  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>
   102	>(({ className, ...props }, ref) => (
   103	  <AlertDialogPrimitive.Action
   104	    ref={ref}
   105	    className={cn(buttonVariants(), className)}
   106	    {...props}
   107	  />
   108	))
   109	AlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName
   110	
   111	const AlertDialogCancel = React.forwardRef<
   112	  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,
   113	  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>
   114	>(({ className, ...props }, ref) => (
   115	  <AlertDialogPrimitive.Cancel
   116	    ref={ref}
   117	    className={cn(
   118	      buttonVariants({ variant: "outline" }),
   119	      "mt-2 sm:mt-0",
   120	      className
   121	    )}
   122	    {...props}
   123	  />
   124	))
   125	AlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName
   126	
   127	export {
   128	  AlertDialog,
   129	  AlertDialogPortal,
   130	  AlertDialogOverlay,
   131	  AlertDialogTrigger,
   132	  AlertDialogContent,
   133	  AlertDialogHeader,
   134	  AlertDialogFooter,
   135	  AlertDialogTitle,
   136	  AlertDialogDescription,
   137	  AlertDialogAction,
   138	  AlertDialogCancel,
   139	}

========== FILE: ./src/components/ui/alert.tsx ==========

     1	import * as React from "react"
     2	import { cva, type VariantProps } from "class-variance-authority"
     3	
     4	import { cn } from "@/lib/utils"
     5	
     6	const alertVariants = cva(
     7	  "relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground",
     8	  {
     9	    variants: {
    10	      variant: {
    11	        default: "bg-background text-foreground",
    12	        destructive:
    13	          "border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive",
    14	      },
    15	    },
    16	    defaultVariants: {
    17	      variant: "default",
    18	    },
    19	  }
    20	)
    21	
    22	const Alert = React.forwardRef<
    23	  HTMLDivElement,
    24	  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>
    25	>(({ className, variant, ...props }, ref) => (
    26	  <div
    27	    ref={ref}
    28	    role="alert"
    29	    className={cn(alertVariants({ variant }), className)}
    30	    {...props}
    31	  />
    32	))
    33	Alert.displayName = "Alert"
    34	
    35	const AlertTitle = React.forwardRef<
    36	  HTMLParagraphElement,
    37	  React.HTMLAttributes<HTMLHeadingElement>
    38	>(({ className, ...props }, ref) => (
    39	  <h5
    40	    ref={ref}
    41	    className={cn("mb-1 font-medium leading-none tracking-tight", className)}
    42	    {...props}
    43	  />
    44	))
    45	AlertTitle.displayName = "AlertTitle"
    46	
    47	const AlertDescription = React.forwardRef<
    48	  HTMLParagraphElement,
    49	  React.HTMLAttributes<HTMLParagraphElement>
    50	>(({ className, ...props }, ref) => (
    51	  <div
    52	    ref={ref}
    53	    className={cn("text-sm [&_p]:leading-relaxed", className)}
    54	    {...props}
    55	  />
    56	))
    57	AlertDescription.displayName = "AlertDescription"
    58	
    59	export { Alert, AlertTitle, AlertDescription }

========== FILE: ./src/components/ui/aspect-ratio.tsx ==========

     1	import * as AspectRatioPrimitive from "@radix-ui/react-aspect-ratio"
     2	
     3	const AspectRatio = AspectRatioPrimitive.Root
     4	
     5	export { AspectRatio }

========== FILE: ./src/components/ui/avatar.tsx ==========

     1	import * as React from "react"
     2	import * as AvatarPrimitive from "@radix-ui/react-avatar"
     3	
     4	import { cn } from "@/lib/utils"
     5	
     6	const Avatar = React.forwardRef<
     7	  React.ElementRef<typeof AvatarPrimitive.Root>,
     8	  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>
     9	>(({ className, ...props }, ref) => (
    10	  <AvatarPrimitive.Root
    11	    ref={ref}
    12	    className={cn(
    13	      "relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full",
    14	      className
    15	    )}
    16	    {...props}
    17	  />
    18	))
    19	Avatar.displayName = AvatarPrimitive.Root.displayName
    20	
    21	const AvatarImage = React.forwardRef<
    22	  React.ElementRef<typeof AvatarPrimitive.Image>,
    23	  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>
    24	>(({ className, ...props }, ref) => (
    25	  <AvatarPrimitive.Image
    26	    ref={ref}
    27	    className={cn("aspect-square h-full w-full", className)}
    28	    {...props}
    29	  />
    30	))
    31	AvatarImage.displayName = AvatarPrimitive.Image.displayName
    32	
    33	const AvatarFallback = React.forwardRef<
    34	  React.ElementRef<typeof AvatarPrimitive.Fallback>,
    35	  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>
    36	>(({ className, ...props }, ref) => (
    37	  <AvatarPrimitive.Fallback
    38	    ref={ref}
    39	    className={cn(
    40	      "flex h-full w-full items-center justify-center rounded-full bg-muted",
    41	      className
    42	    )}
    43	    {...props}
    44	  />
    45	))
    46	AvatarFallback.displayName = AvatarPrimitive.Fallback.displayName
    47	
    48	export { Avatar, AvatarImage, AvatarFallback }

========== FILE: ./src/components/ui/badge.tsx ==========

     1	import * as React from "react"
     2	import { cva, type VariantProps } from "class-variance-authority"
     3	
     4	import { cn } from "@/lib/utils"
     5	
     6	const badgeVariants = cva(
     7	  "inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2",
     8	  {
     9	    variants: {
    10	      variant: {
    11	        default:
    12	          "border-transparent bg-primary text-primary-foreground hover:bg-primary/80",
    13	        secondary:
    14	          "border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80",
    15	        destructive:
    16	          "border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80",
    17	        outline: "text-foreground",
    18	      },
    19	    },
    20	    defaultVariants: {
    21	      variant: "default",
    22	    },
    23	  }
    24	)
    25	
    26	export interface BadgeProps
    27	  extends React.HTMLAttributes<HTMLDivElement>,
    28	    VariantProps<typeof badgeVariants> {}
    29	
    30	function Badge({ className, variant, ...props }: BadgeProps) {
    31	  return (
    32	    <div className={cn(badgeVariants({ variant }), className)} {...props} />
    33	  )
    34	}
    35	
    36	export { Badge, badgeVariants }

========== FILE: ./src/components/ui/breadcrumb.tsx ==========

     1	import * as React from "react"
     2	import { Slot } from "@radix-ui/react-slot"
     3	import { ChevronRight, MoreHorizontal } from "lucide-react"
     4	
     5	import { cn } from "@/lib/utils"
     6	
     7	const Breadcrumb = React.forwardRef<
     8	  HTMLElement,
     9	  React.ComponentPropsWithoutRef<"nav"> & {
    10	    separator?: React.ReactNode
    11	  }
    12	>(({ ...props }, ref) => <nav ref={ref} aria-label="breadcrumb" {...props} />)
    13	Breadcrumb.displayName = "Breadcrumb"
    14	
    15	const BreadcrumbList = React.forwardRef<
    16	  HTMLOListElement,
    17	  React.ComponentPropsWithoutRef<"ol">
    18	>(({ className, ...props }, ref) => (
    19	  <ol
    20	    ref={ref}
    21	    className={cn(
    22	      "flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5",
    23	      className
    24	    )}
    25	    {...props}
    26	  />
    27	))
    28	BreadcrumbList.displayName = "BreadcrumbList"
    29	
    30	const BreadcrumbItem = React.forwardRef<
    31	  HTMLLIElement,
    32	  React.ComponentPropsWithoutRef<"li">
    33	>(({ className, ...props }, ref) => (
    34	  <li
    35	    ref={ref}
    36	    className={cn("inline-flex items-center gap-1.5", className)}
    37	    {...props}
    38	  />
    39	))
    40	BreadcrumbItem.displayName = "BreadcrumbItem"
    41	
    42	const BreadcrumbLink = React.forwardRef<
    43	  HTMLAnchorElement,
    44	  React.ComponentPropsWithoutRef<"a"> & {
    45	    asChild?: boolean
    46	  }
    47	>(({ asChild, className, ...props }, ref) => {
    48	  const Comp = asChild ? Slot : "a"
    49	
    50	  return (
    51	    <Comp
    52	      ref={ref}
    53	      className={cn("transition-colors hover:text-foreground", className)}
    54	      {...props}
    55	    />
    56	  )
    57	})
    58	BreadcrumbLink.displayName = "BreadcrumbLink"
    59	
    60	const BreadcrumbPage = React.forwardRef<
    61	  HTMLSpanElement,
    62	  React.ComponentPropsWithoutRef<"span">
    63	>(({ className, ...props }, ref) => (
    64	  <span
    65	    ref={ref}
    66	    role="link"
    67	    aria-disabled="true"
    68	    aria-current="page"
    69	    className={cn("font-normal text-foreground", className)}
    70	    {...props}
    71	  />
    72	))
    73	BreadcrumbPage.displayName = "BreadcrumbPage"
    74	
    75	const BreadcrumbSeparator = ({
    76	  children,
    77	  className,
    78	  ...props
    79	}: React.ComponentProps<"li">) => (
    80	  <li
    81	    role="presentation"
    82	    aria-hidden="true"
    83	    className={cn("[&>svg]:size-3.5", className)}
    84	    {...props}
    85	  >
    86	    {children ?? <ChevronRight />}
    87	  </li>
    88	)
    89	BreadcrumbSeparator.displayName = "BreadcrumbSeparator"
    90	
    91	const BreadcrumbEllipsis = ({
    92	  className,
    93	  ...props
    94	}: React.ComponentProps<"span">) => (
    95	  <span
    96	    role="presentation"
    97	    aria-hidden="true"
    98	    className={cn("flex h-9 w-9 items-center justify-center", className)}
    99	    {...props}
   100	  >
   101	    <MoreHorizontal className="h-4 w-4" />
   102	    <span className="sr-only">More</span>
   103	  </span>
   104	)
   105	BreadcrumbEllipsis.displayName = "BreadcrumbElipssis"
   106	
   107	export {
   108	  Breadcrumb,
   109	  BreadcrumbList,
   110	  BreadcrumbItem,
   111	  BreadcrumbLink,
   112	  BreadcrumbPage,
   113	  BreadcrumbSeparator,
   114	  BreadcrumbEllipsis,
   115	}

========== FILE: ./src/components/ui/button.tsx ==========

     1	import * as React from "react"
     2	import { Slot } from "@radix-ui/react-slot"
     3	import { cva, type VariantProps } from "class-variance-authority"
     4	
     5	import { cn } from "@/lib/utils"
     6	
     7	const buttonVariants = cva(
     8	  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
     9	  {
    10	    variants: {
    11	      variant: {
    12	        default: "bg-primary text-primary-foreground hover:bg-primary/90",
    13	        destructive:
    14	          "bg-destructive text-destructive-foreground hover:bg-destructive/90",
    15	        outline:
    16	          "border border-input bg-background hover:bg-accent hover:text-accent-foreground",
    17	        secondary:
    18	          "bg-secondary text-secondary-foreground hover:bg-secondary/80",
    19	        ghost: "hover:bg-accent hover:text-accent-foreground",
    20	        link: "text-primary underline-offset-4 hover:underline",
    21	      },
    22	      size: {
    23	        default: "h-10 px-4 py-2",
    24	        sm: "h-9 rounded-md px-3",
    25	        lg: "h-11 rounded-md px-8",
    26	        icon: "h-10 w-10",
    27	      },
    28	    },
    29	    defaultVariants: {
    30	      variant: "default",
    31	      size: "default",
    32	    },
    33	  }
    34	)
    35	
    36	export interface ButtonProps
    37	  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    38	    VariantProps<typeof buttonVariants> {
    39	  asChild?: boolean
    40	}
    41	
    42	const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
    43	  ({ className, variant, size, asChild = false, ...props }, ref) => {
    44	    const Comp = asChild ? Slot : "button"
    45	    return (
    46	      <Comp
    47	        className={cn(buttonVariants({ variant, size, className }))}
    48	        ref={ref}
    49	        {...props}
    50	      />
    51	    )
    52	  }
    53	)
    54	Button.displayName = "Button"
    55	
    56	export { Button, buttonVariants }

========== FILE: ./src/components/ui/calendar.tsx ==========

     1	import * as React from "react";
     2	import { ChevronLeft, ChevronRight } from "lucide-react";
     3	import { DayPicker } from "react-day-picker";
     4	
     5	import { cn } from "@/lib/utils";
     6	import { buttonVariants } from "@/components/ui/button";
     7	
     8	export type CalendarProps = React.ComponentProps<typeof DayPicker>;
     9	
    10	function Calendar({
    11	  className,
    12	  classNames,
    13	  showOutsideDays = true,
    14	  ...props
    15	}: CalendarProps) {
    16	  return (
    17	    <DayPicker
    18	      showOutsideDays={showOutsideDays}
    19	      className={cn("p-3", className)}
    20	      classNames={{
    21	        months: "flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0",
    22	        month: "space-y-4",
    23	        caption: "flex justify-center pt-1 relative items-center",
    24	        caption_label: "text-sm font-medium",
    25	        nav: "space-x-1 flex items-center",
    26	        nav_button: cn(
    27	          buttonVariants({ variant: "outline" }),
    28	          "h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100"
    29	        ),
    30	        nav_button_previous: "absolute left-1",
    31	        nav_button_next: "absolute right-1",
    32	        table: "w-full border-collapse space-y-1",
    33	        head_row: "flex",
    34	        head_cell:
    35	          "text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]",
    36	        row: "flex w-full mt-2",
    37	        cell: "h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20",
    38	        day: cn(
    39	          buttonVariants({ variant: "ghost" }),
    40	          "h-9 w-9 p-0 font-normal aria-selected:opacity-100"
    41	        ),
    42	        day_range_end: "day-range-end",
    43	        day_selected:
    44	          "bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground",
    45	        day_today: "bg-accent text-accent-foreground",
    46	        day_outside:
    47	          "day-outside text-muted-foreground opacity-50 aria-selected:bg-accent/50 aria-selected:text-muted-foreground aria-selected:opacity-30",
    48	        day_disabled: "text-muted-foreground opacity-50",
    49	        day_range_middle:
    50	          "aria-selected:bg-accent aria-selected:text-accent-foreground",
    51	        day_hidden: "invisible",
    52	        ...classNames,
    53	      }}
    54	      components={{
    55	        IconLeft: ({ ..._props }) => <ChevronLeft className="h-4 w-4" />,
    56	        IconRight: ({ ..._props }) => <ChevronRight className="h-4 w-4" />,
    57	      }}
    58	      {...props}
    59	    />
    60	  );
    61	}
    62	Calendar.displayName = "Calendar";
    63	
    64	export { Calendar };

========== FILE: ./src/components/ui/card.tsx ==========

     1	import * as React from "react"
     2	
     3	import { cn } from "@/lib/utils"
     4	
     5	const Card = React.forwardRef<
     6	  HTMLDivElement,
     7	  React.HTMLAttributes<HTMLDivElement>
     8	>(({ className, ...props }, ref) => (
     9	  <div
    10	    ref={ref}
    11	    className={cn(
    12	      "rounded-lg border bg-card text-card-foreground shadow-sm",
    13	      className
    14	    )}
    15	    {...props}
    16	  />
    17	))
    18	Card.displayName = "Card"
    19	
    20	const CardHeader = React.forwardRef<
    21	  HTMLDivElement,
    22	  React.HTMLAttributes<HTMLDivElement>
    23	>(({ className, ...props }, ref) => (
    24	  <div
    25	    ref={ref}
    26	    className={cn("flex flex-col space-y-1.5 p-6", className)}
    27	    {...props}
    28	  />
    29	))
    30	CardHeader.displayName = "CardHeader"
    31	
    32	const CardTitle = React.forwardRef<
    33	  HTMLParagraphElement,
    34	  React.HTMLAttributes<HTMLHeadingElement>
    35	>(({ className, ...props }, ref) => (
    36	  <h3
    37	    ref={ref}
    38	    className={cn(
    39	      "text-2xl font-semibold leading-none tracking-tight",
    40	      className
    41	    )}
    42	    {...props}
    43	  />
    44	))
    45	CardTitle.displayName = "CardTitle"
    46	
    47	const CardDescription = React.forwardRef<
    48	  HTMLParagraphElement,
    49	  React.HTMLAttributes<HTMLParagraphElement>
    50	>(({ className, ...props }, ref) => (
    51	  <p
    52	    ref={ref}
    53	    className={cn("text-sm text-muted-foreground", className)}
    54	    {...props}
    55	  />
    56	))
    57	CardDescription.displayName = "CardDescription"
    58	
    59	const CardContent = React.forwardRef<
    60	  HTMLDivElement,
    61	  React.HTMLAttributes<HTMLDivElement>
    62	>(({ className, ...props }, ref) => (
    63	  <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
    64	))
    65	CardContent.displayName = "CardContent"
    66	
    67	const CardFooter = React.forwardRef<
    68	  HTMLDivElement,
    69	  React.HTMLAttributes<HTMLDivElement>
    70	>(({ className, ...props }, ref) => (
    71	  <div
    72	    ref={ref}
    73	    className={cn("flex items-center p-6 pt-0", className)}
    74	    {...props}
    75	  />
    76	))
    77	CardFooter.displayName = "CardFooter"
    78	
    79	export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }

========== FILE: ./src/components/ui/carousel.tsx ==========

     1	import * as React from "react"
     2	import useEmblaCarousel, {
     3	  type UseEmblaCarouselType,
     4	} from "embla-carousel-react"
     5	import { ArrowLeft, ArrowRight } from "lucide-react"
     6	
     7	import { cn } from "@/lib/utils"
     8	import { Button } from "@/components/ui/button"
     9	
    10	type CarouselApi = UseEmblaCarouselType[1]
    11	type UseCarouselParameters = Parameters<typeof useEmblaCarousel>
    12	type CarouselOptions = UseCarouselParameters[0]
    13	type CarouselPlugin = UseCarouselParameters[1]
    14	
    15	type CarouselProps = {
    16	  opts?: CarouselOptions
    17	  plugins?: CarouselPlugin
    18	  orientation?: "horizontal" | "vertical"
    19	  setApi?: (api: CarouselApi) => void
    20	}
    21	
    22	type CarouselContextProps = {
    23	  carouselRef: ReturnType<typeof useEmblaCarousel>[0]
    24	  api: ReturnType<typeof useEmblaCarousel>[1]
    25	  scrollPrev: () => void
    26	  scrollNext: () => void
    27	  canScrollPrev: boolean
    28	  canScrollNext: boolean
    29	} & CarouselProps
    30	
    31	const CarouselContext = React.createContext<CarouselContextProps | null>(null)
    32	
    33	function useCarousel() {
    34	  const context = React.useContext(CarouselContext)
    35	
    36	  if (!context) {
    37	    throw new Error("useCarousel must be used within a <Carousel />")
    38	  }
    39	
    40	  return context
    41	}
    42	
    43	const Carousel = React.forwardRef<
    44	  HTMLDivElement,
    45	  React.HTMLAttributes<HTMLDivElement> & CarouselProps
    46	>(
    47	  (
    48	    {
    49	      orientation = "horizontal",
    50	      opts,
    51	      setApi,
    52	      plugins,
    53	      className,
    54	      children,
    55	      ...props
    56	    },
    57	    ref
    58	  ) => {
    59	    const [carouselRef, api] = useEmblaCarousel(
    60	      {
    61	        ...opts,
    62	        axis: orientation === "horizontal" ? "x" : "y",
    63	      },
    64	      plugins
    65	    )
    66	    const [canScrollPrev, setCanScrollPrev] = React.useState(false)
    67	    const [canScrollNext, setCanScrollNext] = React.useState(false)
    68	
    69	    const onSelect = React.useCallback((api: CarouselApi) => {
    70	      if (!api) {
    71	        return
    72	      }
    73	
    74	      setCanScrollPrev(api.canScrollPrev())
    75	      setCanScrollNext(api.canScrollNext())
    76	    }, [])
    77	
    78	    const scrollPrev = React.useCallback(() => {
    79	      api?.scrollPrev()
    80	    }, [api])
    81	
    82	    const scrollNext = React.useCallback(() => {
    83	      api?.scrollNext()
    84	    }, [api])
    85	
    86	    const handleKeyDown = React.useCallback(
    87	      (event: React.KeyboardEvent<HTMLDivElement>) => {
    88	        if (event.key === "ArrowLeft") {
    89	          event.preventDefault()
    90	          scrollPrev()
    91	        } else if (event.key === "ArrowRight") {
    92	          event.preventDefault()
    93	          scrollNext()
    94	        }
    95	      },
    96	      [scrollPrev, scrollNext]
    97	    )
    98	
    99	    React.useEffect(() => {
   100	      if (!api || !setApi) {
   101	        return
   102	      }
   103	
   104	      setApi(api)
   105	    }, [api, setApi])
   106	
   107	    React.useEffect(() => {
   108	      if (!api) {
   109	        return
   110	      }
   111	
   112	      onSelect(api)
   113	      api.on("reInit", onSelect)
   114	      api.on("select", onSelect)
   115	
   116	      return () => {
   117	        api?.off("select", onSelect)
   118	      }
   119	    }, [api, onSelect])
   120	
   121	    return (
   122	      <CarouselContext.Provider
   123	        value={{
   124	          carouselRef,
   125	          api: api,
   126	          opts,
   127	          orientation:
   128	            orientation || (opts?.axis === "y" ? "vertical" : "horizontal"),
   129	          scrollPrev,
   130	          scrollNext,
   131	          canScrollPrev,
   132	          canScrollNext,
   133	        }}
   134	      >
   135	        <div
   136	          ref={ref}
   137	          onKeyDownCapture={handleKeyDown}
   138	          className={cn("relative", className)}
   139	          role="region"
   140	          aria-roledescription="carousel"
   141	          {...props}
   142	        >
   143	          {children}
   144	        </div>
   145	      </CarouselContext.Provider>
   146	    )
   147	  }
   148	)
   149	Carousel.displayName = "Carousel"
   150	
   151	const CarouselContent = React.forwardRef<
   152	  HTMLDivElement,
   153	  React.HTMLAttributes<HTMLDivElement>
   154	>(({ className, ...props }, ref) => {
   155	  const { carouselRef, orientation } = useCarousel()
   156	
   157	  return (
   158	    <div ref={carouselRef} className="overflow-hidden">
   159	      <div
   160	        ref={ref}
   161	        className={cn(
   162	          "flex",
   163	          orientation === "horizontal" ? "-ml-4" : "-mt-4 flex-col",
   164	          className
   165	        )}
   166	        {...props}
   167	      />
   168	    </div>
   169	  )
   170	})
   171	CarouselContent.displayName = "CarouselContent"
   172	
   173	const CarouselItem = React.forwardRef<
   174	  HTMLDivElement,
   175	  React.HTMLAttributes<HTMLDivElement>
   176	>(({ className, ...props }, ref) => {
   177	  const { orientation } = useCarousel()
   178	
   179	  return (
   180	    <div
   181	      ref={ref}
   182	      role="group"
   183	      aria-roledescription="slide"
   184	      className={cn(
   185	        "min-w-0 shrink-0 grow-0 basis-full",
   186	        orientation === "horizontal" ? "pl-4" : "pt-4",
   187	        className
   188	      )}
   189	      {...props}
   190	    />
   191	  )
   192	})
   193	CarouselItem.displayName = "CarouselItem"
   194	
   195	const CarouselPrevious = React.forwardRef<
   196	  HTMLButtonElement,
   197	  React.ComponentProps<typeof Button>
   198	>(({ className, variant = "outline", size = "icon", ...props }, ref) => {
   199	  const { orientation, scrollPrev, canScrollPrev } = useCarousel()
   200	
   201	  return (
   202	    <Button
   203	      ref={ref}
   204	      variant={variant}
   205	      size={size}
   206	      className={cn(
   207	        "absolute  h-8 w-8 rounded-full",
   208	        orientation === "horizontal"
   209	          ? "-left-12 top-1/2 -translate-y-1/2"
   210	          : "-top-12 left-1/2 -translate-x-1/2 rotate-90",
   211	        className
   212	      )}
   213	      disabled={!canScrollPrev}
   214	      onClick={scrollPrev}
   215	      {...props}
   216	    >
   217	      <ArrowLeft className="h-4 w-4" />
   218	      <span className="sr-only">Previous slide</span>
   219	    </Button>
   220	  )
   221	})
   222	CarouselPrevious.displayName = "CarouselPrevious"
   223	
   224	const CarouselNext = React.forwardRef<
   225	  HTMLButtonElement,
   226	  React.ComponentProps<typeof Button>
   227	>(({ className, variant = "outline", size = "icon", ...props }, ref) => {
   228	  const { orientation, scrollNext, canScrollNext } = useCarousel()
   229	
   230	  return (
   231	    <Button
   232	      ref={ref}
   233	      variant={variant}
   234	      size={size}
   235	      className={cn(
   236	        "absolute h-8 w-8 rounded-full",
   237	        orientation === "horizontal"
   238	          ? "-right-12 top-1/2 -translate-y-1/2"
   239	          : "-bottom-12 left-1/2 -translate-x-1/2 rotate-90",
   240	        className
   241	      )}
   242	      disabled={!canScrollNext}
   243	      onClick={scrollNext}
   244	      {...props}
   245	    >
   246	      <ArrowRight className="h-4 w-4" />
   247	      <span className="sr-only">Next slide</span>
   248	    </Button>
   249	  )
   250	})
   251	CarouselNext.displayName = "CarouselNext"
   252	
   253	export {
   254	  type CarouselApi,
   255	  Carousel,
   256	  CarouselContent,
   257	  CarouselItem,
   258	  CarouselPrevious,
   259	  CarouselNext,
   260	}

========== FILE: ./src/components/ui/chart.tsx ==========

     1	import * as React from "react"
     2	import * as RechartsPrimitive from "recharts"
     3	
     4	import { cn } from "@/lib/utils"
     5	
     6	// Format: { THEME_NAME: CSS_SELECTOR }
     7	const THEMES = { light: "", dark: ".dark" } as const
     8	
     9	export type ChartConfig = {
    10	  [k in string]: {
    11	    label?: React.ReactNode
    12	    icon?: React.ComponentType
    13	  } & (
    14	    | { color?: string; theme?: never }
    15	    | { color?: never; theme: Record<keyof typeof THEMES, string> }
    16	  )
    17	}
    18	
    19	type ChartContextProps = {
    20	  config: ChartConfig
    21	}
    22	
    23	const ChartContext = React.createContext<ChartContextProps | null>(null)
    24	
    25	function useChart() {
    26	  const context = React.useContext(ChartContext)
    27	
    28	  if (!context) {
    29	    throw new Error("useChart must be used within a <ChartContainer />")
    30	  }
    31	
    32	  return context
    33	}
    34	
    35	const ChartContainer = React.forwardRef<
    36	  HTMLDivElement,
    37	  React.ComponentProps<"div"> & {
    38	    config: ChartConfig
    39	    children: React.ComponentProps<
    40	      typeof RechartsPrimitive.ResponsiveContainer
    41	    >["children"]
    42	  }
    43	>(({ id, className, children, config, ...props }, ref) => {
    44	  const uniqueId = React.useId()
    45	  const chartId = `chart-${id || uniqueId.replace(/:/g, "")}`
    46	
    47	  return (
    48	    <ChartContext.Provider value={{ config }}>
    49	      <div
    50	        data-chart={chartId}
    51	        ref={ref}
    52	        className={cn(
    53	          "flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none",
    54	          className
    55	        )}
    56	        {...props}
    57	      >
    58	        <ChartStyle id={chartId} config={config} />
    59	        <RechartsPrimitive.ResponsiveContainer>
    60	          {children}
    61	        </RechartsPrimitive.ResponsiveContainer>
    62	      </div>
    63	    </ChartContext.Provider>
    64	  )
    65	})
    66	ChartContainer.displayName = "Chart"
    67	
    68	const ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {
    69	  const colorConfig = Object.entries(config).filter(
    70	    ([_, config]) => config.theme || config.color
    71	  )
    72	
    73	  if (!colorConfig.length) {
    74	    return null
    75	  }
    76	
    77	  return (
    78	    <style
    79	      dangerouslySetInnerHTML={{
    80	        __html: Object.entries(THEMES)
    81	          .map(
    82	            ([theme, prefix]) => `
    83	${prefix} [data-chart=${id}] {
    84	${colorConfig
    85	  .map(([key, itemConfig]) => {
    86	    const color =
    87	      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||
    88	      itemConfig.color
    89	    return color ? `  --color-${key}: ${color};` : null
    90	  })
    91	  .join("\n")}
    92	}
    93	`
    94	          )
    95	          .join("\n"),
    96	      }}
    97	    />
    98	  )
    99	}
   100	
   101	const ChartTooltip = RechartsPrimitive.Tooltip
   102	
   103	const ChartTooltipContent = React.forwardRef<
   104	  HTMLDivElement,
   105	  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &
   106	    React.ComponentProps<"div"> & {
   107	      hideLabel?: boolean
   108	      hideIndicator?: boolean
   109	      indicator?: "line" | "dot" | "dashed"
   110	      nameKey?: string
   111	      labelKey?: string
   112	    }
   113	>(
   114	  (
   115	    {
   116	      active,
   117	      payload,
   118	      className,
   119	      indicator = "dot",
   120	      hideLabel = false,
   121	      hideIndicator = false,
   122	      label,
   123	      labelFormatter,
   124	      labelClassName,
   125	      formatter,
   126	      color,
   127	      nameKey,
   128	      labelKey,
   129	    },
   130	    ref
   131	  ) => {
   132	    const { config } = useChart()
   133	
   134	    const tooltipLabel = React.useMemo(() => {
   135	      if (hideLabel || !payload?.length) {
   136	        return null
   137	      }
   138	
   139	      const [item] = payload
   140	      const key = `${labelKey || item.dataKey || item.name || "value"}`
   141	      const itemConfig = getPayloadConfigFromPayload(config, item, key)
   142	      const value =
   143	        !labelKey && typeof label === "string"
   144	          ? config[label as keyof typeof config]?.label || label
   145	          : itemConfig?.label
   146	
   147	      if (labelFormatter) {
   148	        return (
   149	          <div className={cn("font-medium", labelClassName)}>
   150	            {labelFormatter(value, payload)}
   151	          </div>
   152	        )
   153	      }
   154	
   155	      if (!value) {
   156	        return null
   157	      }
   158	
   159	      return <div className={cn("font-medium", labelClassName)}>{value}</div>
   160	    }, [
   161	      label,
   162	      labelFormatter,
   163	      payload,
   164	      hideLabel,
   165	      labelClassName,
   166	      config,
   167	      labelKey,
   168	    ])
   169	
   170	    if (!active || !payload?.length) {
   171	      return null
   172	    }
   173	
   174	    const nestLabel = payload.length === 1 && indicator !== "dot"
   175	
   176	    return (
   177	      <div
   178	        ref={ref}
   179	        className={cn(
   180	          "grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl",
   181	          className
   182	        )}
   183	      >
   184	        {!nestLabel ? tooltipLabel : null}
   185	        <div className="grid gap-1.5">
   186	          {payload.map((item, index) => {
   187	            const key = `${nameKey || item.name || item.dataKey || "value"}`
   188	            const itemConfig = getPayloadConfigFromPayload(config, item, key)
   189	            const indicatorColor = color || item.payload.fill || item.color
   190	
   191	            return (
   192	              <div
   193	                key={item.dataKey}
   194	                className={cn(
   195	                  "flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground",
   196	                  indicator === "dot" && "items-center"
   197	                )}
   198	              >
   199	                {formatter && item?.value !== undefined && item.name ? (
   200	                  formatter(item.value, item.name, item, index, item.payload)
   201	                ) : (
   202	                  <>
   203	                    {itemConfig?.icon ? (
   204	                      <itemConfig.icon />
   205	                    ) : (
   206	                      !hideIndicator && (
   207	                        <div
   208	                          className={cn(
   209	                            "shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]",
   210	                            {
   211	                              "h-2.5 w-2.5": indicator === "dot",
   212	                              "w-1": indicator === "line",
   213	                              "w-0 border-[1.5px] border-dashed bg-transparent":
   214	                                indicator === "dashed",
   215	                              "my-0.5": nestLabel && indicator === "dashed",
   216	                            }
   217	                          )}
   218	                          style={
   219	                            {
   220	                              "--color-bg": indicatorColor,
   221	                              "--color-border": indicatorColor,
   222	                            } as React.CSSProperties
   223	                          }
   224	                        />
   225	                      )
   226	                    )}
   227	                    <div
   228	                      className={cn(
   229	                        "flex flex-1 justify-between leading-none",
   230	                        nestLabel ? "items-end" : "items-center"
   231	                      )}
   232	                    >
   233	                      <div className="grid gap-1.5">
   234	                        {nestLabel ? tooltipLabel : null}
   235	                        <span className="text-muted-foreground">
   236	                          {itemConfig?.label || item.name}
   237	                        </span>
   238	                      </div>
   239	                      {item.value && (
   240	                        <span className="font-mono font-medium tabular-nums text-foreground">
   241	                          {item.value.toLocaleString()}
   242	                        </span>
   243	                      )}
   244	                    </div>
   245	                  </>
   246	                )}
   247	              </div>
   248	            )
   249	          })}
   250	        </div>
   251	      </div>
   252	    )
   253	  }
   254	)
   255	ChartTooltipContent.displayName = "ChartTooltip"
   256	
   257	const ChartLegend = RechartsPrimitive.Legend
   258	
   259	const ChartLegendContent = React.forwardRef<
   260	  HTMLDivElement,
   261	  React.ComponentProps<"div"> &
   262	    Pick<RechartsPrimitive.LegendProps, "payload" | "verticalAlign"> & {
   263	      hideIcon?: boolean
   264	      nameKey?: string
   265	    }
   266	>(
   267	  (
   268	    { className, hideIcon = false, payload, verticalAlign = "bottom", nameKey },
   269	    ref
   270	  ) => {
   271	    const { config } = useChart()
   272	
   273	    if (!payload?.length) {
   274	      return null
   275	    }
   276	
   277	    return (
   278	      <div
   279	        ref={ref}
   280	        className={cn(
   281	          "flex items-center justify-center gap-4",
   282	          verticalAlign === "top" ? "pb-3" : "pt-3",
   283	          className
   284	        )}
   285	      >
   286	        {payload.map((item) => {
   287	          const key = `${nameKey || item.dataKey || "value"}`
   288	          const itemConfig = getPayloadConfigFromPayload(config, item, key)
   289	
   290	          return (
   291	            <div
   292	              key={item.value}
   293	              className={cn(
   294	                "flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground"
   295	              )}
   296	            >
   297	              {itemConfig?.icon && !hideIcon ? (
   298	                <itemConfig.icon />
   299	              ) : (
   300	                <div
   301	                  className="h-2 w-2 shrink-0 rounded-[2px]"
   302	                  style={{
   303	                    backgroundColor: item.color,
   304	                  }}
   305	                />
   306	              )}
   307	              {itemConfig?.label}
   308	            </div>
   309	          )
   310	        })}
   311	      </div>
   312	    )
   313	  }
   314	)
   315	ChartLegendContent.displayName = "ChartLegend"
   316	
   317	// Helper to extract item config from a payload.
   318	function getPayloadConfigFromPayload(
   319	  config: ChartConfig,
   320	  payload: unknown,
   321	  key: string
   322	) {
   323	  if (typeof payload !== "object" || payload === null) {
   324	    return undefined
   325	  }
   326	
   327	  const payloadPayload =
   328	    "payload" in payload &&
   329	    typeof payload.payload === "object" &&
   330	    payload.payload !== null
   331	      ? payload.payload
   332	      : undefined
   333	
   334	  let configLabelKey: string = key
   335	
   336	  if (
   337	    key in payload &&
   338	    typeof payload[key as keyof typeof payload] === "string"
   339	  ) {
   340	    configLabelKey = payload[key as keyof typeof payload] as string
   341	  } else if (
   342	    payloadPayload &&
   343	    key in payloadPayload &&
   344	    typeof payloadPayload[key as keyof typeof payloadPayload] === "string"
   345	  ) {
   346	    configLabelKey = payloadPayload[
   347	      key as keyof typeof payloadPayload
   348	    ] as string
   349	  }
   350	
   351	  return configLabelKey in config
   352	    ? config[configLabelKey]
   353	    : config[key as keyof typeof config]
   354	}
   355	
   356	export {
   357	  ChartContainer,
   358	  ChartTooltip,
   359	  ChartTooltipContent,
   360	  ChartLegend,
   361	  ChartLegendContent,
   362	  ChartStyle,
   363	}

========== FILE: ./src/components/ui/checkbox.tsx ==========

     1	import * as React from "react"
     2	import * as CheckboxPrimitive from "@radix-ui/react-checkbox"
     3	import { Check } from "lucide-react"
     4	
     5	import { cn } from "@/lib/utils"
     6	
     7	const Checkbox = React.forwardRef<
     8	  React.ElementRef<typeof CheckboxPrimitive.Root>,
     9	  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>
    10	>(({ className, ...props }, ref) => (
    11	  <CheckboxPrimitive.Root
    12	    ref={ref}
    13	    className={cn(
    14	      "peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground",
    15	      className
    16	    )}
    17	    {...props}
    18	  >
    19	    <CheckboxPrimitive.Indicator
    20	      className={cn("flex items-center justify-center text-current")}
    21	    >
    22	      <Check className="h-4 w-4" />
    23	    </CheckboxPrimitive.Indicator>
    24	  </CheckboxPrimitive.Root>
    25	))
    26	Checkbox.displayName = CheckboxPrimitive.Root.displayName
    27	
    28	export { Checkbox }

========== FILE: ./src/components/ui/collapsible.tsx ==========

     1	import * as CollapsiblePrimitive from "@radix-ui/react-collapsible"
     2	
     3	const Collapsible = CollapsiblePrimitive.Root
     4	
     5	const CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger
     6	
     7	const CollapsibleContent = CollapsiblePrimitive.CollapsibleContent
     8	
     9	export { Collapsible, CollapsibleTrigger, CollapsibleContent }

========== FILE: ./src/components/ui/command.tsx ==========

     1	import * as React from "react"
     2	import { type DialogProps } from "@radix-ui/react-dialog"
     3	import { Command as CommandPrimitive } from "cmdk"
     4	import { Search } from "lucide-react"
     5	
     6	import { cn } from "@/lib/utils"
     7	import { Dialog, DialogContent } from "@/components/ui/dialog"
     8	
     9	const Command = React.forwardRef<
    10	  React.ElementRef<typeof CommandPrimitive>,
    11	  React.ComponentPropsWithoutRef<typeof CommandPrimitive>
    12	>(({ className, ...props }, ref) => (
    13	  <CommandPrimitive
    14	    ref={ref}
    15	    className={cn(
    16	      "flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground",
    17	      className
    18	    )}
    19	    {...props}
    20	  />
    21	))
    22	Command.displayName = CommandPrimitive.displayName
    23	
    24	type CommandDialogProps = DialogProps;
    25	
    26	const CommandDialog = ({ children, ...props }: CommandDialogProps) => {
    27	  return (
    28	    <Dialog {...props}>
    29	      <DialogContent className="overflow-hidden p-0 shadow-lg">
    30	        <Command className="[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5">
    31	          {children}
    32	        </Command>
    33	      </DialogContent>
    34	    </Dialog>
    35	  )
    36	}
    37	
    38	const CommandInput = React.forwardRef<
    39	  React.ElementRef<typeof CommandPrimitive.Input>,
    40	  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>
    41	>(({ className, ...props }, ref) => (
    42	  <div className="flex items-center border-b px-3" cmdk-input-wrapper="">
    43	    <Search className="mr-2 h-4 w-4 shrink-0 opacity-50" />
    44	    <CommandPrimitive.Input
    45	      ref={ref}
    46	      className={cn(
    47	        "flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50",
    48	        className
    49	      )}
    50	      {...props}
    51	    />
    52	  </div>
    53	))
    54	
    55	CommandInput.displayName = CommandPrimitive.Input.displayName
    56	
    57	const CommandList = React.forwardRef<
    58	  React.ElementRef<typeof CommandPrimitive.List>,
    59	  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>
    60	>(({ className, ...props }, ref) => (
    61	  <CommandPrimitive.List
    62	    ref={ref}
    63	    className={cn("max-h-[300px] overflow-y-auto overflow-x-hidden", className)}
    64	    {...props}
    65	  />
    66	))
    67	
    68	CommandList.displayName = CommandPrimitive.List.displayName
    69	
    70	const CommandEmpty = React.forwardRef<
    71	  React.ElementRef<typeof CommandPrimitive.Empty>,
    72	  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>
    73	>((props, ref) => (
    74	  <CommandPrimitive.Empty
    75	    ref={ref}
    76	    className="py-6 text-center text-sm"
    77	    {...props}
    78	  />
    79	))
    80	
    81	CommandEmpty.displayName = CommandPrimitive.Empty.displayName
    82	
    83	const CommandGroup = React.forwardRef<
    84	  React.ElementRef<typeof CommandPrimitive.Group>,
    85	  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>
    86	>(({ className, ...props }, ref) => (
    87	  <CommandPrimitive.Group
    88	    ref={ref}
    89	    className={cn(
    90	      "overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground",
    91	      className
    92	    )}
    93	    {...props}
    94	  />
    95	))
    96	
    97	CommandGroup.displayName = CommandPrimitive.Group.displayName
    98	
    99	const CommandSeparator = React.forwardRef<
   100	  React.ElementRef<typeof CommandPrimitive.Separator>,
   101	  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>
   102	>(({ className, ...props }, ref) => (
   103	  <CommandPrimitive.Separator
   104	    ref={ref}
   105	    className={cn("-mx-1 h-px bg-border", className)}
   106	    {...props}
   107	  />
   108	))
   109	CommandSeparator.displayName = CommandPrimitive.Separator.displayName
   110	
   111	const CommandItem = React.forwardRef<
   112	  React.ElementRef<typeof CommandPrimitive.Item>,
   113	  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>
   114	>(({ className, ...props }, ref) => (
   115	  <CommandPrimitive.Item
   116	    ref={ref}
   117	    className={cn(
   118	      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50",
   119	      className
   120	    )}
   121	    {...props}
   122	  />
   123	))
   124	
   125	CommandItem.displayName = CommandPrimitive.Item.displayName
   126	
   127	const CommandShortcut = ({
   128	  className,
   129	  ...props
   130	}: React.HTMLAttributes<HTMLSpanElement>) => {
   131	  return (
   132	    <span
   133	      className={cn(
   134	        "ml-auto text-xs tracking-widest text-muted-foreground",
   135	        className
   136	      )}
   137	      {...props}
   138	    />
   139	  )
   140	}
   141	CommandShortcut.displayName = "CommandShortcut"
   142	
   143	export {
   144	  Command,
   145	  CommandDialog,
   146	  CommandInput,
   147	  CommandList,
   148	  CommandEmpty,
   149	  CommandGroup,
   150	  CommandItem,
   151	  CommandShortcut,
   152	  CommandSeparator,
   153	}

========== FILE: ./src/components/ui/context-menu.tsx ==========

     1	import * as React from "react"
     2	import * as ContextMenuPrimitive from "@radix-ui/react-context-menu"
     3	import { Check, ChevronRight, Circle } from "lucide-react"
     4	
     5	import { cn } from "@/lib/utils"
     6	
     7	const ContextMenu = ContextMenuPrimitive.Root
     8	
     9	const ContextMenuTrigger = ContextMenuPrimitive.Trigger
    10	
    11	const ContextMenuGroup = ContextMenuPrimitive.Group
    12	
    13	const ContextMenuPortal = ContextMenuPrimitive.Portal
    14	
    15	const ContextMenuSub = ContextMenuPrimitive.Sub
    16	
    17	const ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup
    18	
    19	const ContextMenuSubTrigger = React.forwardRef<
    20	  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,
    21	  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {
    22	    inset?: boolean
    23	  }
    24	>(({ className, inset, children, ...props }, ref) => (
    25	  <ContextMenuPrimitive.SubTrigger
    26	    ref={ref}
    27	    className={cn(
    28	      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
    29	      inset && "pl-8",
    30	      className
    31	    )}
    32	    {...props}
    33	  >
    34	    {children}
    35	    <ChevronRight className="ml-auto h-4 w-4" />
    36	  </ContextMenuPrimitive.SubTrigger>
    37	))
    38	ContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName
    39	
    40	const ContextMenuSubContent = React.forwardRef<
    41	  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,
    42	  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>
    43	>(({ className, ...props }, ref) => (
    44	  <ContextMenuPrimitive.SubContent
    45	    ref={ref}
    46	    className={cn(
    47	      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
    48	      className
    49	    )}
    50	    {...props}
    51	  />
    52	))
    53	ContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName
    54	
    55	const ContextMenuContent = React.forwardRef<
    56	  React.ElementRef<typeof ContextMenuPrimitive.Content>,
    57	  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>
    58	>(({ className, ...props }, ref) => (
    59	  <ContextMenuPrimitive.Portal>
    60	    <ContextMenuPrimitive.Content
    61	      ref={ref}
    62	      className={cn(
    63	        "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
    64	        className
    65	      )}
    66	      {...props}
    67	    />
    68	  </ContextMenuPrimitive.Portal>
    69	))
    70	ContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName
    71	
    72	const ContextMenuItem = React.forwardRef<
    73	  React.ElementRef<typeof ContextMenuPrimitive.Item>,
    74	  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {
    75	    inset?: boolean
    76	  }
    77	>(({ className, inset, ...props }, ref) => (
    78	  <ContextMenuPrimitive.Item
    79	    ref={ref}
    80	    className={cn(
    81	      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
    82	      inset && "pl-8",
    83	      className
    84	    )}
    85	    {...props}
    86	  />
    87	))
    88	ContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName
    89	
    90	const ContextMenuCheckboxItem = React.forwardRef<
    91	  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,
    92	  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>
    93	>(({ className, children, checked, ...props }, ref) => (
    94	  <ContextMenuPrimitive.CheckboxItem
    95	    ref={ref}
    96	    className={cn(
    97	      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
    98	      className
    99	    )}
   100	    checked={checked}
   101	    {...props}
   102	  >
   103	    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
   104	      <ContextMenuPrimitive.ItemIndicator>
   105	        <Check className="h-4 w-4" />
   106	      </ContextMenuPrimitive.ItemIndicator>
   107	    </span>
   108	    {children}
   109	  </ContextMenuPrimitive.CheckboxItem>
   110	))
   111	ContextMenuCheckboxItem.displayName =
   112	  ContextMenuPrimitive.CheckboxItem.displayName
   113	
   114	const ContextMenuRadioItem = React.forwardRef<
   115	  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,
   116	  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>
   117	>(({ className, children, ...props }, ref) => (
   118	  <ContextMenuPrimitive.RadioItem
   119	    ref={ref}
   120	    className={cn(
   121	      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
   122	      className
   123	    )}
   124	    {...props}
   125	  >
   126	    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
   127	      <ContextMenuPrimitive.ItemIndicator>
   128	        <Circle className="h-2 w-2 fill-current" />
   129	      </ContextMenuPrimitive.ItemIndicator>
   130	    </span>
   131	    {children}
   132	  </ContextMenuPrimitive.RadioItem>
   133	))
   134	ContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName
   135	
   136	const ContextMenuLabel = React.forwardRef<
   137	  React.ElementRef<typeof ContextMenuPrimitive.Label>,
   138	  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {
   139	    inset?: boolean
   140	  }
   141	>(({ className, inset, ...props }, ref) => (
   142	  <ContextMenuPrimitive.Label
   143	    ref={ref}
   144	    className={cn(
   145	      "px-2 py-1.5 text-sm font-semibold text-foreground",
   146	      inset && "pl-8",
   147	      className
   148	    )}
   149	    {...props}
   150	  />
   151	))
   152	ContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName
   153	
   154	const ContextMenuSeparator = React.forwardRef<
   155	  React.ElementRef<typeof ContextMenuPrimitive.Separator>,
   156	  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>
   157	>(({ className, ...props }, ref) => (
   158	  <ContextMenuPrimitive.Separator
   159	    ref={ref}
   160	    className={cn("-mx-1 my-1 h-px bg-border", className)}
   161	    {...props}
   162	  />
   163	))
   164	ContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName
   165	
   166	const ContextMenuShortcut = ({
   167	  className,
   168	  ...props
   169	}: React.HTMLAttributes<HTMLSpanElement>) => {
   170	  return (
   171	    <span
   172	      className={cn(
   173	        "ml-auto text-xs tracking-widest text-muted-foreground",
   174	        className
   175	      )}
   176	      {...props}
   177	    />
   178	  )
   179	}
   180	ContextMenuShortcut.displayName = "ContextMenuShortcut"
   181	
   182	export {
   183	  ContextMenu,
   184	  ContextMenuTrigger,
   185	  ContextMenuContent,
   186	  ContextMenuItem,
   187	  ContextMenuCheckboxItem,
   188	  ContextMenuRadioItem,
   189	  ContextMenuLabel,
   190	  ContextMenuSeparator,
   191	  ContextMenuShortcut,
   192	  ContextMenuGroup,
   193	  ContextMenuPortal,
   194	  ContextMenuSub,
   195	  ContextMenuSubContent,
   196	  ContextMenuSubTrigger,
   197	  ContextMenuRadioGroup,
   198	}

========== FILE: ./src/components/ui/dialog.tsx ==========

     1	import * as React from "react"
     2	import * as DialogPrimitive from "@radix-ui/react-dialog"
     3	import { X } from "lucide-react"
     4	
     5	import { cn } from "@/lib/utils"
     6	
     7	const Dialog = DialogPrimitive.Root
     8	
     9	const DialogTrigger = DialogPrimitive.Trigger
    10	
    11	const DialogPortal = DialogPrimitive.Portal
    12	
    13	const DialogClose = DialogPrimitive.Close
    14	
    15	const DialogOverlay = React.forwardRef<
    16	  React.ElementRef<typeof DialogPrimitive.Overlay>,
    17	  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>
    18	>(({ className, ...props }, ref) => (
    19	  <DialogPrimitive.Overlay
    20	    ref={ref}
    21	    className={cn(
    22	      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
    23	      className
    24	    )}
    25	    {...props}
    26	  />
    27	))
    28	DialogOverlay.displayName = DialogPrimitive.Overlay.displayName
    29	
    30	const DialogContent = React.forwardRef<
    31	  React.ElementRef<typeof DialogPrimitive.Content>,
    32	  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>
    33	>(({ className, children, ...props }, ref) => (
    34	  <DialogPortal>
    35	    <DialogOverlay />
    36	    <DialogPrimitive.Content
    37	      ref={ref}
    38	      className={cn(
    39	        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
    40	        className
    41	      )}
    42	      {...props}
    43	    >
    44	      {children}
    45	      <DialogPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground">
    46	        <X className="h-4 w-4" />
    47	        <span className="sr-only">Close</span>
    48	      </DialogPrimitive.Close>
    49	    </DialogPrimitive.Content>
    50	  </DialogPortal>
    51	))
    52	DialogContent.displayName = DialogPrimitive.Content.displayName
    53	
    54	const DialogHeader = ({
    55	  className,
    56	  ...props
    57	}: React.HTMLAttributes<HTMLDivElement>) => (
    58	  <div
    59	    className={cn(
    60	      "flex flex-col space-y-1.5 text-center sm:text-left",
    61	      className
    62	    )}
    63	    {...props}
    64	  />
    65	)
    66	DialogHeader.displayName = "DialogHeader"
    67	
    68	const DialogFooter = ({
    69	  className,
    70	  ...props
    71	}: React.HTMLAttributes<HTMLDivElement>) => (
    72	  <div
    73	    className={cn(
    74	      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
    75	      className
    76	    )}
    77	    {...props}
    78	  />
    79	)
    80	DialogFooter.displayName = "DialogFooter"
    81	
    82	const DialogTitle = React.forwardRef<
    83	  React.ElementRef<typeof DialogPrimitive.Title>,
    84	  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>
    85	>(({ className, ...props }, ref) => (
    86	  <DialogPrimitive.Title
    87	    ref={ref}
    88	    className={cn(
    89	      "text-lg font-semibold leading-none tracking-tight",
    90	      className
    91	    )}
    92	    {...props}
    93	  />
    94	))
    95	DialogTitle.displayName = DialogPrimitive.Title.displayName
    96	
    97	const DialogDescription = React.forwardRef<
    98	  React.ElementRef<typeof DialogPrimitive.Description>,
    99	  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>
   100	>(({ className, ...props }, ref) => (
   101	  <DialogPrimitive.Description
   102	    ref={ref}
   103	    className={cn("text-sm text-muted-foreground", className)}
   104	    {...props}
   105	  />
   106	))
   107	DialogDescription.displayName = DialogPrimitive.Description.displayName
   108	
   109	export {
   110	  Dialog,
   111	  DialogPortal,
   112	  DialogOverlay,
   113	  DialogClose,
   114	  DialogTrigger,
   115	  DialogContent,
   116	  DialogHeader,
   117	  DialogFooter,
   118	  DialogTitle,
   119	  DialogDescription,
   120	}

========== FILE: ./src/components/ui/drawer.tsx ==========

     1	import * as React from "react"
     2	import { Drawer as DrawerPrimitive } from "vaul"
     3	
     4	import { cn } from "@/lib/utils"
     5	
     6	const Drawer = ({
     7	  shouldScaleBackground = true,
     8	  ...props
     9	}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (
    10	  <DrawerPrimitive.Root
    11	    shouldScaleBackground={shouldScaleBackground}
    12	    {...props}
    13	  />
    14	)
    15	Drawer.displayName = "Drawer"
    16	
    17	const DrawerTrigger = DrawerPrimitive.Trigger
    18	
    19	const DrawerPortal = DrawerPrimitive.Portal
    20	
    21	const DrawerClose = DrawerPrimitive.Close
    22	
    23	const DrawerOverlay = React.forwardRef<
    24	  React.ElementRef<typeof DrawerPrimitive.Overlay>,
    25	  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>
    26	>(({ className, ...props }, ref) => (
    27	  <DrawerPrimitive.Overlay
    28	    ref={ref}
    29	    className={cn("fixed inset-0 z-50 bg-black/80", className)}
    30	    {...props}
    31	  />
    32	))
    33	DrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName
    34	
    35	const DrawerContent = React.forwardRef<
    36	  React.ElementRef<typeof DrawerPrimitive.Content>,
    37	  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>
    38	>(({ className, children, ...props }, ref) => (
    39	  <DrawerPortal>
    40	    <DrawerOverlay />
    41	    <DrawerPrimitive.Content
    42	      ref={ref}
    43	      className={cn(
    44	        "fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background",
    45	        className
    46	      )}
    47	      {...props}
    48	    >
    49	      <div className="mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted" />
    50	      {children}
    51	    </DrawerPrimitive.Content>
    52	  </DrawerPortal>
    53	))
    54	DrawerContent.displayName = "DrawerContent"
    55	
    56	const DrawerHeader = ({
    57	  className,
    58	  ...props
    59	}: React.HTMLAttributes<HTMLDivElement>) => (
    60	  <div
    61	    className={cn("grid gap-1.5 p-4 text-center sm:text-left", className)}
    62	    {...props}
    63	  />
    64	)
    65	DrawerHeader.displayName = "DrawerHeader"
    66	
    67	const DrawerFooter = ({
    68	  className,
    69	  ...props
    70	}: React.HTMLAttributes<HTMLDivElement>) => (
    71	  <div
    72	    className={cn("mt-auto flex flex-col gap-2 p-4", className)}
    73	    {...props}
    74	  />
    75	)
    76	DrawerFooter.displayName = "DrawerFooter"
    77	
    78	const DrawerTitle = React.forwardRef<
    79	  React.ElementRef<typeof DrawerPrimitive.Title>,
    80	  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>
    81	>(({ className, ...props }, ref) => (
    82	  <DrawerPrimitive.Title
    83	    ref={ref}
    84	    className={cn(
    85	      "text-lg font-semibold leading-none tracking-tight",
    86	      className
    87	    )}
    88	    {...props}
    89	  />
    90	))
    91	DrawerTitle.displayName = DrawerPrimitive.Title.displayName
    92	
    93	const DrawerDescription = React.forwardRef<
    94	  React.ElementRef<typeof DrawerPrimitive.Description>,
    95	  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>
    96	>(({ className, ...props }, ref) => (
    97	  <DrawerPrimitive.Description
    98	    ref={ref}
    99	    className={cn("text-sm text-muted-foreground", className)}
   100	    {...props}
   101	  />
   102	))
   103	DrawerDescription.displayName = DrawerPrimitive.Description.displayName
   104	
   105	export {
   106	  Drawer,
   107	  DrawerPortal,
   108	  DrawerOverlay,
   109	  DrawerTrigger,
   110	  DrawerClose,
   111	  DrawerContent,
   112	  DrawerHeader,
   113	  DrawerFooter,
   114	  DrawerTitle,
   115	  DrawerDescription,
   116	}

========== FILE: ./src/components/ui/dropdown-menu.tsx ==========

     1	import * as React from "react"
     2	import * as DropdownMenuPrimitive from "@radix-ui/react-dropdown-menu"
     3	import { Check, ChevronRight, Circle } from "lucide-react"
     4	
     5	import { cn } from "@/lib/utils"
     6	
     7	const DropdownMenu = DropdownMenuPrimitive.Root
     8	
     9	const DropdownMenuTrigger = DropdownMenuPrimitive.Trigger
    10	
    11	const DropdownMenuGroup = DropdownMenuPrimitive.Group
    12	
    13	const DropdownMenuPortal = DropdownMenuPrimitive.Portal
    14	
    15	const DropdownMenuSub = DropdownMenuPrimitive.Sub
    16	
    17	const DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup
    18	
    19	const DropdownMenuSubTrigger = React.forwardRef<
    20	  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,
    21	  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {
    22	    inset?: boolean
    23	  }
    24	>(({ className, inset, children, ...props }, ref) => (
    25	  <DropdownMenuPrimitive.SubTrigger
    26	    ref={ref}
    27	    className={cn(
    28	      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent",
    29	      inset && "pl-8",
    30	      className
    31	    )}
    32	    {...props}
    33	  >
    34	    {children}
    35	    <ChevronRight className="ml-auto h-4 w-4" />
    36	  </DropdownMenuPrimitive.SubTrigger>
    37	))
    38	DropdownMenuSubTrigger.displayName =
    39	  DropdownMenuPrimitive.SubTrigger.displayName
    40	
    41	const DropdownMenuSubContent = React.forwardRef<
    42	  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,
    43	  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>
    44	>(({ className, ...props }, ref) => (
    45	  <DropdownMenuPrimitive.SubContent
    46	    ref={ref}
    47	    className={cn(
    48	      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
    49	      className
    50	    )}
    51	    {...props}
    52	  />
    53	))
    54	DropdownMenuSubContent.displayName =
    55	  DropdownMenuPrimitive.SubContent.displayName
    56	
    57	const DropdownMenuContent = React.forwardRef<
    58	  React.ElementRef<typeof DropdownMenuPrimitive.Content>,
    59	  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>
    60	>(({ className, sideOffset = 4, ...props }, ref) => (
    61	  <DropdownMenuPrimitive.Portal>
    62	    <DropdownMenuPrimitive.Content
    63	      ref={ref}
    64	      sideOffset={sideOffset}
    65	      className={cn(
    66	        "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
    67	        className
    68	      )}
    69	      {...props}
    70	    />
    71	  </DropdownMenuPrimitive.Portal>
    72	))
    73	DropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName
    74	
    75	const DropdownMenuItem = React.forwardRef<
    76	  React.ElementRef<typeof DropdownMenuPrimitive.Item>,
    77	  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {
    78	    inset?: boolean
    79	  }
    80	>(({ className, inset, ...props }, ref) => (
    81	  <DropdownMenuPrimitive.Item
    82	    ref={ref}
    83	    className={cn(
    84	      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
    85	      inset && "pl-8",
    86	      className
    87	    )}
    88	    {...props}
    89	  />
    90	))
    91	DropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName
    92	
    93	const DropdownMenuCheckboxItem = React.forwardRef<
    94	  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,
    95	  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>
    96	>(({ className, children, checked, ...props }, ref) => (
    97	  <DropdownMenuPrimitive.CheckboxItem
    98	    ref={ref}
    99	    className={cn(
   100	      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
   101	      className
   102	    )}
   103	    checked={checked}
   104	    {...props}
   105	  >
   106	    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
   107	      <DropdownMenuPrimitive.ItemIndicator>
   108	        <Check className="h-4 w-4" />
   109	      </DropdownMenuPrimitive.ItemIndicator>
   110	    </span>
   111	    {children}
   112	  </DropdownMenuPrimitive.CheckboxItem>
   113	))
   114	DropdownMenuCheckboxItem.displayName =
   115	  DropdownMenuPrimitive.CheckboxItem.displayName
   116	
   117	const DropdownMenuRadioItem = React.forwardRef<
   118	  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,
   119	  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>
   120	>(({ className, children, ...props }, ref) => (
   121	  <DropdownMenuPrimitive.RadioItem
   122	    ref={ref}
   123	    className={cn(
   124	      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
   125	      className
   126	    )}
   127	    {...props}
   128	  >
   129	    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
   130	      <DropdownMenuPrimitive.ItemIndicator>
   131	        <Circle className="h-2 w-2 fill-current" />
   132	      </DropdownMenuPrimitive.ItemIndicator>
   133	    </span>
   134	    {children}
   135	  </DropdownMenuPrimitive.RadioItem>
   136	))
   137	DropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName
   138	
   139	const DropdownMenuLabel = React.forwardRef<
   140	  React.ElementRef<typeof DropdownMenuPrimitive.Label>,
   141	  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {
   142	    inset?: boolean
   143	  }
   144	>(({ className, inset, ...props }, ref) => (
   145	  <DropdownMenuPrimitive.Label
   146	    ref={ref}
   147	    className={cn(
   148	      "px-2 py-1.5 text-sm font-semibold",
   149	      inset && "pl-8",
   150	      className
   151	    )}
   152	    {...props}
   153	  />
   154	))
   155	DropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName
   156	
   157	const DropdownMenuSeparator = React.forwardRef<
   158	  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,
   159	  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>
   160	>(({ className, ...props }, ref) => (
   161	  <DropdownMenuPrimitive.Separator
   162	    ref={ref}
   163	    className={cn("-mx-1 my-1 h-px bg-muted", className)}
   164	    {...props}
   165	  />
   166	))
   167	DropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName
   168	
   169	const DropdownMenuShortcut = ({
   170	  className,
   171	  ...props
   172	}: React.HTMLAttributes<HTMLSpanElement>) => {
   173	  return (
   174	    <span
   175	      className={cn("ml-auto text-xs tracking-widest opacity-60", className)}
   176	      {...props}
   177	    />
   178	  )
   179	}
   180	DropdownMenuShortcut.displayName = "DropdownMenuShortcut"
   181	
   182	export {
   183	  DropdownMenu,
   184	  DropdownMenuTrigger,
   185	  DropdownMenuContent,
   186	  DropdownMenuItem,
   187	  DropdownMenuCheckboxItem,
   188	  DropdownMenuRadioItem,
   189	  DropdownMenuLabel,
   190	  DropdownMenuSeparator,
   191	  DropdownMenuShortcut,
   192	  DropdownMenuGroup,
   193	  DropdownMenuPortal,
   194	  DropdownMenuSub,
   195	  DropdownMenuSubContent,
   196	  DropdownMenuSubTrigger,
   197	  DropdownMenuRadioGroup,
   198	}

========== FILE: ./src/components/ui/form.tsx ==========

     1	import * as React from "react"
     2	import * as LabelPrimitive from "@radix-ui/react-label"
     3	import { Slot } from "@radix-ui/react-slot"
     4	import {
     5	  Controller,
     6	  ControllerProps,
     7	  FieldPath,
     8	  FieldValues,
     9	  FormProvider,
    10	  useFormContext,
    11	} from "react-hook-form"
    12	
    13	import { cn } from "@/lib/utils"
    14	import { Label } from "@/components/ui/label"
    15	
    16	const Form = FormProvider
    17	
    18	type FormFieldContextValue<
    19	  TFieldValues extends FieldValues = FieldValues,
    20	  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>
    21	> = {
    22	  name: TName
    23	}
    24	
    25	const FormFieldContext = React.createContext<FormFieldContextValue>(
    26	  {} as FormFieldContextValue
    27	)
    28	
    29	const FormField = <
    30	  TFieldValues extends FieldValues = FieldValues,
    31	  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>
    32	>({
    33	  ...props
    34	}: ControllerProps<TFieldValues, TName>) => {
    35	  return (
    36	    <FormFieldContext.Provider value={{ name: props.name }}>
    37	      <Controller {...props} />
    38	    </FormFieldContext.Provider>
    39	  )
    40	}
    41	
    42	const useFormField = () => {
    43	  const fieldContext = React.useContext(FormFieldContext)
    44	  const itemContext = React.useContext(FormItemContext)
    45	  const { getFieldState, formState } = useFormContext()
    46	
    47	  const fieldState = getFieldState(fieldContext.name, formState)
    48	
    49	  if (!fieldContext) {
    50	    throw new Error("useFormField should be used within <FormField>")
    51	  }
    52	
    53	  const { id } = itemContext
    54	
    55	  return {
    56	    id,
    57	    name: fieldContext.name,
    58	    formItemId: `${id}-form-item`,
    59	    formDescriptionId: `${id}-form-item-description`,
    60	    formMessageId: `${id}-form-item-message`,
    61	    ...fieldState,
    62	  }
    63	}
    64	
    65	type FormItemContextValue = {
    66	  id: string
    67	}
    68	
    69	const FormItemContext = React.createContext<FormItemContextValue>(
    70	  {} as FormItemContextValue
    71	)
    72	
    73	const FormItem = React.forwardRef<
    74	  HTMLDivElement,
    75	  React.HTMLAttributes<HTMLDivElement>
    76	>(({ className, ...props }, ref) => {
    77	  const id = React.useId()
    78	
    79	  return (
    80	    <FormItemContext.Provider value={{ id }}>
    81	      <div ref={ref} className={cn("space-y-2", className)} {...props} />
    82	    </FormItemContext.Provider>
    83	  )
    84	})
    85	FormItem.displayName = "FormItem"
    86	
    87	const FormLabel = React.forwardRef<
    88	  React.ElementRef<typeof LabelPrimitive.Root>,
    89	  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>
    90	>(({ className, ...props }, ref) => {
    91	  const { error, formItemId } = useFormField()
    92	
    93	  return (
    94	    <Label
    95	      ref={ref}
    96	      className={cn(error && "text-destructive", className)}
    97	      htmlFor={formItemId}
    98	      {...props}
    99	    />
   100	  )
   101	})
   102	FormLabel.displayName = "FormLabel"
   103	
   104	const FormControl = React.forwardRef<
   105	  React.ElementRef<typeof Slot>,
   106	  React.ComponentPropsWithoutRef<typeof Slot>
   107	>(({ ...props }, ref) => {
   108	  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()
   109	
   110	  return (
   111	    <Slot
   112	      ref={ref}
   113	      id={formItemId}
   114	      aria-describedby={
   115	        !error
   116	          ? `${formDescriptionId}`
   117	          : `${formDescriptionId} ${formMessageId}`
   118	      }
   119	      aria-invalid={!!error}
   120	      {...props}
   121	    />
   122	  )
   123	})
   124	FormControl.displayName = "FormControl"
   125	
   126	const FormDescription = React.forwardRef<
   127	  HTMLParagraphElement,
   128	  React.HTMLAttributes<HTMLParagraphElement>
   129	>(({ className, ...props }, ref) => {
   130	  const { formDescriptionId } = useFormField()
   131	
   132	  return (
   133	    <p
   134	      ref={ref}
   135	      id={formDescriptionId}
   136	      className={cn("text-sm text-muted-foreground", className)}
   137	      {...props}
   138	    />
   139	  )
   140	})
   141	FormDescription.displayName = "FormDescription"
   142	
   143	const FormMessage = React.forwardRef<
   144	  HTMLParagraphElement,
   145	  React.HTMLAttributes<HTMLParagraphElement>
   146	>(({ className, children, ...props }, ref) => {
   147	  const { error, formMessageId } = useFormField()
   148	  const body = error ? String(error?.message) : children
   149	
   150	  if (!body) {
   151	    return null
   152	  }
   153	
   154	  return (
   155	    <p
   156	      ref={ref}
   157	      id={formMessageId}
   158	      className={cn("text-sm font-medium text-destructive", className)}
   159	      {...props}
   160	    >
   161	      {body}
   162	    </p>
   163	  )
   164	})
   165	FormMessage.displayName = "FormMessage"
   166	
   167	export {
   168	  useFormField,
   169	  Form,
   170	  FormItem,
   171	  FormLabel,
   172	  FormControl,
   173	  FormDescription,
   174	  FormMessage,
   175	  FormField,
   176	}

========== FILE: ./src/components/ui/hover-card.tsx ==========

     1	import * as React from "react"
     2	import * as HoverCardPrimitive from "@radix-ui/react-hover-card"
     3	
     4	import { cn } from "@/lib/utils"
     5	
     6	const HoverCard = HoverCardPrimitive.Root
     7	
     8	const HoverCardTrigger = HoverCardPrimitive.Trigger
     9	
    10	const HoverCardContent = React.forwardRef<
    11	  React.ElementRef<typeof HoverCardPrimitive.Content>,
    12	  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>
    13	>(({ className, align = "center", sideOffset = 4, ...props }, ref) => (
    14	  <HoverCardPrimitive.Content
    15	    ref={ref}
    16	    align={align}
    17	    sideOffset={sideOffset}
    18	    className={cn(
    19	      "z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
    20	      className
    21	    )}
    22	    {...props}
    23	  />
    24	))
    25	HoverCardContent.displayName = HoverCardPrimitive.Content.displayName
    26	
    27	export { HoverCard, HoverCardTrigger, HoverCardContent }

========== FILE: ./src/components/ui/input-otp.tsx ==========

     1	import * as React from "react"
     2	import { OTPInput, OTPInputContext } from "input-otp"
     3	import { Dot } from "lucide-react"
     4	
     5	import { cn } from "@/lib/utils"
     6	
     7	const InputOTP = React.forwardRef<
     8	  React.ElementRef<typeof OTPInput>,
     9	  React.ComponentPropsWithoutRef<typeof OTPInput>
    10	>(({ className, containerClassName, ...props }, ref) => (
    11	  <OTPInput
    12	    ref={ref}
    13	    containerClassName={cn(
    14	      "flex items-center gap-2 has-[:disabled]:opacity-50",
    15	      containerClassName
    16	    )}
    17	    className={cn("disabled:cursor-not-allowed", className)}
    18	    {...props}
    19	  />
    20	))
    21	InputOTP.displayName = "InputOTP"
    22	
    23	const InputOTPGroup = React.forwardRef<
    24	  React.ElementRef<"div">,
    25	  React.ComponentPropsWithoutRef<"div">
    26	>(({ className, ...props }, ref) => (
    27	  <div ref={ref} className={cn("flex items-center", className)} {...props} />
    28	))
    29	InputOTPGroup.displayName = "InputOTPGroup"
    30	
    31	const InputOTPSlot = React.forwardRef<
    32	  React.ElementRef<"div">,
    33	  React.ComponentPropsWithoutRef<"div"> & { index: number }
    34	>(({ index, className, ...props }, ref) => {
    35	  const inputOTPContext = React.useContext(OTPInputContext)
    36	  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]
    37	
    38	  return (
    39	    <div
    40	      ref={ref}
    41	      className={cn(
    42	        "relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md",
    43	        isActive && "z-10 ring-2 ring-ring ring-offset-background",
    44	        className
    45	      )}
    46	      {...props}
    47	    >
    48	      {char}
    49	      {hasFakeCaret && (
    50	        <div className="pointer-events-none absolute inset-0 flex items-center justify-center">
    51	          <div className="h-4 w-px animate-caret-blink bg-foreground duration-1000" />
    52	        </div>
    53	      )}
    54	    </div>
    55	  )
    56	})
    57	InputOTPSlot.displayName = "InputOTPSlot"
    58	
    59	const InputOTPSeparator = React.forwardRef<
    60	  React.ElementRef<"div">,
    61	  React.ComponentPropsWithoutRef<"div">
    62	>(({ ...props }, ref) => (
    63	  <div ref={ref} role="separator" {...props}>
    64	    <Dot />
    65	  </div>
    66	))
    67	InputOTPSeparator.displayName = "InputOTPSeparator"
    68	
    69	export { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }

========== FILE: ./src/components/ui/input.tsx ==========

     1	import * as React from "react"
     2	
     3	import { cn } from "@/lib/utils"
     4	
     5	const Input = React.forwardRef<HTMLInputElement, React.ComponentProps<"input">>(
     6	  ({ className, type, ...props }, ref) => {
     7	    return (
     8	      <input
     9	        type={type}
    10	        className={cn(
    11	          "flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
    12	          className
    13	        )}
    14	        ref={ref}
    15	        {...props}
    16	      />
    17	    )
    18	  }
    19	)
    20	Input.displayName = "Input"
    21	
    22	export { Input }

========== FILE: ./src/components/ui/label.tsx ==========

     1	import * as React from "react"
     2	import * as LabelPrimitive from "@radix-ui/react-label"
     3	import { cva, type VariantProps } from "class-variance-authority"
     4	
     5	import { cn } from "@/lib/utils"
     6	
     7	const labelVariants = cva(
     8	  "text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
     9	)
    10	
    11	const Label = React.forwardRef<
    12	  React.ElementRef<typeof LabelPrimitive.Root>,
    13	  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &
    14	    VariantProps<typeof labelVariants>
    15	>(({ className, ...props }, ref) => (
    16	  <LabelPrimitive.Root
    17	    ref={ref}
    18	    className={cn(labelVariants(), className)}
    19	    {...props}
    20	  />
    21	))
    22	Label.displayName = LabelPrimitive.Root.displayName
    23	
    24	export { Label }

========== FILE: ./src/components/ui/menubar.tsx ==========

     1	import * as React from "react"
     2	import * as MenubarPrimitive from "@radix-ui/react-menubar"
     3	import { Check, ChevronRight, Circle } from "lucide-react"
     4	
     5	import { cn } from "@/lib/utils"
     6	
     7	const MenubarMenu = MenubarPrimitive.Menu
     8	
     9	const MenubarGroup = MenubarPrimitive.Group
    10	
    11	const MenubarPortal = MenubarPrimitive.Portal
    12	
    13	const MenubarSub = MenubarPrimitive.Sub
    14	
    15	const MenubarRadioGroup = MenubarPrimitive.RadioGroup
    16	
    17	const Menubar = React.forwardRef<
    18	  React.ElementRef<typeof MenubarPrimitive.Root>,
    19	  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>
    20	>(({ className, ...props }, ref) => (
    21	  <MenubarPrimitive.Root
    22	    ref={ref}
    23	    className={cn(
    24	      "flex h-10 items-center space-x-1 rounded-md border bg-background p-1",
    25	      className
    26	    )}
    27	    {...props}
    28	  />
    29	))
    30	Menubar.displayName = MenubarPrimitive.Root.displayName
    31	
    32	const MenubarTrigger = React.forwardRef<
    33	  React.ElementRef<typeof MenubarPrimitive.Trigger>,
    34	  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>
    35	>(({ className, ...props }, ref) => (
    36	  <MenubarPrimitive.Trigger
    37	    ref={ref}
    38	    className={cn(
    39	      "flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
    40	      className
    41	    )}
    42	    {...props}
    43	  />
    44	))
    45	MenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName
    46	
    47	const MenubarSubTrigger = React.forwardRef<
    48	  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,
    49	  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {
    50	    inset?: boolean
    51	  }
    52	>(({ className, inset, children, ...props }, ref) => (
    53	  <MenubarPrimitive.SubTrigger
    54	    ref={ref}
    55	    className={cn(
    56	      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
    57	      inset && "pl-8",
    58	      className
    59	    )}
    60	    {...props}
    61	  >
    62	    {children}
    63	    <ChevronRight className="ml-auto h-4 w-4" />
    64	  </MenubarPrimitive.SubTrigger>
    65	))
    66	MenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName
    67	
    68	const MenubarSubContent = React.forwardRef<
    69	  React.ElementRef<typeof MenubarPrimitive.SubContent>,
    70	  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>
    71	>(({ className, ...props }, ref) => (
    72	  <MenubarPrimitive.SubContent
    73	    ref={ref}
    74	    className={cn(
    75	      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
    76	      className
    77	    )}
    78	    {...props}
    79	  />
    80	))
    81	MenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName
    82	
    83	const MenubarContent = React.forwardRef<
    84	  React.ElementRef<typeof MenubarPrimitive.Content>,
    85	  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>
    86	>(
    87	  (
    88	    { className, align = "start", alignOffset = -4, sideOffset = 8, ...props },
    89	    ref
    90	  ) => (
    91	    <MenubarPrimitive.Portal>
    92	      <MenubarPrimitive.Content
    93	        ref={ref}
    94	        align={align}
    95	        alignOffset={alignOffset}
    96	        sideOffset={sideOffset}
    97	        className={cn(
    98	          "z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
    99	          className
   100	        )}
   101	        {...props}
   102	      />
   103	    </MenubarPrimitive.Portal>
   104	  )
   105	)
   106	MenubarContent.displayName = MenubarPrimitive.Content.displayName
   107	
   108	const MenubarItem = React.forwardRef<
   109	  React.ElementRef<typeof MenubarPrimitive.Item>,
   110	  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {
   111	    inset?: boolean
   112	  }
   113	>(({ className, inset, ...props }, ref) => (
   114	  <MenubarPrimitive.Item
   115	    ref={ref}
   116	    className={cn(
   117	      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
   118	      inset && "pl-8",
   119	      className
   120	    )}
   121	    {...props}
   122	  />
   123	))
   124	MenubarItem.displayName = MenubarPrimitive.Item.displayName
   125	
   126	const MenubarCheckboxItem = React.forwardRef<
   127	  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,
   128	  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>
   129	>(({ className, children, checked, ...props }, ref) => (
   130	  <MenubarPrimitive.CheckboxItem
   131	    ref={ref}
   132	    className={cn(
   133	      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
   134	      className
   135	    )}
   136	    checked={checked}
   137	    {...props}
   138	  >
   139	    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
   140	      <MenubarPrimitive.ItemIndicator>
   141	        <Check className="h-4 w-4" />
   142	      </MenubarPrimitive.ItemIndicator>
   143	    </span>
   144	    {children}
   145	  </MenubarPrimitive.CheckboxItem>
   146	))
   147	MenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName
   148	
   149	const MenubarRadioItem = React.forwardRef<
   150	  React.ElementRef<typeof MenubarPrimitive.RadioItem>,
   151	  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>
   152	>(({ className, children, ...props }, ref) => (
   153	  <MenubarPrimitive.RadioItem
   154	    ref={ref}
   155	    className={cn(
   156	      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
   157	      className
   158	    )}
   159	    {...props}
   160	  >
   161	    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
   162	      <MenubarPrimitive.ItemIndicator>
   163	        <Circle className="h-2 w-2 fill-current" />
   164	      </MenubarPrimitive.ItemIndicator>
   165	    </span>
   166	    {children}
   167	  </MenubarPrimitive.RadioItem>
   168	))
   169	MenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName
   170	
   171	const MenubarLabel = React.forwardRef<
   172	  React.ElementRef<typeof MenubarPrimitive.Label>,
   173	  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {
   174	    inset?: boolean
   175	  }
   176	>(({ className, inset, ...props }, ref) => (
   177	  <MenubarPrimitive.Label
   178	    ref={ref}
   179	    className={cn(
   180	      "px-2 py-1.5 text-sm font-semibold",
   181	      inset && "pl-8",
   182	      className
   183	    )}
   184	    {...props}
   185	  />
   186	))
   187	MenubarLabel.displayName = MenubarPrimitive.Label.displayName
   188	
   189	const MenubarSeparator = React.forwardRef<
   190	  React.ElementRef<typeof MenubarPrimitive.Separator>,
   191	  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>
   192	>(({ className, ...props }, ref) => (
   193	  <MenubarPrimitive.Separator
   194	    ref={ref}
   195	    className={cn("-mx-1 my-1 h-px bg-muted", className)}
   196	    {...props}
   197	  />
   198	))
   199	MenubarSeparator.displayName = MenubarPrimitive.Separator.displayName
   200	
   201	const MenubarShortcut = ({
   202	  className,
   203	  ...props
   204	}: React.HTMLAttributes<HTMLSpanElement>) => {
   205	  return (
   206	    <span
   207	      className={cn(
   208	        "ml-auto text-xs tracking-widest text-muted-foreground",
   209	        className
   210	      )}
   211	      {...props}
   212	    />
   213	  )
   214	}
   215	MenubarShortcut.displayname = "MenubarShortcut"
   216	
   217	export {
   218	  Menubar,
   219	  MenubarMenu,
   220	  MenubarTrigger,
   221	  MenubarContent,
   222	  MenubarItem,
   223	  MenubarSeparator,
   224	  MenubarLabel,
   225	  MenubarCheckboxItem,
   226	  MenubarRadioGroup,
   227	  MenubarRadioItem,
   228	  MenubarPortal,
   229	  MenubarSubContent,
   230	  MenubarSubTrigger,
   231	  MenubarGroup,
   232	  MenubarSub,
   233	  MenubarShortcut,
   234	}

========== FILE: ./src/components/ui/navigation-menu.tsx ==========

     1	import * as React from "react"
     2	import * as NavigationMenuPrimitive from "@radix-ui/react-navigation-menu"
     3	import { cva } from "class-variance-authority"
     4	import { ChevronDown } from "lucide-react"
     5	
     6	import { cn } from "@/lib/utils"
     7	
     8	const NavigationMenu = React.forwardRef<
     9	  React.ElementRef<typeof NavigationMenuPrimitive.Root>,
    10	  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>
    11	>(({ className, children, ...props }, ref) => (
    12	  <NavigationMenuPrimitive.Root
    13	    ref={ref}
    14	    className={cn(
    15	      "relative z-10 flex max-w-max flex-1 items-center justify-center",
    16	      className
    17	    )}
    18	    {...props}
    19	  >
    20	    {children}
    21	    <NavigationMenuViewport />
    22	  </NavigationMenuPrimitive.Root>
    23	))
    24	NavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName
    25	
    26	const NavigationMenuList = React.forwardRef<
    27	  React.ElementRef<typeof NavigationMenuPrimitive.List>,
    28	  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>
    29	>(({ className, ...props }, ref) => (
    30	  <NavigationMenuPrimitive.List
    31	    ref={ref}
    32	    className={cn(
    33	      "group flex flex-1 list-none items-center justify-center space-x-1",
    34	      className
    35	    )}
    36	    {...props}
    37	  />
    38	))
    39	NavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName
    40	
    41	const NavigationMenuItem = NavigationMenuPrimitive.Item
    42	
    43	const navigationMenuTriggerStyle = cva(
    44	  "group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[active]:bg-accent/50 data-[state=open]:bg-accent/50"
    45	)
    46	
    47	const NavigationMenuTrigger = React.forwardRef<
    48	  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,
    49	  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>
    50	>(({ className, children, ...props }, ref) => (
    51	  <NavigationMenuPrimitive.Trigger
    52	    ref={ref}
    53	    className={cn(navigationMenuTriggerStyle(), "group", className)}
    54	    {...props}
    55	  >
    56	    {children}{" "}
    57	    <ChevronDown
    58	      className="relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180"
    59	      aria-hidden="true"
    60	    />
    61	  </NavigationMenuPrimitive.Trigger>
    62	))
    63	NavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName
    64	
    65	const NavigationMenuContent = React.forwardRef<
    66	  React.ElementRef<typeof NavigationMenuPrimitive.Content>,
    67	  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>
    68	>(({ className, ...props }, ref) => (
    69	  <NavigationMenuPrimitive.Content
    70	    ref={ref}
    71	    className={cn(
    72	      "left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto ",
    73	      className
    74	    )}
    75	    {...props}
    76	  />
    77	))
    78	NavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName
    79	
    80	const NavigationMenuLink = NavigationMenuPrimitive.Link
    81	
    82	const NavigationMenuViewport = React.forwardRef<
    83	  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,
    84	  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>
    85	>(({ className, ...props }, ref) => (
    86	  <div className={cn("absolute left-0 top-full flex justify-center")}>
    87	    <NavigationMenuPrimitive.Viewport
    88	      className={cn(
    89	        "origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]",
    90	        className
    91	      )}
    92	      ref={ref}
    93	      {...props}
    94	    />
    95	  </div>
    96	))
    97	NavigationMenuViewport.displayName =
    98	  NavigationMenuPrimitive.Viewport.displayName
    99	
   100	const NavigationMenuIndicator = React.forwardRef<
   101	  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,
   102	  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>
   103	>(({ className, ...props }, ref) => (
   104	  <NavigationMenuPrimitive.Indicator
   105	    ref={ref}
   106	    className={cn(
   107	      "top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in",
   108	      className
   109	    )}
   110	    {...props}
   111	  >
   112	    <div className="relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md" />
   113	  </NavigationMenuPrimitive.Indicator>
   114	))
   115	NavigationMenuIndicator.displayName =
   116	  NavigationMenuPrimitive.Indicator.displayName
   117	
   118	export {
   119	  navigationMenuTriggerStyle,
   120	  NavigationMenu,
   121	  NavigationMenuList,
   122	  NavigationMenuItem,
   123	  NavigationMenuContent,
   124	  NavigationMenuTrigger,
   125	  NavigationMenuLink,
   126	  NavigationMenuIndicator,
   127	  NavigationMenuViewport,
   128	}

========== FILE: ./src/components/ui/pagination.tsx ==========

     1	import * as React from "react"
     2	import { ChevronLeft, ChevronRight, MoreHorizontal } from "lucide-react"
     3	
     4	import { cn } from "@/lib/utils"
     5	import { ButtonProps, buttonVariants } from "@/components/ui/button"
     6	
     7	const Pagination = ({ className, ...props }: React.ComponentProps<"nav">) => (
     8	  <nav
     9	    role="navigation"
    10	    aria-label="pagination"
    11	    className={cn("mx-auto flex w-full justify-center", className)}
    12	    {...props}
    13	  />
    14	)
    15	Pagination.displayName = "Pagination"
    16	
    17	const PaginationContent = React.forwardRef<
    18	  HTMLUListElement,
    19	  React.ComponentProps<"ul">
    20	>(({ className, ...props }, ref) => (
    21	  <ul
    22	    ref={ref}
    23	    className={cn("flex flex-row items-center gap-1", className)}
    24	    {...props}
    25	  />
    26	))
    27	PaginationContent.displayName = "PaginationContent"
    28	
    29	const PaginationItem = React.forwardRef<
    30	  HTMLLIElement,
    31	  React.ComponentProps<"li">
    32	>(({ className, ...props }, ref) => (
    33	  <li ref={ref} className={cn("", className)} {...props} />
    34	))
    35	PaginationItem.displayName = "PaginationItem"
    36	
    37	type PaginationLinkProps = {
    38	  isActive?: boolean
    39	} & Pick<ButtonProps, "size"> &
    40	  React.ComponentProps<"a">
    41	
    42	const PaginationLink = ({
    43	  className,
    44	  isActive,
    45	  size = "icon",
    46	  ...props
    47	}: PaginationLinkProps) => (
    48	  <a
    49	    aria-current={isActive ? "page" : undefined}
    50	    className={cn(
    51	      buttonVariants({
    52	        variant: isActive ? "outline" : "ghost",
    53	        size,
    54	      }),
    55	      className
    56	    )}
    57	    {...props}
    58	  />
    59	)
    60	PaginationLink.displayName = "PaginationLink"
    61	
    62	const PaginationPrevious = ({
    63	  className,
    64	  ...props
    65	}: React.ComponentProps<typeof PaginationLink>) => (
    66	  <PaginationLink
    67	    aria-label="Go to previous page"
    68	    size="default"
    69	    className={cn("gap-1 pl-2.5", className)}
    70	    {...props}
    71	  >
    72	    <ChevronLeft className="h-4 w-4" />
    73	    <span>Previous</span>
    74	  </PaginationLink>
    75	)
    76	PaginationPrevious.displayName = "PaginationPrevious"
    77	
    78	const PaginationNext = ({
    79	  className,
    80	  ...props
    81	}: React.ComponentProps<typeof PaginationLink>) => (
    82	  <PaginationLink
    83	    aria-label="Go to next page"
    84	    size="default"
    85	    className={cn("gap-1 pr-2.5", className)}
    86	    {...props}
    87	  >
    88	    <span>Next</span>
    89	    <ChevronRight className="h-4 w-4" />
    90	  </PaginationLink>
    91	)
    92	PaginationNext.displayName = "PaginationNext"
    93	
    94	const PaginationEllipsis = ({
    95	  className,
    96	  ...props
    97	}: React.ComponentProps<"span">) => (
    98	  <span
    99	    aria-hidden
   100	    className={cn("flex h-9 w-9 items-center justify-center", className)}
   101	    {...props}
   102	  >
   103	    <MoreHorizontal className="h-4 w-4" />
   104	    <span className="sr-only">More pages</span>
   105	  </span>
   106	)
   107	PaginationEllipsis.displayName = "PaginationEllipsis"
   108	
   109	export {
   110	  Pagination,
   111	  PaginationContent,
   112	  PaginationEllipsis,
   113	  PaginationItem,
   114	  PaginationLink,
   115	  PaginationNext,
   116	  PaginationPrevious,
   117	}

========== FILE: ./src/components/ui/popover.tsx ==========

     1	import * as React from "react"
     2	import * as PopoverPrimitive from "@radix-ui/react-popover"
     3	
     4	import { cn } from "@/lib/utils"
     5	
     6	const Popover = PopoverPrimitive.Root
     7	
     8	const PopoverTrigger = PopoverPrimitive.Trigger
     9	
    10	const PopoverContent = React.forwardRef<
    11	  React.ElementRef<typeof PopoverPrimitive.Content>,
    12	  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>
    13	>(({ className, align = "center", sideOffset = 4, ...props }, ref) => (
    14	  <PopoverPrimitive.Portal>
    15	    <PopoverPrimitive.Content
    16	      ref={ref}
    17	      align={align}
    18	      sideOffset={sideOffset}
    19	      className={cn(
    20	        "z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
    21	        className
    22	      )}
    23	      {...props}
    24	    />
    25	  </PopoverPrimitive.Portal>
    26	))
    27	PopoverContent.displayName = PopoverPrimitive.Content.displayName
    28	
    29	export { Popover, PopoverTrigger, PopoverContent }

========== FILE: ./src/components/ui/progress.tsx ==========

     1	import * as React from "react"
     2	import * as ProgressPrimitive from "@radix-ui/react-progress"
     3	
     4	import { cn } from "@/lib/utils"
     5	
     6	const Progress = React.forwardRef<
     7	  React.ElementRef<typeof ProgressPrimitive.Root>,
     8	  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>
     9	>(({ className, value, ...props }, ref) => (
    10	  <ProgressPrimitive.Root
    11	    ref={ref}
    12	    className={cn(
    13	      "relative h-4 w-full overflow-hidden rounded-full bg-secondary",
    14	      className
    15	    )}
    16	    {...props}
    17	  >
    18	    <ProgressPrimitive.Indicator
    19	      className="h-full w-full flex-1 bg-primary transition-all"
    20	      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}
    21	    />
    22	  </ProgressPrimitive.Root>
    23	))
    24	Progress.displayName = ProgressPrimitive.Root.displayName
    25	
    26	export { Progress }

========== FILE: ./src/components/ui/radio-group.tsx ==========

     1	import * as React from "react"
     2	import * as RadioGroupPrimitive from "@radix-ui/react-radio-group"
     3	import { Circle } from "lucide-react"
     4	
     5	import { cn } from "@/lib/utils"
     6	
     7	const RadioGroup = React.forwardRef<
     8	  React.ElementRef<typeof RadioGroupPrimitive.Root>,
     9	  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>
    10	>(({ className, ...props }, ref) => {
    11	  return (
    12	    <RadioGroupPrimitive.Root
    13	      className={cn("grid gap-2", className)}
    14	      {...props}
    15	      ref={ref}
    16	    />
    17	  )
    18	})
    19	RadioGroup.displayName = RadioGroupPrimitive.Root.displayName
    20	
    21	const RadioGroupItem = React.forwardRef<
    22	  React.ElementRef<typeof RadioGroupPrimitive.Item>,
    23	  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>
    24	>(({ className, ...props }, ref) => {
    25	  return (
    26	    <RadioGroupPrimitive.Item
    27	      ref={ref}
    28	      className={cn(
    29	        "aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
    30	        className
    31	      )}
    32	      {...props}
    33	    >
    34	      <RadioGroupPrimitive.Indicator className="flex items-center justify-center">
    35	        <Circle className="h-2.5 w-2.5 fill-current text-current" />
    36	      </RadioGroupPrimitive.Indicator>
    37	    </RadioGroupPrimitive.Item>
    38	  )
    39	})
    40	RadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName
    41	
    42	export { RadioGroup, RadioGroupItem }

========== FILE: ./src/components/ui/resizable.tsx ==========

     1	import { GripVertical } from "lucide-react"
     2	import * as ResizablePrimitive from "react-resizable-panels"
     3	
     4	import { cn } from "@/lib/utils"
     5	
     6	const ResizablePanelGroup = ({
     7	  className,
     8	  ...props
     9	}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (
    10	  <ResizablePrimitive.PanelGroup
    11	    className={cn(
    12	      "flex h-full w-full data-[panel-group-direction=vertical]:flex-col",
    13	      className
    14	    )}
    15	    {...props}
    16	  />
    17	)
    18	
    19	const ResizablePanel = ResizablePrimitive.Panel
    20	
    21	const ResizableHandle = ({
    22	  withHandle,
    23	  className,
    24	  ...props
    25	}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {
    26	  withHandle?: boolean
    27	}) => (
    28	  <ResizablePrimitive.PanelResizeHandle
    29	    className={cn(
    30	      "relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90",
    31	      className
    32	    )}
    33	    {...props}
    34	  >
    35	    {withHandle && (
    36	      <div className="z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border">
    37	        <GripVertical className="h-2.5 w-2.5" />
    38	      </div>
    39	    )}
    40	  </ResizablePrimitive.PanelResizeHandle>
    41	)
    42	
    43	export { ResizablePanelGroup, ResizablePanel, ResizableHandle }

========== FILE: ./src/components/ui/scroll-area.tsx ==========

     1	import * as React from "react"
     2	import * as ScrollAreaPrimitive from "@radix-ui/react-scroll-area"
     3	
     4	import { cn } from "@/lib/utils"
     5	
     6	const ScrollArea = React.forwardRef<
     7	  React.ElementRef<typeof ScrollAreaPrimitive.Root>,
     8	  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>
     9	>(({ className, children, ...props }, ref) => (
    10	  <ScrollAreaPrimitive.Root
    11	    ref={ref}
    12	    className={cn("relative overflow-hidden", className)}
    13	    {...props}
    14	  >
    15	    <ScrollAreaPrimitive.Viewport className="h-full w-full rounded-[inherit]">
    16	      {children}
    17	    </ScrollAreaPrimitive.Viewport>
    18	    <ScrollBar />
    19	    <ScrollAreaPrimitive.Corner />
    20	  </ScrollAreaPrimitive.Root>
    21	))
    22	ScrollArea.displayName = ScrollAreaPrimitive.Root.displayName
    23	
    24	const ScrollBar = React.forwardRef<
    25	  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,
    26	  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>
    27	>(({ className, orientation = "vertical", ...props }, ref) => (
    28	  <ScrollAreaPrimitive.ScrollAreaScrollbar
    29	    ref={ref}
    30	    orientation={orientation}
    31	    className={cn(
    32	      "flex touch-none select-none transition-colors",
    33	      orientation === "vertical" &&
    34	        "h-full w-2.5 border-l border-l-transparent p-[1px]",
    35	      orientation === "horizontal" &&
    36	        "h-2.5 flex-col border-t border-t-transparent p-[1px]",
    37	      className
    38	    )}
    39	    {...props}
    40	  >
    41	    <ScrollAreaPrimitive.ScrollAreaThumb className="relative flex-1 rounded-full bg-border" />
    42	  </ScrollAreaPrimitive.ScrollAreaScrollbar>
    43	))
    44	ScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName
    45	
    46	export { ScrollArea, ScrollBar }

========== FILE: ./src/components/ui/select.tsx ==========

     1	import * as React from "react"
     2	import * as SelectPrimitive from "@radix-ui/react-select"
     3	import { Check, ChevronDown, ChevronUp } from "lucide-react"
     4	
     5	import { cn } from "@/lib/utils"
     6	
     7	const Select = SelectPrimitive.Root
     8	
     9	const SelectGroup = SelectPrimitive.Group
    10	
    11	const SelectValue = SelectPrimitive.Value
    12	
    13	const SelectTrigger = React.forwardRef<
    14	  React.ElementRef<typeof SelectPrimitive.Trigger>,
    15	  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>
    16	>(({ className, children, ...props }, ref) => (
    17	  <SelectPrimitive.Trigger
    18	    ref={ref}
    19	    className={cn(
    20	      "flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1",
    21	      className
    22	    )}
    23	    {...props}
    24	  >
    25	    {children}
    26	    <SelectPrimitive.Icon asChild>
    27	      <ChevronDown className="h-4 w-4 opacity-50" />
    28	    </SelectPrimitive.Icon>
    29	  </SelectPrimitive.Trigger>
    30	))
    31	SelectTrigger.displayName = SelectPrimitive.Trigger.displayName
    32	
    33	const SelectScrollUpButton = React.forwardRef<
    34	  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,
    35	  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>
    36	>(({ className, ...props }, ref) => (
    37	  <SelectPrimitive.ScrollUpButton
    38	    ref={ref}
    39	    className={cn(
    40	      "flex cursor-default items-center justify-center py-1",
    41	      className
    42	    )}
    43	    {...props}
    44	  >
    45	    <ChevronUp className="h-4 w-4" />
    46	  </SelectPrimitive.ScrollUpButton>
    47	))
    48	SelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName
    49	
    50	const SelectScrollDownButton = React.forwardRef<
    51	  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,
    52	  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>
    53	>(({ className, ...props }, ref) => (
    54	  <SelectPrimitive.ScrollDownButton
    55	    ref={ref}
    56	    className={cn(
    57	      "flex cursor-default items-center justify-center py-1",
    58	      className
    59	    )}
    60	    {...props}
    61	  >
    62	    <ChevronDown className="h-4 w-4" />
    63	  </SelectPrimitive.ScrollDownButton>
    64	))
    65	SelectScrollDownButton.displayName =
    66	  SelectPrimitive.ScrollDownButton.displayName
    67	
    68	const SelectContent = React.forwardRef<
    69	  React.ElementRef<typeof SelectPrimitive.Content>,
    70	  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>
    71	>(({ className, children, position = "popper", ...props }, ref) => (
    72	  <SelectPrimitive.Portal>
    73	    <SelectPrimitive.Content
    74	      ref={ref}
    75	      className={cn(
    76	        "relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
    77	        position === "popper" &&
    78	          "data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1",
    79	        className
    80	      )}
    81	      position={position}
    82	      {...props}
    83	    >
    84	      <SelectScrollUpButton />
    85	      <SelectPrimitive.Viewport
    86	        className={cn(
    87	          "p-1",
    88	          position === "popper" &&
    89	            "h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]"
    90	        )}
    91	      >
    92	        {children}
    93	      </SelectPrimitive.Viewport>
    94	      <SelectScrollDownButton />
    95	    </SelectPrimitive.Content>
    96	  </SelectPrimitive.Portal>
    97	))
    98	SelectContent.displayName = SelectPrimitive.Content.displayName
    99	
   100	const SelectLabel = React.forwardRef<
   101	  React.ElementRef<typeof SelectPrimitive.Label>,
   102	  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>
   103	>(({ className, ...props }, ref) => (
   104	  <SelectPrimitive.Label
   105	    ref={ref}
   106	    className={cn("py-1.5 pl-8 pr-2 text-sm font-semibold", className)}
   107	    {...props}
   108	  />
   109	))
   110	SelectLabel.displayName = SelectPrimitive.Label.displayName
   111	
   112	const SelectItem = React.forwardRef<
   113	  React.ElementRef<typeof SelectPrimitive.Item>,
   114	  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>
   115	>(({ className, children, ...props }, ref) => (
   116	  <SelectPrimitive.Item
   117	    ref={ref}
   118	    className={cn(
   119	      "relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
   120	      className
   121	    )}
   122	    {...props}
   123	  >
   124	    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
   125	      <SelectPrimitive.ItemIndicator>
   126	        <Check className="h-4 w-4" />
   127	      </SelectPrimitive.ItemIndicator>
   128	    </span>
   129	
   130	    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
   131	  </SelectPrimitive.Item>
   132	))
   133	SelectItem.displayName = SelectPrimitive.Item.displayName
   134	
   135	const SelectSeparator = React.forwardRef<
   136	  React.ElementRef<typeof SelectPrimitive.Separator>,
   137	  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>
   138	>(({ className, ...props }, ref) => (
   139	  <SelectPrimitive.Separator
   140	    ref={ref}
   141	    className={cn("-mx-1 my-1 h-px bg-muted", className)}
   142	    {...props}
   143	  />
   144	))
   145	SelectSeparator.displayName = SelectPrimitive.Separator.displayName
   146	
   147	export {
   148	  Select,
   149	  SelectGroup,
   150	  SelectValue,
   151	  SelectTrigger,
   152	  SelectContent,
   153	  SelectLabel,
   154	  SelectItem,
   155	  SelectSeparator,
   156	  SelectScrollUpButton,
   157	  SelectScrollDownButton,
   158	}

========== FILE: ./src/components/ui/separator.tsx ==========

     1	import * as React from "react"
     2	import * as SeparatorPrimitive from "@radix-ui/react-separator"
     3	
     4	import { cn } from "@/lib/utils"
     5	
     6	const Separator = React.forwardRef<
     7	  React.ElementRef<typeof SeparatorPrimitive.Root>,
     8	  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>
     9	>(
    10	  (
    11	    { className, orientation = "horizontal", decorative = true, ...props },
    12	    ref
    13	  ) => (
    14	    <SeparatorPrimitive.Root
    15	      ref={ref}
    16	      decorative={decorative}
    17	      orientation={orientation}
    18	      className={cn(
    19	        "shrink-0 bg-border",
    20	        orientation === "horizontal" ? "h-[1px] w-full" : "h-full w-[1px]",
    21	        className
    22	      )}
    23	      {...props}
    24	    />
    25	  )
    26	)
    27	Separator.displayName = SeparatorPrimitive.Root.displayName
    28	
    29	export { Separator }

========== FILE: ./src/components/ui/sheet.tsx ==========

     1	import * as SheetPrimitive from "@radix-ui/react-dialog"
     2	import { cva, type VariantProps } from "class-variance-authority"
     3	import { X } from "lucide-react"
     4	import * as React from "react"
     5	
     6	import { cn } from "@/lib/utils"
     7	
     8	const Sheet = SheetPrimitive.Root
     9	
    10	const SheetTrigger = SheetPrimitive.Trigger
    11	
    12	const SheetClose = SheetPrimitive.Close
    13	
    14	const SheetPortal = SheetPrimitive.Portal
    15	
    16	const SheetOverlay = React.forwardRef<
    17	  React.ElementRef<typeof SheetPrimitive.Overlay>,
    18	  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>
    19	>(({ className, ...props }, ref) => (
    20	  <SheetPrimitive.Overlay
    21	    className={cn(
    22	      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
    23	      className
    24	    )}
    25	    {...props}
    26	    ref={ref}
    27	  />
    28	))
    29	SheetOverlay.displayName = SheetPrimitive.Overlay.displayName
    30	
    31	const sheetVariants = cva(
    32	  "fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500",
    33	  {
    34	    variants: {
    35	      side: {
    36	        top: "inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top",
    37	        bottom:
    38	          "inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom",
    39	        left: "inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm",
    40	        right:
    41	          "inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm",
    42	      },
    43	    },
    44	    defaultVariants: {
    45	      side: "right",
    46	    },
    47	  }
    48	)
    49	
    50	interface SheetContentProps
    51	  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,
    52	  VariantProps<typeof sheetVariants> { }
    53	
    54	const SheetContent = React.forwardRef<
    55	  React.ElementRef<typeof SheetPrimitive.Content>,
    56	  SheetContentProps
    57	>(({ side = "right", className, children, ...props }, ref) => (
    58	  <SheetPortal>
    59	    <SheetOverlay />
    60	    <SheetPrimitive.Content
    61	      ref={ref}
    62	      className={cn(sheetVariants({ side }), className)}
    63	      {...props}
    64	    >
    65	      {children}
    66	      <SheetPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary">
    67	        <X className="h-4 w-4" />
    68	        <span className="sr-only">Close</span>
    69	      </SheetPrimitive.Close>
    70	    </SheetPrimitive.Content>
    71	  </SheetPortal>
    72	))
    73	SheetContent.displayName = SheetPrimitive.Content.displayName
    74	
    75	const SheetHeader = ({
    76	  className,
    77	  ...props
    78	}: React.HTMLAttributes<HTMLDivElement>) => (
    79	  <div
    80	    className={cn(
    81	      "flex flex-col space-y-2 text-center sm:text-left",
    82	      className
    83	    )}
    84	    {...props}
    85	  />
    86	)
    87	SheetHeader.displayName = "SheetHeader"
    88	
    89	const SheetFooter = ({
    90	  className,
    91	  ...props
    92	}: React.HTMLAttributes<HTMLDivElement>) => (
    93	  <div
    94	    className={cn(
    95	      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
    96	      className
    97	    )}
    98	    {...props}
    99	  />
   100	)
   101	SheetFooter.displayName = "SheetFooter"
   102	
   103	const SheetTitle = React.forwardRef<
   104	  React.ElementRef<typeof SheetPrimitive.Title>,
   105	  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>
   106	>(({ className, ...props }, ref) => (
   107	  <SheetPrimitive.Title
   108	    ref={ref}
   109	    className={cn("text-lg font-semibold text-foreground", className)}
   110	    {...props}
   111	  />
   112	))
   113	SheetTitle.displayName = SheetPrimitive.Title.displayName
   114	
   115	const SheetDescription = React.forwardRef<
   116	  React.ElementRef<typeof SheetPrimitive.Description>,
   117	  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>
   118	>(({ className, ...props }, ref) => (
   119	  <SheetPrimitive.Description
   120	    ref={ref}
   121	    className={cn("text-sm text-muted-foreground", className)}
   122	    {...props}
   123	  />
   124	))
   125	SheetDescription.displayName = SheetPrimitive.Description.displayName
   126	
   127	export {
   128	  Sheet, SheetClose,
   129	  SheetContent, SheetDescription, SheetFooter, SheetHeader, SheetOverlay, SheetPortal, SheetTitle, SheetTrigger
   130	}
   131	

========== FILE: ./src/components/ui/sidebar.tsx ==========

     1	import * as React from "react"
     2	import { Slot } from "@radix-ui/react-slot"
     3	import { VariantProps, cva } from "class-variance-authority"
     4	import { PanelLeft } from "lucide-react"
     5	
     6	import { useIsMobile } from "@/hooks/use-mobile"
     7	import { cn } from "@/lib/utils"
     8	import { Button } from "@/components/ui/button"
     9	import { Input } from "@/components/ui/input"
    10	import { Separator } from "@/components/ui/separator"
    11	import { Sheet, SheetContent } from "@/components/ui/sheet"
    12	import { Skeleton } from "@/components/ui/skeleton"
    13	import {
    14	  Tooltip,
    15	  TooltipContent,
    16	  TooltipProvider,
    17	  TooltipTrigger,
    18	} from "@/components/ui/tooltip"
    19	
    20	const SIDEBAR_COOKIE_NAME = "sidebar:state"
    21	const SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7
    22	const SIDEBAR_WIDTH = "16rem"
    23	const SIDEBAR_WIDTH_MOBILE = "18rem"
    24	const SIDEBAR_WIDTH_ICON = "3rem"
    25	const SIDEBAR_KEYBOARD_SHORTCUT = "b"
    26	
    27	type SidebarContext = {
    28	  state: "expanded" | "collapsed"
    29	  open: boolean
    30	  setOpen: (open: boolean) => void
    31	  openMobile: boolean
    32	  setOpenMobile: (open: boolean) => void
    33	  isMobile: boolean
    34	  toggleSidebar: () => void
    35	}
    36	
    37	const SidebarContext = React.createContext<SidebarContext | null>(null)
    38	
    39	function useSidebar() {
    40	  const context = React.useContext(SidebarContext)
    41	  if (!context) {
    42	    throw new Error("useSidebar must be used within a SidebarProvider.")
    43	  }
    44	
    45	  return context
    46	}
    47	
    48	const SidebarProvider = React.forwardRef<
    49	  HTMLDivElement,
    50	  React.ComponentProps<"div"> & {
    51	    defaultOpen?: boolean
    52	    open?: boolean
    53	    onOpenChange?: (open: boolean) => void
    54	  }
    55	>(
    56	  (
    57	    {
    58	      defaultOpen = true,
    59	      open: openProp,
    60	      onOpenChange: setOpenProp,
    61	      className,
    62	      style,
    63	      children,
    64	      ...props
    65	    },
    66	    ref
    67	  ) => {
    68	    const isMobile = useIsMobile()
    69	    const [openMobile, setOpenMobile] = React.useState(false)
    70	
    71	    // This is the internal state of the sidebar.
    72	    // We use openProp and setOpenProp for control from outside the component.
    73	    const [_open, _setOpen] = React.useState(defaultOpen)
    74	    const open = openProp ?? _open
    75	    const setOpen = React.useCallback(
    76	      (value: boolean | ((value: boolean) => boolean)) => {
    77	        const openState = typeof value === "function" ? value(open) : value
    78	        if (setOpenProp) {
    79	          setOpenProp(openState)
    80	        } else {
    81	          _setOpen(openState)
    82	        }
    83	
    84	        // This sets the cookie to keep the sidebar state.
    85	        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`
    86	      },
    87	      [setOpenProp, open]
    88	    )
    89	
    90	    // Helper to toggle the sidebar.
    91	    const toggleSidebar = React.useCallback(() => {
    92	      return isMobile
    93	        ? setOpenMobile((open) => !open)
    94	        : setOpen((open) => !open)
    95	    }, [isMobile, setOpen, setOpenMobile])
    96	
    97	    // Adds a keyboard shortcut to toggle the sidebar.
    98	    React.useEffect(() => {
    99	      const handleKeyDown = (event: KeyboardEvent) => {
   100	        if (
   101	          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&
   102	          (event.metaKey || event.ctrlKey)
   103	        ) {
   104	          event.preventDefault()
   105	          toggleSidebar()
   106	        }
   107	      }
   108	
   109	      window.addEventListener("keydown", handleKeyDown)
   110	      return () => window.removeEventListener("keydown", handleKeyDown)
   111	    }, [toggleSidebar])
   112	
   113	    // We add a state so that we can do data-state="expanded" or "collapsed".
   114	    // This makes it easier to style the sidebar with Tailwind classes.
   115	    const state = open ? "expanded" : "collapsed"
   116	
   117	    const contextValue = React.useMemo<SidebarContext>(
   118	      () => ({
   119	        state,
   120	        open,
   121	        setOpen,
   122	        isMobile,
   123	        openMobile,
   124	        setOpenMobile,
   125	        toggleSidebar,
   126	      }),
   127	      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]
   128	    )
   129	
   130	    return (
   131	      <SidebarContext.Provider value={contextValue}>
   132	        <TooltipProvider delayDuration={0}>
   133	          <div
   134	            style={
   135	              {
   136	                "--sidebar-width": SIDEBAR_WIDTH,
   137	                "--sidebar-width-icon": SIDEBAR_WIDTH_ICON,
   138	                ...style,
   139	              } as React.CSSProperties
   140	            }
   141	            className={cn(
   142	              "group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar",
   143	              className
   144	            )}
   145	            ref={ref}
   146	            {...props}
   147	          >
   148	            {children}
   149	          </div>
   150	        </TooltipProvider>
   151	      </SidebarContext.Provider>
   152	    )
   153	  }
   154	)
   155	SidebarProvider.displayName = "SidebarProvider"
   156	
   157	const Sidebar = React.forwardRef<
   158	  HTMLDivElement,
   159	  React.ComponentProps<"div"> & {
   160	    side?: "left" | "right"
   161	    variant?: "sidebar" | "floating" | "inset"
   162	    collapsible?: "offcanvas" | "icon" | "none"
   163	  }
   164	>(
   165	  (
   166	    {
   167	      side = "left",
   168	      variant = "sidebar",
   169	      collapsible = "offcanvas",
   170	      className,
   171	      children,
   172	      ...props
   173	    },
   174	    ref
   175	  ) => {
   176	    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()
   177	
   178	    if (collapsible === "none") {
   179	      return (
   180	        <div
   181	          className={cn(
   182	            "flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground",
   183	            className
   184	          )}
   185	          ref={ref}
   186	          {...props}
   187	        >
   188	          {children}
   189	        </div>
   190	      )
   191	    }
   192	
   193	    if (isMobile) {
   194	      return (
   195	        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>
   196	          <SheetContent
   197	            data-sidebar="sidebar"
   198	            data-mobile="true"
   199	            className="w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden"
   200	            style={
   201	              {
   202	                "--sidebar-width": SIDEBAR_WIDTH_MOBILE,
   203	              } as React.CSSProperties
   204	            }
   205	            side={side}
   206	          >
   207	            <div className="flex h-full w-full flex-col">{children}</div>
   208	          </SheetContent>
   209	        </Sheet>
   210	      )
   211	    }
   212	
   213	    return (
   214	      <div
   215	        ref={ref}
   216	        className="group peer hidden md:block text-sidebar-foreground"
   217	        data-state={state}
   218	        data-collapsible={state === "collapsed" ? collapsible : ""}
   219	        data-variant={variant}
   220	        data-side={side}
   221	      >
   222	        {/* This is what handles the sidebar gap on desktop */}
   223	        <div
   224	          className={cn(
   225	            "duration-200 relative h-svh w-[--sidebar-width] bg-transparent transition-[width] ease-linear",
   226	            "group-data-[collapsible=offcanvas]:w-0",
   227	            "group-data-[side=right]:rotate-180",
   228	            variant === "floating" || variant === "inset"
   229	              ? "group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]"
   230	              : "group-data-[collapsible=icon]:w-[--sidebar-width-icon]"
   231	          )}
   232	        />
   233	        <div
   234	          className={cn(
   235	            "duration-200 fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] ease-linear md:flex",
   236	            side === "left"
   237	              ? "left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]"
   238	              : "right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]",
   239	            // Adjust the padding for floating and inset variants.
   240	            variant === "floating" || variant === "inset"
   241	              ? "p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]"
   242	              : "group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l",
   243	            className
   244	          )}
   245	          {...props}
   246	        >
   247	          <div
   248	            data-sidebar="sidebar"
   249	            className="flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow"
   250	          >
   251	            {children}
   252	          </div>
   253	        </div>
   254	      </div>
   255	    )
   256	  }
   257	)
   258	Sidebar.displayName = "Sidebar"
   259	
   260	const SidebarTrigger = React.forwardRef<
   261	  React.ElementRef<typeof Button>,
   262	  React.ComponentProps<typeof Button>
   263	>(({ className, onClick, ...props }, ref) => {
   264	  const { toggleSidebar } = useSidebar()
   265	
   266	  return (
   267	    <Button
   268	      ref={ref}
   269	      data-sidebar="trigger"
   270	      variant="ghost"
   271	      size="icon"
   272	      className={cn("h-7 w-7", className)}
   273	      onClick={(event) => {
   274	        onClick?.(event)
   275	        toggleSidebar()
   276	      }}
   277	      {...props}
   278	    >
   279	      <PanelLeft />
   280	      <span className="sr-only">Toggle Sidebar</span>
   281	    </Button>
   282	  )
   283	})
   284	SidebarTrigger.displayName = "SidebarTrigger"
   285	
   286	const SidebarRail = React.forwardRef<
   287	  HTMLButtonElement,
   288	  React.ComponentProps<"button">
   289	>(({ className, ...props }, ref) => {
   290	  const { toggleSidebar } = useSidebar()
   291	
   292	  return (
   293	    <button
   294	      ref={ref}
   295	      data-sidebar="rail"
   296	      aria-label="Toggle Sidebar"
   297	      tabIndex={-1}
   298	      onClick={toggleSidebar}
   299	      title="Toggle Sidebar"
   300	      className={cn(
   301	        "absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex",
   302	        "[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize",
   303	        "[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize",
   304	        "group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar",
   305	        "[[data-side=left][data-collapsible=offcanvas]_&]:-right-2",
   306	        "[[data-side=right][data-collapsible=offcanvas]_&]:-left-2",
   307	        className
   308	      )}
   309	      {...props}
   310	    />
   311	  )
   312	})
   313	SidebarRail.displayName = "SidebarRail"
   314	
   315	const SidebarInset = React.forwardRef<
   316	  HTMLDivElement,
   317	  React.ComponentProps<"main">
   318	>(({ className, ...props }, ref) => {
   319	  return (
   320	    <main
   321	      ref={ref}
   322	      className={cn(
   323	        "relative flex min-h-svh flex-1 flex-col bg-background",
   324	        "peer-data-[variant=inset]:min-h-[calc(100svh-theme(spacing.4))] md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow",
   325	        className
   326	      )}
   327	      {...props}
   328	    />
   329	  )
   330	})
   331	SidebarInset.displayName = "SidebarInset"
   332	
   333	const SidebarInput = React.forwardRef<
   334	  React.ElementRef<typeof Input>,
   335	  React.ComponentProps<typeof Input>
   336	>(({ className, ...props }, ref) => {
   337	  return (
   338	    <Input
   339	      ref={ref}
   340	      data-sidebar="input"
   341	      className={cn(
   342	        "h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring",
   343	        className
   344	      )}
   345	      {...props}
   346	    />
   347	  )
   348	})
   349	SidebarInput.displayName = "SidebarInput"
   350	
   351	const SidebarHeader = React.forwardRef<
   352	  HTMLDivElement,
   353	  React.ComponentProps<"div">
   354	>(({ className, ...props }, ref) => {
   355	  return (
   356	    <div
   357	      ref={ref}
   358	      data-sidebar="header"
   359	      className={cn("flex flex-col gap-2 p-2", className)}
   360	      {...props}
   361	    />
   362	  )
   363	})
   364	SidebarHeader.displayName = "SidebarHeader"
   365	
   366	const SidebarFooter = React.forwardRef<
   367	  HTMLDivElement,
   368	  React.ComponentProps<"div">
   369	>(({ className, ...props }, ref) => {
   370	  return (
   371	    <div
   372	      ref={ref}
   373	      data-sidebar="footer"
   374	      className={cn("flex flex-col gap-2 p-2", className)}
   375	      {...props}
   376	    />
   377	  )
   378	})
   379	SidebarFooter.displayName = "SidebarFooter"
   380	
   381	const SidebarSeparator = React.forwardRef<
   382	  React.ElementRef<typeof Separator>,
   383	  React.ComponentProps<typeof Separator>
   384	>(({ className, ...props }, ref) => {
   385	  return (
   386	    <Separator
   387	      ref={ref}
   388	      data-sidebar="separator"
   389	      className={cn("mx-2 w-auto bg-sidebar-border", className)}
   390	      {...props}
   391	    />
   392	  )
   393	})
   394	SidebarSeparator.displayName = "SidebarSeparator"
   395	
   396	const SidebarContent = React.forwardRef<
   397	  HTMLDivElement,
   398	  React.ComponentProps<"div">
   399	>(({ className, ...props }, ref) => {
   400	  return (
   401	    <div
   402	      ref={ref}
   403	      data-sidebar="content"
   404	      className={cn(
   405	        "flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden",
   406	        className
   407	      )}
   408	      {...props}
   409	    />
   410	  )
   411	})
   412	SidebarContent.displayName = "SidebarContent"
   413	
   414	const SidebarGroup = React.forwardRef<
   415	  HTMLDivElement,
   416	  React.ComponentProps<"div">
   417	>(({ className, ...props }, ref) => {
   418	  return (
   419	    <div
   420	      ref={ref}
   421	      data-sidebar="group"
   422	      className={cn("relative flex w-full min-w-0 flex-col p-2", className)}
   423	      {...props}
   424	    />
   425	  )
   426	})
   427	SidebarGroup.displayName = "SidebarGroup"
   428	
   429	const SidebarGroupLabel = React.forwardRef<
   430	  HTMLDivElement,
   431	  React.ComponentProps<"div"> & { asChild?: boolean }
   432	>(({ className, asChild = false, ...props }, ref) => {
   433	  const Comp = asChild ? Slot : "div"
   434	
   435	  return (
   436	    <Comp
   437	      ref={ref}
   438	      data-sidebar="group-label"
   439	      className={cn(
   440	        "duration-200 flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opa] ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0",
   441	        "group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0",
   442	        className
   443	      )}
   444	      {...props}
   445	    />
   446	  )
   447	})
   448	SidebarGroupLabel.displayName = "SidebarGroupLabel"
   449	
   450	const SidebarGroupAction = React.forwardRef<
   451	  HTMLButtonElement,
   452	  React.ComponentProps<"button"> & { asChild?: boolean }
   453	>(({ className, asChild = false, ...props }, ref) => {
   454	  const Comp = asChild ? Slot : "button"
   455	
   456	  return (
   457	    <Comp
   458	      ref={ref}
   459	      data-sidebar="group-action"
   460	      className={cn(
   461	        "absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0",
   462	        // Increases the hit area of the button on mobile.
   463	        "after:absolute after:-inset-2 after:md:hidden",
   464	        "group-data-[collapsible=icon]:hidden",
   465	        className
   466	      )}
   467	      {...props}
   468	    />
   469	  )
   470	})
   471	SidebarGroupAction.displayName = "SidebarGroupAction"
   472	
   473	const SidebarGroupContent = React.forwardRef<
   474	  HTMLDivElement,
   475	  React.ComponentProps<"div">
   476	>(({ className, ...props }, ref) => (
   477	  <div
   478	    ref={ref}
   479	    data-sidebar="group-content"
   480	    className={cn("w-full text-sm", className)}
   481	    {...props}
   482	  />
   483	))
   484	SidebarGroupContent.displayName = "SidebarGroupContent"
   485	
   486	const SidebarMenu = React.forwardRef<
   487	  HTMLUListElement,
   488	  React.ComponentProps<"ul">
   489	>(({ className, ...props }, ref) => (
   490	  <ul
   491	    ref={ref}
   492	    data-sidebar="menu"
   493	    className={cn("flex w-full min-w-0 flex-col gap-1", className)}
   494	    {...props}
   495	  />
   496	))
   497	SidebarMenu.displayName = "SidebarMenu"
   498	
   499	const SidebarMenuItem = React.forwardRef<
   500	  HTMLLIElement,
   501	  React.ComponentProps<"li">
   502	>(({ className, ...props }, ref) => (
   503	  <li
   504	    ref={ref}
   505	    data-sidebar="menu-item"
   506	    className={cn("group/menu-item relative", className)}
   507	    {...props}
   508	  />
   509	))
   510	SidebarMenuItem.displayName = "SidebarMenuItem"
   511	
   512	const sidebarMenuButtonVariants = cva(
   513	  "peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0",
   514	  {
   515	    variants: {
   516	      variant: {
   517	        default: "hover:bg-sidebar-accent hover:text-sidebar-accent-foreground",
   518	        outline:
   519	          "bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]",
   520	      },
   521	      size: {
   522	        default: "h-8 text-sm",
   523	        sm: "h-7 text-xs",
   524	        lg: "h-12 text-sm group-data-[collapsible=icon]:!p-0",
   525	      },
   526	    },
   527	    defaultVariants: {
   528	      variant: "default",
   529	      size: "default",
   530	    },
   531	  }
   532	)
   533	
   534	const SidebarMenuButton = React.forwardRef<
   535	  HTMLButtonElement,
   536	  React.ComponentProps<"button"> & {
   537	    asChild?: boolean
   538	    isActive?: boolean
   539	    tooltip?: string | React.ComponentProps<typeof TooltipContent>
   540	  } & VariantProps<typeof sidebarMenuButtonVariants>
   541	>(
   542	  (
   543	    {
   544	      asChild = false,
   545	      isActive = false,
   546	      variant = "default",
   547	      size = "default",
   548	      tooltip,
   549	      className,
   550	      ...props
   551	    },
   552	    ref
   553	  ) => {
   554	    const Comp = asChild ? Slot : "button"
   555	    const { isMobile, state } = useSidebar()
   556	
   557	    const button = (
   558	      <Comp
   559	        ref={ref}
   560	        data-sidebar="menu-button"
   561	        data-size={size}
   562	        data-active={isActive}
   563	        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}
   564	        {...props}
   565	      />
   566	    )
   567	
   568	    if (!tooltip) {
   569	      return button
   570	    }
   571	
   572	    if (typeof tooltip === "string") {
   573	      tooltip = {
   574	        children: tooltip,
   575	      }
   576	    }
   577	
   578	    return (
   579	      <Tooltip>
   580	        <TooltipTrigger asChild>{button}</TooltipTrigger>
   581	        <TooltipContent
   582	          side="right"
   583	          align="center"
   584	          hidden={state !== "collapsed" || isMobile}
   585	          {...tooltip}
   586	        />
   587	      </Tooltip>
   588	    )
   589	  }
   590	)
   591	SidebarMenuButton.displayName = "SidebarMenuButton"
   592	
   593	const SidebarMenuAction = React.forwardRef<
   594	  HTMLButtonElement,
   595	  React.ComponentProps<"button"> & {
   596	    asChild?: boolean
   597	    showOnHover?: boolean
   598	  }
   599	>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {
   600	  const Comp = asChild ? Slot : "button"
   601	
   602	  return (
   603	    <Comp
   604	      ref={ref}
   605	      data-sidebar="menu-action"
   606	      className={cn(
   607	        "absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0",
   608	        // Increases the hit area of the button on mobile.
   609	        "after:absolute after:-inset-2 after:md:hidden",
   610	        "peer-data-[size=sm]/menu-button:top-1",
   611	        "peer-data-[size=default]/menu-button:top-1.5",
   612	        "peer-data-[size=lg]/menu-button:top-2.5",
   613	        "group-data-[collapsible=icon]:hidden",
   614	        showOnHover &&
   615	          "group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0",
   616	        className
   617	      )}
   618	      {...props}
   619	    />
   620	  )
   621	})
   622	SidebarMenuAction.displayName = "SidebarMenuAction"
   623	
   624	const SidebarMenuBadge = React.forwardRef<
   625	  HTMLDivElement,
   626	  React.ComponentProps<"div">
   627	>(({ className, ...props }, ref) => (
   628	  <div
   629	    ref={ref}
   630	    data-sidebar="menu-badge"
   631	    className={cn(
   632	      "absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground select-none pointer-events-none",
   633	      "peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground",
   634	      "peer-data-[size=sm]/menu-button:top-1",
   635	      "peer-data-[size=default]/menu-button:top-1.5",
   636	      "peer-data-[size=lg]/menu-button:top-2.5",
   637	      "group-data-[collapsible=icon]:hidden",
   638	      className
   639	    )}
   640	    {...props}
   641	  />
   642	))
   643	SidebarMenuBadge.displayName = "SidebarMenuBadge"
   644	
   645	const SidebarMenuSkeleton = React.forwardRef<
   646	  HTMLDivElement,
   647	  React.ComponentProps<"div"> & {
   648	    showIcon?: boolean
   649	  }
   650	>(({ className, showIcon = false, ...props }, ref) => {
   651	  // Random width between 50 to 90%.
   652	  const width = React.useMemo(() => {
   653	    return `${Math.floor(Math.random() * 40) + 50}%`
   654	  }, [])
   655	
   656	  return (
   657	    <div
   658	      ref={ref}
   659	      data-sidebar="menu-skeleton"
   660	      className={cn("rounded-md h-8 flex gap-2 px-2 items-center", className)}
   661	      {...props}
   662	    >
   663	      {showIcon && (
   664	        <Skeleton
   665	          className="size-4 rounded-md"
   666	          data-sidebar="menu-skeleton-icon"
   667	        />
   668	      )}
   669	      <Skeleton
   670	        className="h-4 flex-1 max-w-[--skeleton-width]"
   671	        data-sidebar="menu-skeleton-text"
   672	        style={
   673	          {
   674	            "--skeleton-width": width,
   675	          } as React.CSSProperties
   676	        }
   677	      />
   678	    </div>
   679	  )
   680	})
   681	SidebarMenuSkeleton.displayName = "SidebarMenuSkeleton"
   682	
   683	const SidebarMenuSub = React.forwardRef<
   684	  HTMLUListElement,
   685	  React.ComponentProps<"ul">
   686	>(({ className, ...props }, ref) => (
   687	  <ul
   688	    ref={ref}
   689	    data-sidebar="menu-sub"
   690	    className={cn(
   691	      "mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5",
   692	      "group-data-[collapsible=icon]:hidden",
   693	      className
   694	    )}
   695	    {...props}
   696	  />
   697	))
   698	SidebarMenuSub.displayName = "SidebarMenuSub"
   699	
   700	const SidebarMenuSubItem = React.forwardRef<
   701	  HTMLLIElement,
   702	  React.ComponentProps<"li">
   703	>(({ ...props }, ref) => <li ref={ref} {...props} />)
   704	SidebarMenuSubItem.displayName = "SidebarMenuSubItem"
   705	
   706	const SidebarMenuSubButton = React.forwardRef<
   707	  HTMLAnchorElement,
   708	  React.ComponentProps<"a"> & {
   709	    asChild?: boolean
   710	    size?: "sm" | "md"
   711	    isActive?: boolean
   712	  }
   713	>(({ asChild = false, size = "md", isActive, className, ...props }, ref) => {
   714	  const Comp = asChild ? Slot : "a"
   715	
   716	  return (
   717	    <Comp
   718	      ref={ref}
   719	      data-sidebar="menu-sub-button"
   720	      data-size={size}
   721	      data-active={isActive}
   722	      className={cn(
   723	        "flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground",
   724	        "data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground",
   725	        size === "sm" && "text-xs",
   726	        size === "md" && "text-sm",
   727	        "group-data-[collapsible=icon]:hidden",
   728	        className
   729	      )}
   730	      {...props}
   731	    />
   732	  )
   733	})
   734	SidebarMenuSubButton.displayName = "SidebarMenuSubButton"
   735	
   736	export {
   737	  Sidebar,
   738	  SidebarContent,
   739	  SidebarFooter,
   740	  SidebarGroup,
   741	  SidebarGroupAction,
   742	  SidebarGroupContent,
   743	  SidebarGroupLabel,
   744	  SidebarHeader,
   745	  SidebarInput,
   746	  SidebarInset,
   747	  SidebarMenu,
   748	  SidebarMenuAction,
   749	  SidebarMenuBadge,
   750	  SidebarMenuButton,
   751	  SidebarMenuItem,
   752	  SidebarMenuSkeleton,
   753	  SidebarMenuSub,
   754	  SidebarMenuSubButton,
   755	  SidebarMenuSubItem,
   756	  SidebarProvider,
   757	  SidebarRail,
   758	  SidebarSeparator,
   759	  SidebarTrigger,
   760	  useSidebar,
   761	}

========== FILE: ./src/components/ui/skeleton.tsx ==========

     1	import { cn } from "@/lib/utils"
     2	
     3	function Skeleton({
     4	  className,
     5	  ...props
     6	}: React.HTMLAttributes<HTMLDivElement>) {
     7	  return (
     8	    <div
     9	      className={cn("animate-pulse rounded-md bg-muted", className)}
    10	      {...props}
    11	    />
    12	  )
    13	}
    14	
    15	export { Skeleton }

========== FILE: ./src/components/ui/slider.tsx ==========

     1	import * as React from "react"
     2	import * as SliderPrimitive from "@radix-ui/react-slider"
     3	
     4	import { cn } from "@/lib/utils"
     5	
     6	const Slider = React.forwardRef<
     7	  React.ElementRef<typeof SliderPrimitive.Root>,
     8	  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>
     9	>(({ className, ...props }, ref) => (
    10	  <SliderPrimitive.Root
    11	    ref={ref}
    12	    className={cn(
    13	      "relative flex w-full touch-none select-none items-center",
    14	      className
    15	    )}
    16	    {...props}
    17	  >
    18	    <SliderPrimitive.Track className="relative h-2 w-full grow overflow-hidden rounded-full bg-secondary">
    19	      <SliderPrimitive.Range className="absolute h-full bg-primary" />
    20	    </SliderPrimitive.Track>
    21	    <SliderPrimitive.Thumb className="block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50" />
    22	  </SliderPrimitive.Root>
    23	))
    24	Slider.displayName = SliderPrimitive.Root.displayName
    25	
    26	export { Slider }

========== FILE: ./src/components/ui/sonner.tsx ==========

     1	import { useTheme } from "next-themes"
     2	import { Toaster as Sonner, toast } from "sonner"
     3	
     4	type ToasterProps = React.ComponentProps<typeof Sonner>
     5	
     6	const Toaster = ({ ...props }: ToasterProps) => {
     7	  const { theme = "system" } = useTheme()
     8	
     9	  return (
    10	    <Sonner
    11	      theme={theme as ToasterProps["theme"]}
    12	      className="toaster group"
    13	      toastOptions={{
    14	        classNames: {
    15	          toast:
    16	            "group toast group-[.toaster]:bg-background group-[.toaster]:text-foreground group-[.toaster]:border-border group-[.toaster]:shadow-lg",
    17	          description: "group-[.toast]:text-muted-foreground",
    18	          actionButton:
    19	            "group-[.toast]:bg-primary group-[.toast]:text-primary-foreground",
    20	          cancelButton:
    21	            "group-[.toast]:bg-muted group-[.toast]:text-muted-foreground",
    22	        },
    23	      }}
    24	      {...props}
    25	    />
    26	  )
    27	}
    28	
    29	export { Toaster, toast }

========== FILE: ./src/components/ui/subscribe-modal.tsx ==========

     1	import React, { useState, useEffect } from 'react';
     2	import { X, Mail, CheckCircle } from 'lucide-react';
     3	import { Button } from '@/components/ui/button';
     4	import { Input } from '@/components/ui/input';
     5	import { Checkbox } from '@/components/ui/checkbox';
     6	import { supabase } from '@/lib/supabase';
     7	import { useSession } from '@/hooks/useSession';
     8	
     9	interface SubscribeModalProps {
    10	    isOpen: boolean;
    11	    onClose: () => void;
    12	    onSubscribed?: () => void; // notify parent when subscribed
    13	}
    14	
    15	export const SubscribeModal: React.FC<SubscribeModalProps> = ({
    16	                                                                  isOpen,
    17	                                                                  onClose,
    18	                                                                  onSubscribed,
    19	                                                              }) => {
    20	    const { session } = useSession();
    21	    const [email, setEmail] = useState('');
    22	    const [consent, setConsent] = useState(false);
    23	    const [isSubmitted, setIsSubmitted] = useState(false);
    24	    const [isSubmitting, setIsSubmitting] = useState(false);
    25	    const [error, setError] = useState<string>('');
    26	
    27	    useEffect(() => {
    28	        document.body.style.overflow = isOpen ? 'hidden' : 'unset';
    29	        return () => {
    30	            document.body.style.overflow = 'unset';
    31	        };
    32	    }, [isOpen]);
    33	
    34	    // Guard: don't render if already subscribed (on this browser) or user is logged in
    35	    const alreadySubscribed =
    36	        typeof window !== 'undefined' &&
    37	        localStorage.getItem('vavus_subscribed') === '1';
    38	    const loggedIn = !!session;
    39	
    40	    if (!isOpen || alreadySubscribed || loggedIn) return null;
    41	
    42	    async function handleSubmit(e: React.FormEvent) {
    43	        e.preventDefault();
    44	        if (!email || !consent || isSubmitting) return;
    45	
    46	        setIsSubmitting(true);
    47	        setError('');
    48	
    49	        try {
    50	            const value = email.trim().toLowerCase();
    51	            const page = window.location.pathname;
    52	            const utm = window.location.search.slice(1); // raw query string
    53	
    54	            // ⬇️ Plain INSERT; duplicates treated as success
    55	            const { error } = await supabase
    56	                .from('subscriptions')
    57	                .insert([{ email: value, user_id: session?.user?.id ?? null, page, utm }]);
    58	
    59	            if (error) {
    60	                if (error.code === '23505' || /duplicate key|unique/i.test(error.message)) {
    61	                    // treat duplicate as success
    62	                } else {
    63	                    throw error;
    64	                }
    65	            }
    66	
    67	            // Mark this browser as subscribed and notify parent
    68	            localStorage.setItem('vavus_subscribed', '1');
    69	            onSubscribed?.();
    70	
    71	            setIsSubmitted(true);
    72	
    73	            // Auto-close after a short success state
    74	            setTimeout(() => {
    75	                onClose();
    76	                setIsSubmitted(false);
    77	                setEmail('');
    78	                setConsent(false);
    79	            }, 2000);
    80	        } catch (err: any) {
    81	            console.error('[SubscribeModal] Subscribe error:', err);
    82	            setError(err?.message || 'Something went wrong. Please try again.');
    83	        } finally {
    84	            setIsSubmitting(false);
    85	        }
    86	    }
    87	
    88	    return (
    89	        <div className="fixed inset-0 z-50 flex items-center justify-center">
    90	            {/* Backdrop */}
    91	            <div
    92	                className="absolute inset-0 bg-black/60 backdrop-blur-sm"
    93	                onClick={() => !isSubmitting && onClose()}
    94	            />
    95	
    96	            {/* Modal */}
    97	            <div className="relative bg-white rounded-xl shadow-xl p-6 m-4 max-w-md w-full animate-scale-in">
    98	                {/* Close button */}
    99	                <button
   100	                    onClick={() => !isSubmitting && onClose()}
   101	                    className="absolute top-4 right-4 text-muted-foreground hover:text-foreground transition-colors"
   102	                >
   103	                    <X className="h-5 w-5" />
   104	                </button>
   105	
   106	                {isSubmitted ? (
   107	                    /* Success State */
   108	                    <div className="text-center py-4">
   109	                        <CheckCircle className="h-16 w-16 text-success mx-auto mb-4" />
   110	                        <h3 className="text-lg font-semibold text-foreground mb-2">
   111	                            Thanks for subscribing!
   112	                        </h3>
   113	                        <p className="text-muted-foreground">
   114	                            Check your inbox for product updates & launch invites.
   115	                        </p>
   116	                    </div>
   117	                ) : (
   118	                    /* Form */
   119	                    <div>
   120	                        <div className="flex items-center space-x-3 mb-4">
   121	                            <div className="bg-gradient-hero p-2 rounded-lg">
   122	                                <Mail className="h-5 w-5 text-white" />
   123	                            </div>
   124	                            <h3 className="text-lg font-semibold text-foreground">
   125	                                Stay Updated
   126	                            </h3>
   127	                        </div>
   128	
   129	                        <p className="text-muted-foreground mb-6">
   130	                            Get product updates & launch invites delivered to your inbox.
   131	                        </p>
   132	
   133	                        <form onSubmit={handleSubmit} className="space-y-4">
   134	                            <div>
   135	                                <Input
   136	                                    type="email"
   137	                                    placeholder="Enter your email"
   138	                                    value={email}
   139	                                    onChange={(e) => setEmail(e.target.value)}
   140	                                    required
   141	                                    className="focus-ring"
   142	                                />
   143	                            </div>
   144	
   145	                            <div className="flex items-start space-x-2">
   146	                                <Checkbox
   147	                                    id="consent"
   148	                                    checked={consent}
   149	                                    onCheckedChange={(checked) => setConsent(!!checked)}
   150	                                    className="mt-1"
   151	                                />
   152	                                <label htmlFor="consent" className="text-sm text-muted-foreground">
   153	                                    I agree to receive product updates and marketing emails from VAVUS AI.
   154	                                </label>
   155	                            </div>
   156	
   157	                            {error && <p className="text-sm text-red-600">{error}</p>}
   158	
   159	                            <Button
   160	                                type="submit"
   161	                                disabled={!email || !consent || isSubmitting}
   162	                                className="btn-hero w-full"
   163	                            >
   164	                                {isSubmitting ? 'Subscribing...' : 'Subscribe'}
   165	                            </Button>
   166	                        </form>
   167	                    </div>
   168	                )}
   169	            </div>
   170	        </div>
   171	    );
   172	};

========== FILE: ./src/components/ui/switch.tsx ==========

     1	import * as React from "react"
     2	import * as SwitchPrimitives from "@radix-ui/react-switch"
     3	
     4	import { cn } from "@/lib/utils"
     5	
     6	const Switch = React.forwardRef<
     7	  React.ElementRef<typeof SwitchPrimitives.Root>,
     8	  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>
     9	>(({ className, ...props }, ref) => (
    10	  <SwitchPrimitives.Root
    11	    className={cn(
    12	      "peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input",
    13	      className
    14	    )}
    15	    {...props}
    16	    ref={ref}
    17	  >
    18	    <SwitchPrimitives.Thumb
    19	      className={cn(
    20	        "pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0"
    21	      )}
    22	    />
    23	  </SwitchPrimitives.Root>
    24	))
    25	Switch.displayName = SwitchPrimitives.Root.displayName
    26	
    27	export { Switch }

========== FILE: ./src/components/ui/table.tsx ==========

     1	import * as React from "react"
     2	
     3	import { cn } from "@/lib/utils"
     4	
     5	const Table = React.forwardRef<
     6	  HTMLTableElement,
     7	  React.HTMLAttributes<HTMLTableElement>
     8	>(({ className, ...props }, ref) => (
     9	  <div className="relative w-full overflow-auto">
    10	    <table
    11	      ref={ref}
    12	      className={cn("w-full caption-bottom text-sm", className)}
    13	      {...props}
    14	    />
    15	  </div>
    16	))
    17	Table.displayName = "Table"
    18	
    19	const TableHeader = React.forwardRef<
    20	  HTMLTableSectionElement,
    21	  React.HTMLAttributes<HTMLTableSectionElement>
    22	>(({ className, ...props }, ref) => (
    23	  <thead ref={ref} className={cn("[&_tr]:border-b", className)} {...props} />
    24	))
    25	TableHeader.displayName = "TableHeader"
    26	
    27	const TableBody = React.forwardRef<
    28	  HTMLTableSectionElement,
    29	  React.HTMLAttributes<HTMLTableSectionElement>
    30	>(({ className, ...props }, ref) => (
    31	  <tbody
    32	    ref={ref}
    33	    className={cn("[&_tr:last-child]:border-0", className)}
    34	    {...props}
    35	  />
    36	))
    37	TableBody.displayName = "TableBody"
    38	
    39	const TableFooter = React.forwardRef<
    40	  HTMLTableSectionElement,
    41	  React.HTMLAttributes<HTMLTableSectionElement>
    42	>(({ className, ...props }, ref) => (
    43	  <tfoot
    44	    ref={ref}
    45	    className={cn(
    46	      "border-t bg-muted/50 font-medium [&>tr]:last:border-b-0",
    47	      className
    48	    )}
    49	    {...props}
    50	  />
    51	))
    52	TableFooter.displayName = "TableFooter"
    53	
    54	const TableRow = React.forwardRef<
    55	  HTMLTableRowElement,
    56	  React.HTMLAttributes<HTMLTableRowElement>
    57	>(({ className, ...props }, ref) => (
    58	  <tr
    59	    ref={ref}
    60	    className={cn(
    61	      "border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted",
    62	      className
    63	    )}
    64	    {...props}
    65	  />
    66	))
    67	TableRow.displayName = "TableRow"
    68	
    69	const TableHead = React.forwardRef<
    70	  HTMLTableCellElement,
    71	  React.ThHTMLAttributes<HTMLTableCellElement>
    72	>(({ className, ...props }, ref) => (
    73	  <th
    74	    ref={ref}
    75	    className={cn(
    76	      "h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0",
    77	      className
    78	    )}
    79	    {...props}
    80	  />
    81	))
    82	TableHead.displayName = "TableHead"
    83	
    84	const TableCell = React.forwardRef<
    85	  HTMLTableCellElement,
    86	  React.TdHTMLAttributes<HTMLTableCellElement>
    87	>(({ className, ...props }, ref) => (
    88	  <td
    89	    ref={ref}
    90	    className={cn("p-4 align-middle [&:has([role=checkbox])]:pr-0", className)}
    91	    {...props}
    92	  />
    93	))
    94	TableCell.displayName = "TableCell"
    95	
    96	const TableCaption = React.forwardRef<
    97	  HTMLTableCaptionElement,
    98	  React.HTMLAttributes<HTMLTableCaptionElement>
    99	>(({ className, ...props }, ref) => (
   100	  <caption
   101	    ref={ref}
   102	    className={cn("mt-4 text-sm text-muted-foreground", className)}
   103	    {...props}
   104	  />
   105	))
   106	TableCaption.displayName = "TableCaption"
   107	
   108	export {
   109	  Table,
   110	  TableHeader,
   111	  TableBody,
   112	  TableFooter,
   113	  TableHead,
   114	  TableRow,
   115	  TableCell,
   116	  TableCaption,
   117	}

========== FILE: ./src/components/ui/tabs.tsx ==========

     1	import * as React from "react"
     2	import * as TabsPrimitive from "@radix-ui/react-tabs"
     3	
     4	import { cn } from "@/lib/utils"
     5	
     6	const Tabs = TabsPrimitive.Root
     7	
     8	const TabsList = React.forwardRef<
     9	  React.ElementRef<typeof TabsPrimitive.List>,
    10	  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>
    11	>(({ className, ...props }, ref) => (
    12	  <TabsPrimitive.List
    13	    ref={ref}
    14	    className={cn(
    15	      "inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground",
    16	      className
    17	    )}
    18	    {...props}
    19	  />
    20	))
    21	TabsList.displayName = TabsPrimitive.List.displayName
    22	
    23	const TabsTrigger = React.forwardRef<
    24	  React.ElementRef<typeof TabsPrimitive.Trigger>,
    25	  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>
    26	>(({ className, ...props }, ref) => (
    27	  <TabsPrimitive.Trigger
    28	    ref={ref}
    29	    className={cn(
    30	      "inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm",
    31	      className
    32	    )}
    33	    {...props}
    34	  />
    35	))
    36	TabsTrigger.displayName = TabsPrimitive.Trigger.displayName
    37	
    38	const TabsContent = React.forwardRef<
    39	  React.ElementRef<typeof TabsPrimitive.Content>,
    40	  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>
    41	>(({ className, ...props }, ref) => (
    42	  <TabsPrimitive.Content
    43	    ref={ref}
    44	    className={cn(
    45	      "mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2",
    46	      className
    47	    )}
    48	    {...props}
    49	  />
    50	))
    51	TabsContent.displayName = TabsPrimitive.Content.displayName
    52	
    53	export { Tabs, TabsList, TabsTrigger, TabsContent }

========== FILE: ./src/components/ui/textarea.tsx ==========

     1	import * as React from "react"
     2	
     3	import { cn } from "@/lib/utils"
     4	
     5	export interface TextareaProps
     6	  extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {}
     7	
     8	const Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>(
     9	  ({ className, ...props }, ref) => {
    10	    return (
    11	      <textarea
    12	        className={cn(
    13	          "flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
    14	          className
    15	        )}
    16	        ref={ref}
    17	        {...props}
    18	      />
    19	    )
    20	  }
    21	)
    22	Textarea.displayName = "Textarea"
    23	
    24	export { Textarea }

========== FILE: ./src/components/ui/toaster.tsx ==========

     1	import { useToast } from "@/hooks/use-toast"
     2	import {
     3	  Toast,
     4	  ToastClose,
     5	  ToastDescription,
     6	  ToastProvider,
     7	  ToastTitle,
     8	  ToastViewport,
     9	} from "@/components/ui/toast"
    10	
    11	export function Toaster() {
    12	  const { toasts } = useToast()
    13	
    14	  return (
    15	    <ToastProvider>
    16	      {toasts.map(function ({ id, title, description, action, ...props }) {
    17	        return (
    18	          <Toast key={id} {...props}>
    19	            <div className="grid gap-1">
    20	              {title && <ToastTitle>{title}</ToastTitle>}
    21	              {description && (
    22	                <ToastDescription>{description}</ToastDescription>
    23	              )}
    24	            </div>
    25	            {action}
    26	            <ToastClose />
    27	          </Toast>
    28	        )
    29	      })}
    30	      <ToastViewport />
    31	    </ToastProvider>
    32	  )
    33	}

========== FILE: ./src/components/ui/toast.tsx ==========

     1	import * as React from "react"
     2	import * as ToastPrimitives from "@radix-ui/react-toast"
     3	import { cva, type VariantProps } from "class-variance-authority"
     4	import { X } from "lucide-react"
     5	
     6	import { cn } from "@/lib/utils"
     7	
     8	const ToastProvider = ToastPrimitives.Provider
     9	
    10	const ToastViewport = React.forwardRef<
    11	  React.ElementRef<typeof ToastPrimitives.Viewport>,
    12	  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>
    13	>(({ className, ...props }, ref) => (
    14	  <ToastPrimitives.Viewport
    15	    ref={ref}
    16	    className={cn(
    17	      "fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]",
    18	      className
    19	    )}
    20	    {...props}
    21	  />
    22	))
    23	ToastViewport.displayName = ToastPrimitives.Viewport.displayName
    24	
    25	const toastVariants = cva(
    26	  "group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full",
    27	  {
    28	    variants: {
    29	      variant: {
    30	        default: "border bg-background text-foreground",
    31	        destructive:
    32	          "destructive group border-destructive bg-destructive text-destructive-foreground",
    33	      },
    34	    },
    35	    defaultVariants: {
    36	      variant: "default",
    37	    },
    38	  }
    39	)
    40	
    41	const Toast = React.forwardRef<
    42	  React.ElementRef<typeof ToastPrimitives.Root>,
    43	  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &
    44	    VariantProps<typeof toastVariants>
    45	>(({ className, variant, ...props }, ref) => {
    46	  return (
    47	    <ToastPrimitives.Root
    48	      ref={ref}
    49	      className={cn(toastVariants({ variant }), className)}
    50	      {...props}
    51	    />
    52	  )
    53	})
    54	Toast.displayName = ToastPrimitives.Root.displayName
    55	
    56	const ToastAction = React.forwardRef<
    57	  React.ElementRef<typeof ToastPrimitives.Action>,
    58	  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>
    59	>(({ className, ...props }, ref) => (
    60	  <ToastPrimitives.Action
    61	    ref={ref}
    62	    className={cn(
    63	      "inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive",
    64	      className
    65	    )}
    66	    {...props}
    67	  />
    68	))
    69	ToastAction.displayName = ToastPrimitives.Action.displayName
    70	
    71	const ToastClose = React.forwardRef<
    72	  React.ElementRef<typeof ToastPrimitives.Close>,
    73	  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>
    74	>(({ className, ...props }, ref) => (
    75	  <ToastPrimitives.Close
    76	    ref={ref}
    77	    className={cn(
    78	      "absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600",
    79	      className
    80	    )}
    81	    toast-close=""
    82	    {...props}
    83	  >
    84	    <X className="h-4 w-4" />
    85	  </ToastPrimitives.Close>
    86	))
    87	ToastClose.displayName = ToastPrimitives.Close.displayName
    88	
    89	const ToastTitle = React.forwardRef<
    90	  React.ElementRef<typeof ToastPrimitives.Title>,
    91	  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>
    92	>(({ className, ...props }, ref) => (
    93	  <ToastPrimitives.Title
    94	    ref={ref}
    95	    className={cn("text-sm font-semibold", className)}
    96	    {...props}
    97	  />
    98	))
    99	ToastTitle.displayName = ToastPrimitives.Title.displayName
   100	
   101	const ToastDescription = React.forwardRef<
   102	  React.ElementRef<typeof ToastPrimitives.Description>,
   103	  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>
   104	>(({ className, ...props }, ref) => (
   105	  <ToastPrimitives.Description
   106	    ref={ref}
   107	    className={cn("text-sm opacity-90", className)}
   108	    {...props}
   109	  />
   110	))
   111	ToastDescription.displayName = ToastPrimitives.Description.displayName
   112	
   113	type ToastProps = React.ComponentPropsWithoutRef<typeof Toast>
   114	
   115	type ToastActionElement = React.ReactElement<typeof ToastAction>
   116	
   117	export {
   118	  type ToastProps,
   119	  type ToastActionElement,
   120	  ToastProvider,
   121	  ToastViewport,
   122	  Toast,
   123	  ToastTitle,
   124	  ToastDescription,
   125	  ToastClose,
   126	  ToastAction,
   127	}

========== FILE: ./src/components/ui/toggle-group.tsx ==========

     1	import * as React from "react"
     2	import * as ToggleGroupPrimitive from "@radix-ui/react-toggle-group"
     3	import { type VariantProps } from "class-variance-authority"
     4	
     5	import { cn } from "@/lib/utils"
     6	import { toggleVariants } from "@/components/ui/toggle"
     7	
     8	const ToggleGroupContext = React.createContext<
     9	  VariantProps<typeof toggleVariants>
    10	>({
    11	  size: "default",
    12	  variant: "default",
    13	})
    14	
    15	const ToggleGroup = React.forwardRef<
    16	  React.ElementRef<typeof ToggleGroupPrimitive.Root>,
    17	  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &
    18	    VariantProps<typeof toggleVariants>
    19	>(({ className, variant, size, children, ...props }, ref) => (
    20	  <ToggleGroupPrimitive.Root
    21	    ref={ref}
    22	    className={cn("flex items-center justify-center gap-1", className)}
    23	    {...props}
    24	  >
    25	    <ToggleGroupContext.Provider value={{ variant, size }}>
    26	      {children}
    27	    </ToggleGroupContext.Provider>
    28	  </ToggleGroupPrimitive.Root>
    29	))
    30	
    31	ToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName
    32	
    33	const ToggleGroupItem = React.forwardRef<
    34	  React.ElementRef<typeof ToggleGroupPrimitive.Item>,
    35	  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &
    36	    VariantProps<typeof toggleVariants>
    37	>(({ className, children, variant, size, ...props }, ref) => {
    38	  const context = React.useContext(ToggleGroupContext)
    39	
    40	  return (
    41	    <ToggleGroupPrimitive.Item
    42	      ref={ref}
    43	      className={cn(
    44	        toggleVariants({
    45	          variant: context.variant || variant,
    46	          size: context.size || size,
    47	        }),
    48	        className
    49	      )}
    50	      {...props}
    51	    >
    52	      {children}
    53	    </ToggleGroupPrimitive.Item>
    54	  )
    55	})
    56	
    57	ToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName
    58	
    59	export { ToggleGroup, ToggleGroupItem }

========== FILE: ./src/components/ui/toggle.tsx ==========

     1	import * as React from "react"
     2	import * as TogglePrimitive from "@radix-ui/react-toggle"
     3	import { cva, type VariantProps } from "class-variance-authority"
     4	
     5	import { cn } from "@/lib/utils"
     6	
     7	const toggleVariants = cva(
     8	  "inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground",
     9	  {
    10	    variants: {
    11	      variant: {
    12	        default: "bg-transparent",
    13	        outline:
    14	          "border border-input bg-transparent hover:bg-accent hover:text-accent-foreground",
    15	      },
    16	      size: {
    17	        default: "h-10 px-3",
    18	        sm: "h-9 px-2.5",
    19	        lg: "h-11 px-5",
    20	      },
    21	    },
    22	    defaultVariants: {
    23	      variant: "default",
    24	      size: "default",
    25	    },
    26	  }
    27	)
    28	
    29	const Toggle = React.forwardRef<
    30	  React.ElementRef<typeof TogglePrimitive.Root>,
    31	  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &
    32	    VariantProps<typeof toggleVariants>
    33	>(({ className, variant, size, ...props }, ref) => (
    34	  <TogglePrimitive.Root
    35	    ref={ref}
    36	    className={cn(toggleVariants({ variant, size, className }))}
    37	    {...props}
    38	  />
    39	))
    40	
    41	Toggle.displayName = TogglePrimitive.Root.displayName
    42	
    43	export { Toggle, toggleVariants }

========== FILE: ./src/components/ui/tooltip.tsx ==========

     1	import * as React from "react"
     2	import * as TooltipPrimitive from "@radix-ui/react-tooltip"
     3	
     4	import { cn } from "@/lib/utils"
     5	
     6	const TooltipProvider = TooltipPrimitive.Provider
     7	
     8	const Tooltip = TooltipPrimitive.Root
     9	
    10	const TooltipTrigger = TooltipPrimitive.Trigger
    11	
    12	const TooltipContent = React.forwardRef<
    13	  React.ElementRef<typeof TooltipPrimitive.Content>,
    14	  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>
    15	>(({ className, sideOffset = 4, ...props }, ref) => (
    16	  <TooltipPrimitive.Content
    17	    ref={ref}
    18	    sideOffset={sideOffset}
    19	    className={cn(
    20	      "z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
    21	      className
    22	    )}
    23	    {...props}
    24	  />
    25	))
    26	TooltipContent.displayName = TooltipPrimitive.Content.displayName
    27	
    28	export { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }

========== FILE: ./src/components/ui/use-toast.ts ==========

     1	import { useToast, toast } from "@/hooks/use-toast";
     2	
     3	export { useToast, toast };

========== FILE: ./src/hooks/useConversations.ts ==========

     1	import { useEffect, useState } from 'react';
     2	import { supabase } from '@/lib/supabase';
     3	
     4	export function useConversations() {
     5	    const [items, setItems] = useState<any[]>([]);
     6	    const [loading, setLoading] = useState(true);
     7	
     8	    async function refresh() {
     9	        setLoading(true);
    10	        const { data, error } = await supabase
    11	            .from('conversations')
    12	            .select('*')
    13	            .eq('archived', false)
    14	            .order('updated_at', { ascending: false });
    15	
    16	        if (!error && data) setItems(data);
    17	        setLoading(false);
    18	    }
    19	
    20	    useEffect(() => {
    21	        refresh();
    22	
    23	        // realtime updates
    24	        const ch = supabase
    25	            .channel('conv-updates')
    26	            .on(
    27	                'postgres_changes',
    28	                { event: '*', schema: 'public', table: 'conversations' },
    29	                () => refresh()
    30	            )
    31	            .subscribe();
    32	
    33	        return () => {
    34	            supabase.removeChannel(ch);
    35	        };
    36	    }, []);
    37	
    38	    return { items, loading, refresh };
    39	}

========== FILE: ./src/hooks/useIsAdmin.ts ==========

     1	import { useEffect, useState } from 'react';
     2	import { supabase } from '@/lib/supabase';
     3	
     4	export function useIsAdmin() {
     5	    const [isAdmin, setIsAdmin] = useState<boolean | null>(null);
     6	
     7	    useEffect(() => {
     8	        let mounted = true;
     9	        (async () => {
    10	            const { data: auth } = await supabase.auth.getUser();
    11	            const uid = auth.user?.id;
    12	            if (!uid) {
    13	                if (mounted) setIsAdmin(false);
    14	                return;
    15	            }
    16	            const { data, error } = await supabase
    17	                .from('profiles')
    18	                .select('is_admin')
    19	                .eq('id', uid)
    20	                .maybeSingle();
    21	            if (mounted) setIsAdmin(!!data?.is_admin && !error);
    22	        })();
    23	        return () => { mounted = false; };
    24	    }, []);
    25	
    26	    return isAdmin; // null = loading
    27	}

========== FILE: ./src/hooks/useMessages.ts ==========

     1	import { useEffect, useState } from 'react';
     2	import { supabase } from '@/lib/supabase';
     3	
     4	export function useMessages(conversationId?: string) {
     5	    const [items, setItems] = useState<any[]>([]);
     6	    const [loading, setLoading] = useState(false);
     7	
     8	    async function refresh(id = conversationId) {
     9	        if (!id) {
    10	            setItems([]);
    11	            return;
    12	        }        setLoading(true);
    13	        const { data, error } = await supabase
    14	            .from('messages')
    15	            .select('*')
    16	            .eq('conversation_id', id)
    17	            .order('created_at', { ascending: true });
    18	
    19	        if (!error && data) setItems(data);
    20	        setLoading(false);
    21	    }
    22	
    23	    useEffect(() => {
    24	        if (!conversationId) {
    25	            setItems([]);
    26	            return;
    27	        }
    28	        refresh(conversationId);
    29	        const ch = supabase
    30	            .channel(`msg-${conversationId}`)
    31	            .on(
    32	                'postgres_changes',
    33	                {
    34	                    event: '*',
    35	                    schema: 'public',
    36	                    table: 'messages',
    37	                    filter: `conversation_id=eq.${conversationId}`,
    38	                },
    39	                () => refresh()
    40	            )
    41	            .subscribe();
    42	
    43	        return () => {
    44	            supabase.removeChannel(ch);
    45	        };
    46	    }, [conversationId]);
    47	
    48	    return { items, loading, refresh };
    49	}

========== FILE: ./src/hooks/use-mobile.tsx ==========

     1	import * as React from "react"
     2	
     3	const MOBILE_BREAKPOINT = 768
     4	
     5	export function useIsMobile() {
     6	  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)
     7	
     8	  React.useEffect(() => {
     9	    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)
    10	    const onChange = () => {
    11	      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
    12	    }
    13	    mql.addEventListener("change", onChange)
    14	    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
    15	    return () => mql.removeEventListener("change", onChange)
    16	  }, [])
    17	
    18	  return !!isMobile
    19	}

========== FILE: ./src/hooks/useSession.ts ==========

     1	import { useEffect, useState } from 'react'
     2	import { Session } from '@supabase/supabase-js'
     3	import { supabase } from '@/lib/supabase'
     4	
     5	export function useSession() {
     6	    const [session, setSession] = useState<Session | null>(null)
     7	    const [loading, setLoading] = useState(true)
     8	
     9	    useEffect(() => {
    10	        supabase.auth.getSession().then(({ data }) => {
    11	            setSession(data.session ?? null)
    12	            setLoading(false)
    13	        })
    14	        const { data: sub } = supabase.auth.onAuthStateChange((_e, s) => {
    15	            setSession(s)
    16	        })
    17	        return () => sub.subscription.unsubscribe()
    18	    }, [])
    19	
    20	    return { session, loading }
    21	}

========== FILE: ./src/hooks/useStreamedChat.ts ==========

     1	import { useState, useRef, useCallback } from 'react';
     2	import { saveChat } from '@/lib/api';
     3	
     4	export type ChatMessage = {
     5	    id: string;
     6	    role: 'system' | 'user' | 'assistant';
     7	    content: string;
     8	    created_at: string;
     9	};
    10	
    11	type SendableMsg = { role: 'system' | 'user' | 'assistant'; content: string };
    12	
    13	type UseStreamedChatOpts = {
    14	    conversationId?: string;
    15	    onNewConversation?: (id: string) => void;
    16	    getRecentMessages?: () => ChatMessage[]; // provide last N messages for context
    17	};
    18	
    19	/* --- STRIPPING + GATING HELPERS --- */
    20	
    21	// Remove any chain-of-thought / analysis / fenced think blocks
    22	function stripReasoningAll(s: string): string {
    23	    if (!s) return s;
    24	
    25	    // Remove DeepSeek tags
    26	    s = s.replace(/<think>[\s\S]*?<\/think>/gi, '');
    27	
    28	    // Remove "pipe" style
    29	    s = s.replace(/<\|think\|>[\s\S]*?(?=<\|assistant\|>)/gi, '');
    30	
    31	    // Remove fenced code blocks labeled think/reasoning/analysis
    32	    s = s.replace(/```(?:think|thinking|reasoning|analysis)[\s\S]*?```/gi, '');
    33	
    34	    // Remove obvious “analysis:” style prefixes up to the next blank line
    35	    s = s.replace(/^\s*(analysis|reasoning|thoughts?|scratch(?:pad)?):[\s\S]*?(?:\n\s*\n|$)/gim, '');
    36	
    37	    // If the model emits "Final answer:" keep only what follows it
    38	    const fa = s.match(/final answer\s*:\s*/i);
    39	    if (fa) {
    40	        const idx = (fa.index ?? -1) + fa[0].length;
    41	        if (idx > -1) s = s.slice(idx);
    42	    }
    43	
    44	    // Minor cleanups
    45	    s = s.replace(/^(assistant|answer)\s*:\s*/i, '');
    46	    return s.trim();
    47	}
    48	
    49	// During streaming, don't render *anything* until we know the
    50	// "thinking" phase is over. These markers flip the gate:
    51	function detectAnswerStart(bufferLower: string): number {
    52	    // </think>
    53	    const t1 = bufferLower.lastIndexOf('</think>');
    54	    if (t1 !== -1) return t1 + '</think>'.length;
    55	
    56	    // <|assistant|>  (after <|think|>)
    57	    const t2 = bufferLower.lastIndexOf('<|assistant|>');
    58	    if (t2 !== -1) return t2 + '<|assistant|>'.length;
    59	
    60	    // ``` (closing a fenced think block)
    61	    // only consider if we've seen ```think earlier
    62	    const hasFenceStart = /```think|```thinking|```reasoning|```analysis/i.test(bufferLower);
    63	    const lastFenceClose = bufferLower.lastIndexOf('```');
    64	    if (hasFenceStart && lastFenceClose !== -1) return lastFenceClose + 3;
    65	
    66	    // "Final answer:" pattern
    67	    const fa = bufferLower.lastIndexOf('final answer:');
    68	    if (fa !== -1) return fa + 'final answer:'.length;
    69	
    70	    // Otherwise unknown yet
    71	    return -1;
    72	}
    73	
    74	/* --- STREAM FUNCTION (talks to /api/ai-stream) --- */
    75	async function streamChat({
    76	                              messages,
    77	                              maxTokens,
    78	                              web,
    79	                              onDelta,
    80	                              onDone,
    81	                              onError,
    82	                              signal,
    83	                          }: {
    84	    messages: SendableMsg[];
    85	    maxTokens: number;
    86	    web?: boolean;
    87	    onDelta: (chunk: string) => void;
    88	    onDone: (full: string) => void;
    89	    onError: (e: unknown) => void;
    90	    signal: AbortSignal;
    91	}) {
    92	    try {
    93	        const res = await fetch('/api/ai-stream', {
    94	            method: 'POST',
    95	            headers: { 'Content-Type': 'application/json' },
    96	            body: JSON.stringify({
    97	                model: 'deepseek-ai/DeepSeek-R1-Distill-Qwen-14B',
    98	                temperature: 0.3,
    99	                max_tokens: maxTokens,
   100	                messages,
   101	                web,
   102	            }),
   103	            signal,
   104	        });
   105	
   106	        if (!res.ok || !res.body) throw new Error(`HTTP ${res.status}`);
   107	
   108	        const reader = res.body.getReader();
   109	        const decoder = new TextDecoder('utf-8');
   110	        let buffer = '';
   111	        let full = '';
   112	
   113	        while (true) {
   114	            const { value, done } = await reader.read();
   115	            if (done) break;
   116	
   117	            buffer += decoder.decode(value, { stream: true });
   118	            const parts = buffer.split('\n\n');
   119	            buffer = parts.pop() || '';
   120	
   121	            for (const part of parts) {
   122	                const line = part.split('\n').find((l) => l.startsWith('data:'));
   123	                if (!line) continue;
   124	                const payload = line.slice(5).trim();
   125	                if (payload === '[DONE]') {
   126	                    onDone(full);
   127	                    return;
   128	                }
   129	                try {
   130	                    const json = JSON.parse(payload);
   131	                    const delta =
   132	                        json?.choices?.[0]?.delta?.content ??
   133	                        json?.choices?.[0]?.message?.content ??
   134	                        '';
   135	                    if (delta) {
   136	                        full += delta;
   137	                        onDelta(delta);
   138	                    }
   139	                } catch {
   140	                    // ignore keepalive/comments
   141	                }
   142	            }
   143	        }
   144	
   145	        onDone(full);
   146	    } catch (e) {
   147	        onError(e);
   148	    }
   149	}
   150	
   151	/* --- HOOK --- */
   152	export function useStreamedChat(opts: UseStreamedChatOpts = {}) {
   153	    const { conversationId, onNewConversation, getRecentMessages } = opts;
   154	
   155	    const [streamText, setStreamText] = useState('');
   156	    const [isThinking, setIsThinking] = useState(false);
   157	
   158	    // Gate state
   159	    const rawRef = useRef('');              // entire raw stream so far
   160	    const shownUntilRef = useRef(0);        // end index of what was flushed to UI
   161	    const answerStartedRef = useRef(false); // flips once we detect answer
   162	    const guardTimerRef = useRef<number | null>(null);
   163	    const controllerRef = useRef<AbortController | null>(null);
   164	
   165	    const onSend = useCallback(
   166	        async (text: string, opts?: { web?: boolean }) => {
   167	            const trimmed = text.trim();
   168	            if (!trimmed) return;
   169	
   170	            setStreamText('');
   171	            setIsThinking(true);
   172	
   173	            // reset gate
   174	            rawRef.current = '';
   175	            shownUntilRef.current = 0;
   176	            answerStartedRef.current = false;
   177	            if (guardTimerRef.current) {
   178	                window.clearTimeout(guardTimerRef.current);
   179	                guardTimerRef.current = null;
   180	            }
   181	
   182	            const controller = new AbortController();
   183	            controllerRef.current = controller;
   184	
   185	            const recent = getRecentMessages?.() ?? [];
   186	            const context: SendableMsg[] = [
   187	                { role: 'system', content: 'You are VAVUS AI. Be concise, actionable, and accurate.' },
   188	                ...recent.slice(-6).map((m) => ({ role: m.role, content: m.content })),
   189	                { role: 'user', content: trimmed },
   190	            ];
   191	
   192	            // If the model never marks end-of-think, show something after a short guard
   193	            const GUARD_MS = 1200;
   194	            guardTimerRef.current = window.setTimeout(() => {
   195	                if (!answerStartedRef.current && rawRef.current) {
   196	                    // fall back: strip everything we have and start showing it
   197	                    answerStartedRef.current = true;
   198	                    const cleaned = stripReasoningAll(rawRef.current);
   199	                    setStreamText(cleaned);
   200	                    shownUntilRef.current = rawRef.current.length;
   201	                    setIsThinking(false);
   202	                }
   203	            }, GUARD_MS) as unknown as number;
   204	
   205	            await streamChat({
   206	                messages: context,
   207	                maxTokens: 1024,
   208	                web: opts?.web,
   209	                signal: controller.signal,
   210	                onDelta: (chunk) => {
   211	                    rawRef.current += chunk;
   212	
   213	                    if (!answerStartedRef.current) {
   214	                        const lower = rawRef.current.toLowerCase();
   215	                        const startAt = detectAnswerStart(lower);
   216	                        if (startAt !== -1) {
   217	                            answerStartedRef.current = true;
   218	                            const tail = rawRef.current.slice(startAt);
   219	                            const cleaned = stripReasoningAll(tail);
   220	                            if (cleaned) setStreamText((prev) => prev + cleaned);
   221	                            shownUntilRef.current = rawRef.current.length;
   222	                            if (guardTimerRef.current) {
   223	                                window.clearTimeout(guardTimerRef.current);
   224	                                guardTimerRef.current = null;
   225	                            }
   226	                            setIsThinking(false);
   227	                            return;
   228	                        }
   229	                        // still thinking → show nothing (spinner stays on)
   230	                        return;
   231	                    }
   232	
   233	                    // Once answer started, append only the newly arrived portion, cleaned
   234	                    const newPortion = rawRef.current.slice(shownUntilRef.current);
   235	                    const cleaned = stripReasoningAll(newPortion);
   236	                    if (cleaned) setStreamText((prev) => prev + cleaned);
   237	                    shownUntilRef.current = rawRef.current.length;
   238	                },
   239	                onDone: async (full) => {
   240	                    if (guardTimerRef.current) {
   241	                        window.clearTimeout(guardTimerRef.current);
   242	                        guardTimerRef.current = null;
   243	                    }
   244	                    setIsThinking(false);
   245	                    const finalClean = stripReasoningAll(full);
   246	                    setStreamText(finalClean);
   247	
   248	                    // persist
   249	                    try {
   250	                        const res = await saveChat({
   251	                            conversationId,
   252	                            message: trimmed,
   253	                            assistantText: finalClean,
   254	                        });
   255	                        const newId: string | undefined = (res as any)?.conversationId || conversationId;
   256	                        onNewConversation?.(newId as string);
   257	                    } catch {
   258	                        // ignore save errors here (UI stays responsive)
   259	                    }
   260	                },
   261	                onError: () => {
   262	                    if (guardTimerRef.current) {
   263	                        window.clearTimeout(guardTimerRef.current);
   264	                        guardTimerRef.current = null;
   265	                    }
   266	                    setIsThinking(false);
   267	                },
   268	            });
   269	
   270	            controllerRef.current = null;
   271	        },
   272	        [conversationId, onNewConversation, getRecentMessages]
   273	    );
   274	
   275	    const onStop = useCallback(() => {
   276	        controllerRef.current?.abort();
   277	        setIsThinking(false);
   278	    }, []);
   279	
   280	    return {
   281	        isThinking,
   282	        streamText,
   283	        onSend,
   284	        onStop,
   285	    };
   286	}

========== FILE: ./src/hooks/use-toast.ts ==========

     1	import * as React from "react"
     2	
     3	import type {
     4	  ToastActionElement,
     5	  ToastProps,
     6	} from "@/components/ui/toast"
     7	
     8	const TOAST_LIMIT = 1
     9	const TOAST_REMOVE_DELAY = 1000000
    10	
    11	type ToasterToast = ToastProps & {
    12	  id: string
    13	  title?: React.ReactNode
    14	  description?: React.ReactNode
    15	  action?: ToastActionElement
    16	}
    17	
    18	const actionTypes = {
    19	  ADD_TOAST: "ADD_TOAST",
    20	  UPDATE_TOAST: "UPDATE_TOAST",
    21	  DISMISS_TOAST: "DISMISS_TOAST",
    22	  REMOVE_TOAST: "REMOVE_TOAST",
    23	} as const
    24	
    25	let count = 0
    26	
    27	function genId() {
    28	  count = (count + 1) % Number.MAX_SAFE_INTEGER
    29	  return count.toString()
    30	}
    31	
    32	type ActionType = typeof actionTypes
    33	
    34	type Action =
    35	  | {
    36	      type: ActionType["ADD_TOAST"]
    37	      toast: ToasterToast
    38	    }
    39	  | {
    40	      type: ActionType["UPDATE_TOAST"]
    41	      toast: Partial<ToasterToast>
    42	    }
    43	  | {
    44	      type: ActionType["DISMISS_TOAST"]
    45	      toastId?: ToasterToast["id"]
    46	    }
    47	  | {
    48	      type: ActionType["REMOVE_TOAST"]
    49	      toastId?: ToasterToast["id"]
    50	    }
    51	
    52	interface State {
    53	  toasts: ToasterToast[]
    54	}
    55	
    56	const toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()
    57	
    58	const addToRemoveQueue = (toastId: string) => {
    59	  if (toastTimeouts.has(toastId)) {
    60	    return
    61	  }
    62	
    63	  const timeout = setTimeout(() => {
    64	    toastTimeouts.delete(toastId)
    65	    dispatch({
    66	      type: "REMOVE_TOAST",
    67	      toastId: toastId,
    68	    })
    69	  }, TOAST_REMOVE_DELAY)
    70	
    71	  toastTimeouts.set(toastId, timeout)
    72	}
    73	
    74	export const reducer = (state: State, action: Action): State => {
    75	  switch (action.type) {
    76	    case "ADD_TOAST":
    77	      return {
    78	        ...state,
    79	        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),
    80	      }
    81	
    82	    case "UPDATE_TOAST":
    83	      return {
    84	        ...state,
    85	        toasts: state.toasts.map((t) =>
    86	          t.id === action.toast.id ? { ...t, ...action.toast } : t
    87	        ),
    88	      }
    89	
    90	    case "DISMISS_TOAST": {
    91	      const { toastId } = action
    92	
    93	      // ! Side effects ! - This could be extracted into a dismissToast() action,
    94	      // but I'll keep it here for simplicity
    95	      if (toastId) {
    96	        addToRemoveQueue(toastId)
    97	      } else {
    98	        state.toasts.forEach((toast) => {
    99	          addToRemoveQueue(toast.id)
   100	        })
   101	      }
   102	
   103	      return {
   104	        ...state,
   105	        toasts: state.toasts.map((t) =>
   106	          t.id === toastId || toastId === undefined
   107	            ? {
   108	                ...t,
   109	                open: false,
   110	              }
   111	            : t
   112	        ),
   113	      }
   114	    }
   115	    case "REMOVE_TOAST":
   116	      if (action.toastId === undefined) {
   117	        return {
   118	          ...state,
   119	          toasts: [],
   120	        }
   121	      }
   122	      return {
   123	        ...state,
   124	        toasts: state.toasts.filter((t) => t.id !== action.toastId),
   125	      }
   126	  }
   127	}
   128	
   129	const listeners: Array<(state: State) => void> = []
   130	
   131	let memoryState: State = { toasts: [] }
   132	
   133	function dispatch(action: Action) {
   134	  memoryState = reducer(memoryState, action)
   135	  listeners.forEach((listener) => {
   136	    listener(memoryState)
   137	  })
   138	}
   139	
   140	type Toast = Omit<ToasterToast, "id">
   141	
   142	function toast({ ...props }: Toast) {
   143	  const id = genId()
   144	
   145	  const update = (props: ToasterToast) =>
   146	    dispatch({
   147	      type: "UPDATE_TOAST",
   148	      toast: { ...props, id },
   149	    })
   150	  const dismiss = () => dispatch({ type: "DISMISS_TOAST", toastId: id })
   151	
   152	  dispatch({
   153	    type: "ADD_TOAST",
   154	    toast: {
   155	      ...props,
   156	      id,
   157	      open: true,
   158	      onOpenChange: (open) => {
   159	        if (!open) dismiss()
   160	      },
   161	    },
   162	  })
   163	
   164	  return {
   165	    id: id,
   166	    dismiss,
   167	    update,
   168	  }
   169	}
   170	
   171	function useToast() {
   172	  const [state, setState] = React.useState<State>(memoryState)
   173	
   174	  React.useEffect(() => {
   175	    listeners.push(setState)
   176	    return () => {
   177	      const index = listeners.indexOf(setState)
   178	      if (index > -1) {
   179	        listeners.splice(index, 1)
   180	      }
   181	    }
   182	  }, [state])
   183	
   184	  return {
   185	    ...state,
   186	    toast,
   187	    dismiss: (toastId?: string) => dispatch({ type: "DISMISS_TOAST", toastId }),
   188	  }
   189	}
   190	
   191	export { useToast, toast }

========== FILE: ./src/hooks/useTranslate.ts ==========

     1	// /src/hooks/useTranslate.ts
     2	import { useState, useCallback } from 'react';
     3	
     4	export function useTranslate() {
     5	    const [loading, setLoading] = useState(false);
     6	    const [error, setError]   = useState<string | null>(null);
     7	
     8	    const translate = useCallback(async (opts: { text: string; source: string; target: string }) => {
     9	        setLoading(true); setError(null);
    10	        try {
    11	            const res = await fetch('/api/translate', {
    12	                method: 'POST',
    13	                headers: { 'Content-Type': 'application/json' },
    14	                body: JSON.stringify(opts),
    15	            });
    16	            if (!res.ok) {
    17	                const j = await res.json().catch(() => ({}));
    18	                throw new Error(j.error || 'Translation failed');
    19	            }
    20	            const j = await res.json();
    21	            return j.translation as string;
    22	        } catch (e: any) {
    23	            setError(e?.message || 'Translation failed');
    24	            throw e;
    25	        } finally {
    26	            setLoading(false);
    27	        }
    28	    }, []);
    29	
    30	    return { translate, loading, error };
    31	}

========== FILE: ./src/lib/api.ts ==========

     1	import { supabase } from './supabase';
     2	
     3	async function getAccessToken() {
     4	    const { data } = await supabase.auth.getSession();
     5	    const token = data.session?.access_token;
     6	    if (!token) throw new Error('Not signed in');
     7	    return token;
     8	}
     9	
    10	export async function sendChat({ conversationId, message, model }:
    11	                               { conversationId?: string; message: string; model?: string; }) {
    12	    const token = await getAccessToken();
    13	    const r = await fetch('/api/ai', {
    14	        method: 'POST',
    15	        headers: {
    16	            'Content-Type': 'application/json',
    17	            Authorization: `Bearer ${token}`
    18	        },
    19	        body: JSON.stringify({ conversationId, message, model })
    20	    });
    21	    if (!r.ok) throw new Error(await r.text());
    22	    return r.json() as Promise<{ conversationId: string; reply: string }>;
    23	}
    24	export async function saveChat({ conversationId, message, assistantText, mode, longMode, useInternet, usePersona, useWorkspace }:
    25	                               { conversationId?: string; message: string; assistantText: string; mode?: string; longMode?: boolean; useInternet?: boolean; usePersona?: boolean; useWorkspace?: boolean; }) {
    26	    const token = await getAccessToken();
    27	    const r = await fetch('/api/ai', {
    28	        method: 'POST',
    29	        headers: {
    30	            'Content-Type': 'application/json',
    31	            Authorization: `Bearer ${token}`
    32	        },
    33	        body: JSON.stringify({ conversationId, message, assistantText, mode, longMode, useInternet, usePersona, useWorkspace })
    34	    });
    35	    if (!r.ok) throw new Error(await r.text());
    36	    return r.json() as Promise<{ conversationId: string }>;
    37	}
    38	
    39	export async function translateText({ text, sourceLang, targetLang, model }:
    40	                                    { text: string; sourceLang?: string; targetLang?: string; model?: string; }) {
    41	    const token = await getAccessToken();
    42	    const r = await fetch('/api/translate', {
    43	        method: 'POST',
    44	        headers: {
    45	            'Content-Type': 'application/json',
    46	            Authorization: `Bearer ${token}`
    47	        },
    48	        body: JSON.stringify({ text, sourceLang, targetLang, model })
    49	    });
    50	    if (!r.ok) throw new Error(await r.text());
    51	    return r.json() as Promise<{ output: string }>;
    52	}
    53	
    54	export async function updateConversationTitle(conversationId: string, title: string) {
    55	    const { error } = await supabase
    56	        .from('conversations')
    57	        .update({ title })
    58	        .eq('id', conversationId);
    59	    if (error) throw new Error(error.message);
    60	}

========== FILE: ./src/lib/languages/madlad.ts ==========

     1	// /src/lib/languages/madlad.ts
     2	// MADLAD language registry (seed list + open tag support)
     3	// Sources for coverage: NeurIPS/ArXiv paper + HF model card. See docs links below.
     4	
     5	export type Lang = {
     6	    code: string;      // BCP-47 (prefer ISO 639-1; fall back to 639-3 or subtags when needed)
     7	    name: string;      // English label
     8	    native?: string;   // Optional native label
     9	};
    10	
    11	export const AUTO_CODE = "auto";
    12	
    13	// --- Seed list ---
    14	// NOTE: This is a curated starter set for UX. The API layer below ALSO accepts any BCP-47 tag.
    15	// You can keep expanding this list or load the full set via the loader at the bottom.
    16	export const MADLAD_LANGUAGES: Lang[] = [
    17	    { code: AUTO_CODE, name: "Auto-detect" },
    18	
    19	    // Europe (core)
    20	    { code: "en", name: "English" },
    21	    { code: "ro", name: "Romanian", native: "Română" },
    22	    { code: "es", name: "Spanish", native: "Español" },
    23	    { code: "fr", name: "French", native: "Français" },
    24	    { code: "de", name: "German", native: "Deutsch" },
    25	    { code: "it", name: "Italian", native: "Italiano" },
    26	    { code: "pt", name: "Portuguese", native: "Português" },
    27	    { code: "nl", name: "Dutch", native: "Nederlands" },
    28	    { code: "pl", name: "Polish", native: "Polski" },
    29	    { code: "uk", name: "Ukrainian", native: "Українська" },
    30	    { code: "ru", name: "Russian", native: "Русский" },
    31	    { code: "tr", name: "Turkish", native: "Türkçe" },
    32	    { code: "el", name: "Greek", native: "Ελληνικά" },
    33	    { code: "sv", name: "Swedish", native: "Svenska" },
    34	    { code: "no", name: "Norwegian", native: "Norsk" },
    35	    { code: "da", name: "Danish", native: "Dansk" },
    36	    { code: "fi", name: "Finnish", native: "Suomi" },
    37	    { code: "cs", name: "Czech", native: "Čeština" },
    38	    { code: "sk", name: "Slovak", native: "Slovenčina" },
    39	    { code: "hu", name: "Hungarian", native: "Magyar" },
    40	    { code: "bg", name: "Bulgarian", native: "Български" },
    41	    { code: "sr", name: "Serbian", native: "Српски" },
    42	    { code: "hr", name: "Croatian", native: "Hrvatski" },
    43	    { code: "sl", name: "Slovenian", native: "Slovenščina" },
    44	    { code: "lt", name: "Lithuanian", native: "Lietuvių" },
    45	    { code: "lv", name: "Latvian", native: "Latviešu" },
    46	    { code: "et", name: "Estonian", native: "Eesti" },
    47	
    48	    // Middle East / North Africa
    49	    { code: "ar", name: "Arabic", native: "العربية" },
    50	    { code: "fa", name: "Persian (Farsi)", native: "فارسی" },
    51	    { code: "he", name: "Hebrew", native: "עברית" },
    52	    { code: "ku", name: "Kurdish (Kurmanji/Sorani)" },
    53	
    54	    // Africa (selection)
    55	    { code: "sw", name: "Swahili", native: "Kiswahili" },
    56	    { code: "am", name: "Amharic", native: "አማርኛ" },
    57	    { code: "ha", name: "Hausa" },
    58	    { code: "ig", name: "Igbo" },
    59	    { code: "yo", name: "Yoruba" },
    60	    { code: "zu", name: "Zulu", native: "isiZulu" },
    61	    { code: "xh", name: "Xhosa", native: "isiXhosa" },
    62	    { code: "st", name: "Sesotho" },
    63	    { code: "tn", name: "Tswana" },
    64	    { code: "rw", name: "Kinyarwanda" },
    65	    { code: "sn", name: "Shona" },
    66	    { code: "so", name: "Somali", native: "Soomaali" },
    67	    { code: "ts", name: "Tsonga" },
    68	
    69	    // South & Southeast Asia
    70	    { code: "hi", name: "Hindi", native: "हिन्दी" },
    71	    { code: "bn", name: "Bengali", native: "বাংলা" },
    72	    { code: "ur", name: "Urdu", native: "اردو" },
    73	    { code: "pa", name: "Punjabi", native: "ਪੰਜਾਬੀ" },
    74	    { code: "ta", name: "Tamil", native: "தமிழ்" },
    75	    { code: "te", name: "Telugu", native: "తెలుగు" },
    76	    { code: "mr", name: "Marathi", native: "मराठी" },
    77	    { code: "gu", name: "Gujarati", native: "ગુજરાતી" },
    78	    { code: "kn", name: "Kannada", native: "ಕನ್ನಡ" },
    79	    { code: "ml", name: "Malayalam", native: "മലയാളം" },
    80	    { code: "si", name: "Sinhala", native: "සිංහල" },
    81	    { code: "ne", name: "Nepali", native: "नेपाली" },
    82	    { code: "km", name: "Khmer", native: "ភាសាខ្មែរ" },
    83	    { code: "lo", name: "Lao", native: "ລາວ" },
    84	    { code: "my", name: "Burmese", native: "မြန်မာ" },
    85	    { code: "th", name: "Thai", native: "ไทย" },
    86	    { code: "vi", name: "Vietnamese", native: "Tiếng Việt" },
    87	    { code: "id", name: "Indonesian", native: "Bahasa Indonesia" },
    88	    { code: "ms", name: "Malay", native: "Bahasa Melayu" },
    89	    { code: "fil", name: "Filipino", native: "Filipino" },
    90	    { code: "sd", name: "Sindhi", native: "سنڌي" },
    91	    { code: "ps", name: "Pashto", native: "پښتو" },
    92	
    93	    // East Asia
    94	    { code: "zh", name: "Chinese (generic)", native: "中文" },
    95	    { code: "zh-Hans", name: "Chinese (Simplified)", native: "简体中文" },
    96	    { code: "zh-Hant", name: "Chinese (Traditional)", native: "繁體中文" },
    97	    { code: "yue", name: "Cantonese", native: "粵語" },
    98	    { code: "ja", name: "Japanese", native: "日本語" },
    99	    { code: "ko", name: "Korean", native: "한국어" },
   100	
   101	    // Americas
   102	    { code: "pt-BR", name: "Portuguese (Brazil)", native: "Português (Brasil)" },
   103	    { code: "es-419", name: "Spanish (Latin America)", native: "Español (LatAm)" },
   104	    { code: "qu", name: "Quechua" },
   105	    { code: "gn", name: "Guarani" },
   106	    { code: "ay", name: "Aymara" },
   107	
   108	    // Extras often encountered in MADLAD
   109	    { code: "az", name: "Azerbaijani", native: "Azərbaycanca" },
   110	    { code: "kk", name: "Kazakh", native: "Қазақ" },
   111	    { code: "uz", name: "Uzbek", native: "Oʻzbek" },
   112	    { code: "mn", name: "Mongolian", native: "Монгол" },
   113	    { code: "tg", name: "Tajik", native: "Тоҷикӣ" },
   114	    { code: "ky", name: "Kyrgyz", native: "Кыргызча" },
   115	    { code: "ka", name: "Georgian", native: "ქართული" },
   116	    { code: "hy", name: "Armenian", native: "Հայերեն" },
   117	    { code: "sq", name: "Albanian", native: "Shqip" },
   118	    { code: "bs", name: "Bosnian", native: "Bosanski" },
   119	    { code: "mk", name: "Macedonian", native: "Македонски" },
   120	    { code: "is", name: "Icelandic", native: "Íslenska" },
   121	    { code: "ga", name: "Irish", native: "Gaeilge" },
   122	    { code: "cy", name: "Welsh", native: "Cymraeg" },
   123	    { code: "mt", name: "Maltese", native: "Malti" },
   124	];
   125	
   126	// Helper lookups
   127	export function isSupported(code: string) {
   128	    if (code === AUTO_CODE) return true;
   129	    // accept any BCP-47 tag; you may still want to validate shape later
   130	    return /^[a-zA-Z]{2,3}(-[A-Za-z0-9]{2,8})*$/.test(code);
   131	}
   132	
   133	export function labelFor(code: string) {
   134	    const found = MADLAD_LANGUAGES.find(l => l.code === code);
   135	    return found ? `${found.name}${found.native ? ` — ${found.native}` : ""}` : code;
   136	}
   137	
   138	// Optional: lazy-load the FULL set from a JSON you’ll add later (Table 8 → JSON).
   139	// Example file path: /public/data/madlad_languages.json (array of {code,name,native?})
   140	let _fullCache: Lang[] | null = null;
   141	export async function loadFullMadladLanguages(): Promise<Lang[]> {
   142	    if (_fullCache) return _fullCache;
   143	    try {
   144	        const res = await fetch("/data/madlad_languages.json", { cache: "force-cache" });
   145	        if (res.ok) {
   146	            const arr = (await res.json()) as Lang[];
   147	            // ensure auto is present and at top:
   148	            const dedup = [ { code: AUTO_CODE, name: "Auto-detect" }, ...arr.filter(x => x.code !== AUTO_CODE) ];
   149	            _fullCache = dedup;
   150	            return dedup;
   151	        }
   152	    } catch {}
   153	    return MADLAD_LANGUAGES; // fallback
   154	}
   155	
   156	/**
   157	 * Docs:
   158	 * - Dataset/model coverage (419+ langs): paper + appendix (Table 8).
   159	 * - Model card (400+/450+): Hugging Face.
   160	 * Paper: NeurIPS/ArXiv/OpenReview.
   161	 */

========== FILE: ./src/lib/supabase.ts ==========

     1	// src/lib/supabase.ts
     2	import { createClient } from "@supabase/supabase-js";
     3	
     4	const url  = import.meta.env.VITE_SUPABASE_URL as string | undefined;
     5	const anon = import.meta.env.VITE_SUPABASE_ANON_KEY as string | undefined;
     6	
     7	if (!url || !anon) {
     8	    const host = url ? new URL(url).host : "(missing)";
     9	    console.error("[Supabase] Missing envs", {
    10	        hasUrl: !!url, urlHost: host, hasAnonKey: !!anon, anonLen: anon?.length ?? 0
    11	    });
    12	}
    13	
    14	export const supabase = createClient(url!, anon!, {
    15	    auth: { persistSession: true, autoRefreshToken: true },
    16	    global: { headers: { apikey: anon || "" } },
    17	});
    18	
    19	// Expose quick test helpers in the browser console
    20	if (typeof window !== "undefined") {
    21	    (window as any).__sb = supabase;
    22	    (window as any).__sbEnv = { hasUrl: !!url, urlHost: url ? new URL(url).host : null, hasAnonKey: !!anon, anonLen: anon?.length ?? 0 };
    23	    (window as any).__sbPing = async () => {
    24	        try {
    25	            const res = await fetch(`${url}/rest/v1/?select=%2a`, {
    26	                headers: { apikey: anon || "", Authorization: `Bearer ${anon}` },
    27	            });
    28	            return { ok: res.ok, status: res.status, text: await res.text() };
    29	        } catch (e:any) {
    30	            return { ok: false, error: e.message };
    31	        }
    32	    };
    33	}

========== FILE: ./src/lib/utils.ts ==========

     1	import { clsx, type ClassValue } from "clsx"
     2	import { twMerge } from "tailwind-merge"
     3	
     4	export function cn(...inputs: ClassValue[]) {
     5	  return twMerge(clsx(inputs))
     6	}

========== FILE: ./src/main.tsx ==========

     1	// src/main.tsx
     2	import { createRoot } from 'react-dom/client';
     3	import App from './App.tsx';
     4	import './index.css';
     5	import { HelmetProvider } from 'react-helmet-async';
     6	
     7	const root = createRoot(document.getElementById('root')!);
     8	root.render(
     9	    <HelmetProvider>
    10	        <App />
    11	    </HelmetProvider>
    12	);

========== FILE: ./src/pages/About.tsx ==========

     1	import React from 'react';
     2	import { ArrowRight, Users, Target, Globe, Heart } from 'lucide-react';
     3	import { Button } from '@/components/ui/button';
     4	import { Card } from '@/components/ui/card';
     5	import { Link } from 'react-router-dom';
     6	
     7	const About = () => {
     8	  const values = [
     9	    {
    10	      icon: Globe,
    11	      title: 'Global Connection',
    12	      description: 'Breaking down language barriers to connect people worldwide through seamless communication.'
    13	    },
    14	    {
    15	      icon: Heart,
    16	      title: 'Privacy First',
    17	      description: 'Your data belongs to you. We build with privacy and security as foundational principles.'
    18	    },
    19	    {
    20	      icon: Target,
    21	      title: 'Innovation',
    22	      description: 'Pushing the boundaries of AI and language technology to create meaningful solutions.'
    23	    }
    24	  ];
    25	
    26	  const team = [
    27	    {
    28	      name: 'Dragos Constantine',
    29	      role: 'Founder',
    30	      bio: 'Constantine is a former pro tennis player and Columbia University graduate, a repeat founder, and the sole developer behind VAVUS AI.',
    31	      // Place the file at: public/images/dragos.jpg
    32	      image: '/images/dragos.jpg'
    33	    },
    34	  ];
    35	
    36	  return (
    37	      <div className="min-h-screen bg-gradient-subtle">
    38	        <div className="mx-auto max-w-7xl px-4 py-16 sm:px-6 lg:px-8">
    39	          {/* Hero */}
    40	          <div className="text-center mb-20">
    41	            <h1 className="mb-6">
    42	              <span className="gradient-text">About VAVUS AI</span>
    43	            </h1>
    44	            <p className="text-xl text-muted-foreground max-w-3xl mx-auto">
    45	              We're building the future of human communication through AI-powered translation
    46	              and conversation tools that respect privacy and connect cultures.
    47	            </p>
    48	          </div>
    49	
    50	          {/* Mission */}
    51	          <section className="mb-20">
    52	            <Card className="p-12 text-center bg-white">
    53	              <h2 className="mb-8">Our Mission</h2>
    54	              <p className="text-xl text-muted-foreground max-w-4xl mx-auto mb-8">
    55	                To create a world where language is never a barrier to human connection,
    56	                understanding, and collaboration. We believe that everyone deserves access
    57	                to powerful AI tools that are secure, private, and designed with humanity in mind.
    58	              </p>
    59	              <div className="bg-gradient-hero p-8 rounded-xl text-white">
    60	                <p className="text-lg font-medium">
    61	                  "Technology should amplify human potential, not replace human connection."
    62	                </p>
    63	                <p className="text-sm opacity-80 mt-2">— VAVUS AI Team</p>
    64	              </div>
    65	            </Card>
    66	          </section>
    67	
    68	          {/* Values */}
    69	          <section className="mb-20">
    70	            <div className="text-center mb-12">
    71	              <h2 className="mb-4">Our Values</h2>
    72	              <p className="text-xl text-muted-foreground max-w-2xl mx-auto">
    73	                These principles guide everything we build and every decision we make.
    74	              </p>
    75	            </div>
    76	
    77	            <div className="grid grid-cols-1 md:grid-cols-3 gap-8">
    78	              {values.map((value) => (
    79	                  <Card key={value.title} className="p-8 text-center">
    80	                    <div className="bg-gradient-hero p-4 rounded-lg w-fit mx-auto mb-6">
    81	                      <value.icon className="h-8 w-8 text-white" />
    82	                    </div>
    83	                    <h3 className="text-xl font-semibold mb-4">{value.title}</h3>
    84	                    <p className="text-muted-foreground">{value.description}</p>
    85	                  </Card>
    86	              ))}
    87	            </div>
    88	          </section>
    89	
    90	          {/* Team */}
    91	          <section className="mb-20">
    92	            <div className="text-center mb-12">
    93	              <h2 className="mb-4">Meet The Team</h2>
    94	              <p className="text-xl text-muted-foreground max-w-2xl mx-auto">
    95	                A diverse group of engineers, researchers, and designers passionate about
    96	                connecting the world through technology.
    97	              </p>
    98	            </div>
    99	
   100	            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-8">
   101	              {team.map((member) => (
   102	                  <Card key={member.name} className="p-6 text-center">
   103	                    <img
   104	                        src={member.image}
   105	                        alt={member.name}
   106	                        loading="lazy"
   107	                        className="mx-auto mb-4 h-24 w-24 rounded-full object-cover shadow-sm"
   108	                    />
   109	                    <h3 className="font-semibold text-lg mb-1">{member.name}</h3>
   110	                    <p className="text-accent-brand font-medium text-sm mb-3">{member.role}</p>
   111	                    <p className="text-muted-foreground text-sm">{member.bio}</p>
   112	                  </Card>
   113	              ))}
   114	            </div>
   115	          </section>
   116	
   117	          {/* Story */}
   118	          <section className="mb-20">
   119	            <Card className="p-12">
   120	              <div className="max-w-4xl mx-auto">
   121	                <h2 className="text-center mb-8">Our Story</h2>
   122	                <div className="prose prose-lg max-w-none text-muted-foreground">
   123	                  <p>
   124	                    VAVUS AI was born from a simple frustration: existing translation and AI tools
   125	                    either compromised on privacy or lacked the sophistication needed for meaningful
   126	                    communication across cultures.
   127	                  </p>
   128	                  <p>
   129	                    After eight years as a founder, I saw how AI can move humanity forward by understanding context,
   130	                    nuance, and culture. But none of it matters without privacy—that’s why we built VAVUS AI to keep
   131	                    personal communication secure by design. Roughly 95% of people don’t use AI day-to-day;
   132	                    productivity will surge in the next few years and many risk being left behind.
   133	                    Our goal is simple: bring AI to everyone so the benefits are shared by all.
   134	                  </p>
   135	                  <p>
   136	                    Today, we're building a platform that combines cutting-edge AI with hardware-level
   137	                    security, creating tools that are both powerful and trustworthy. Our vision extends
   138	                    beyond simple translation to encompass true cross-cultural understanding and communication.
   139	                  </p>
   140	                </div>
   141	              </div>
   142	            </Card>
   143	          </section>
   144	
   145	          {/* CTA */}
   146	          <section className="text-center">
   147	            <Card className="p-12 bg-gradient-hero text-white">
   148	              <h2 className="mb-4 text-white">Join Our Mission</h2>
   149	              <p className="text-lg opacity-90 mb-8 max-w-2xl mx-auto">
   150	                We're always looking for passionate people who want to help break down
   151	                language barriers and connect the world.
   152	              </p>
   153	              <Link to="/join">
   154	                <Button className="bg-white text-primary hover:bg-white/90 font-semibold px-8 py-3">
   155	                  View Open Positions
   156	                  <ArrowRight className="ml-2 h-5 w-5" />
   157	                </Button>
   158	              </Link>
   159	            </Card>
   160	          </section>
   161	        </div>
   162	      </div>
   163	  );
   164	};
   165	
   166	export default About;

========== FILE: ./src/pages/AccountPage.tsx ==========

     1	import { useEffect, useMemo, useState } from 'react';
     2	import { useNavigate, Link } from 'react-router-dom';
     3	import { supabase } from '@/lib/supabase';
     4	import { Button } from '@/components/ui/button';
     5	
     6	type Row = Record<string, any>;
     7	
     8	function formatDate(d?: string) {
     9	    if (!d) return '';
    10	    try {
    11	        const dt = new Date(d);
    12	        return dt.toLocaleString();
    13	    } catch { return d; }
    14	}
    15	
    16	function extractAssistantText(raw: any) {
    17	    if (typeof raw !== 'string') return String(raw ?? '');
    18	    const s = raw.trim();
    19	    // Try JSON payloads (OpenAI/vLLM-style)
    20	    if (s.startsWith('{') || s.startsWith('[')) {
    21	        try {
    22	            const j = JSON.parse(s);
    23	            if (j?.choices?.[0]?.message?.content) return j.choices[0].message.content;
    24	            if (j?.output_text) return j.output_text;
    25	            if (typeof j?.content === 'string') return j.content;
    26	            if (Array.isArray(j?.content)) return j.content.map((c: any) => c?.text ?? '').join('\n');
    27	        } catch {/* fall through */}
    28	    }
    29	    return s;
    30	}
    31	
    32	function previewText(t: string, n = 180) {
    33	    const one = t.replace(/\s+/g, ' ').trim();
    34	    return one.length > n ? one.slice(0, n - 1) + '…' : one;
    35	}
    36	
    37	function SectionCard({
    38	                         title, description, action, children,
    39	                     }: { title: string; description?: string; action?: React.ReactNode; children: React.ReactNode }) {
    40	    return (
    41	        <div className="rounded-xl border bg-white shadow-sm">
    42	            <div className="flex items-start justify-between p-5 border-b">
    43	                <div>
    44	                    <h3 className="text-lg font-semibold">{title}</h3>
    45	                    {description && <p className="text-sm text-muted-foreground mt-1">{description}</p>}
    46	                </div>
    47	                {action}
    48	            </div>
    49	            <div className="p-5">{children}</div>
    50	        </div>
    51	    );
    52	}
    53	
    54	async function trySelect<T = Row>(
    55	    userId: string,
    56	    candidates: {
    57	        table: string;
    58	        select?: string;
    59	        where?: (qb: any) => any;
    60	        orderBy?: string;
    61	        limit?: number;
    62	    }[]
    63	): Promise<T[]> {
    64	    for (const c of candidates) {
    65	        try {
    66	            let qb: any = supabase.from(c.table).select(c.select || '*');
    67	            qb = c.where ? c.where(qb) : qb.eq('user_id', userId);
    68	            if (c.orderBy) qb = qb.order(c.orderBy, { ascending: false });
    69	            if (c.limit) qb = qb.limit(c.limit);
    70	            const { data, error } = await qb;
    71	            if (!error && data) return data as T[];
    72	        } catch {/* next candidate */}
    73	    }
    74	    return [];
    75	}
    76	
    77	export default function AccountPage() {
    78	    const navigate = useNavigate();
    79	
    80	    const [email, setEmail] = useState<string>('');
    81	    const [activeTab, setActiveTab] = useState<'ai' | 'translate' | 'blog'>('ai');
    82	
    83	    const [aiRows, setAiRows] = useState<Row[] | null>(null);
    84	    const [translations, setTranslations] = useState<Row[] | null>(null);
    85	    const [blog, setBlog] = useState<Row[] | null>(null);
    86	
    87	    const [convMeta, setConvMeta] = useState<Record<string, { title?: string; updated_at?: string }>>({});
    88	
    89	    useEffect(() => {
    90	        let isMounted = true;
    91	
    92	        supabase.auth.getSession().then(async ({ data }) => {
    93	            const session = data.session;
    94	            if (!session?.user) {
    95	                navigate('/auth?next=/account', { replace: true });
    96	                return;
    97	            }
    98	            if (!isMounted) return;
    99	            setEmail(session.user.email || '');
   100	            const uid = session.user.id;
   101	
   102	            // AI messages (assistant only, newest first)
   103	            const ai = await trySelect(uid, [
   104	                {
   105	                    table: 'ai_messages',
   106	                    where: (qb) => qb.eq('user_id', uid).eq('role', 'assistant').order('created_at', { ascending: false }),
   107	                    limit: 100,
   108	                },
   109	                {
   110	                    table: 'messages',
   111	                    where: (qb) =>
   112	                        qb.eq('user_id', uid).eq('role', 'assistant').order('created_at', { ascending: false }),
   113	                    limit: 100,
   114	                },
   115	            ]);
   116	
   117	            // Conversation titles (optional table)
   118	            const convIds = Array.from(new Set(ai.map((m: any) => m.conversation_id).filter(Boolean)));
   119	            if (convIds.length) {
   120	                const { data: convs } =
   121	                    await supabase.from('conversations')
   122	                        .select('id,title,updated_at')
   123	                        .in('id', convIds);
   124	                if (convs?.length) {
   125	                    const map: Record<string, any> = {};
   126	                    convs.forEach((c: any) => (map[c.id] = { title: c.title, updated_at: c.updated_at }));
   127	                    if (isMounted) setConvMeta(map);
   128	                }
   129	            }
   130	
   131	            const tr = await trySelect(uid, [
   132	                { table: 'translations', select: 'id,source_lang,target_lang,input_text,output_text,created_at', orderBy: 'created_at', limit: 20 },
   133	                { table: 'translation_logs', select: 'id,source_lang,target_lang,input_text,output_text,created_at', orderBy: 'created_at', limit: 20 },
   134	                { table: 'transcripts', select: 'id,source_lang,target_lang,input_text,output_text,created_at', orderBy: 'created_at', limit: 20 },
   135	            ]);
   136	
   137	            const br = await trySelect(uid, [
   138	                { table: 'blog_responses', select: 'id,title,slug,created_at,published', orderBy: 'created_at', limit: 20 },
   139	                { table: 'responses', select: 'id,title,slug,created_at,published', orderBy: 'created_at', limit: 20 },
   140	                { table: 'posts', select: 'id,title,slug,created_at,published,author_id', where: (qb) => qb.eq('author_id', uid).order('created_at', { ascending: false }), limit: 20 },
   141	            ]);
   142	
   143	            if (!isMounted) return;
   144	            setAiRows(ai);
   145	            setTranslations(tr);
   146	            setBlog(br);
   147	        });
   148	
   149	        return () => { isMounted = false; };
   150	    }, [navigate]);
   151	
   152	    // Group AI messages by conversation_id and take the latest assistant message as preview
   153	    const aiConversations = useMemo(() => {
   154	        if (!aiRows) return null;
   155	        const groups: Record<string, Row[]> = {};
   156	        for (const m of aiRows) {
   157	            const key = m.conversation_id || m.conversation || 'solo:' + m.id;
   158	            (groups[key] ||= []).push(m);
   159	        }
   160	        const list = Object.entries(groups).map(([cid, msgs]) => {
   161	            const latest = [...msgs].sort((a, b) =>
   162	                String(b.created_at || b.id).localeCompare(String(a.created_at || a.id))
   163	            )[0];
   164	            const text = extractAssistantText(latest?.content ?? '');
   165	            const title = convMeta[cid]?.title || text.split('\n')[0] || 'Conversation';
   166	            return {
   167	                conversation_id: cid,
   168	                title: title.length > 80 ? title.slice(0, 79) + '…' : title,
   169	                preview: previewText(text),
   170	                updated_at: convMeta[cid]?.updated_at || latest?.created_at,
   171	            };
   172	        });
   173	        // newest first
   174	        return list.sort((a, b) =>
   175	            String(b.updated_at || '').localeCompare(String(a.updated_at || ''))
   176	        );
   177	    }, [aiRows, convMeta]);
   178	
   179	    const headerChips = useMemo(
   180	        () => [
   181	            { id: 'ai', label: 'AI History' as const },
   182	            { id: 'translate', label: 'Translations' as const },
   183	            { id: 'blog', label: 'Blog Responses' as const },
   184	        ],
   185	        []
   186	    );
   187	
   188	    return (
   189	        <div className="min-h-screen bg-white">
   190	            {/* Header */}
   191	            <section className="relative overflow-hidden bg-gradient-subtle">
   192	                <div className="absolute inset-0 bg-gradient-to-r from-primary/5 to-accent-brand/5" />
   193	                <div className="relative max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-10">
   194	                    <div className="flex flex-col sm:flex-row sm:items-end sm:justify-between gap-6">
   195	                        <div>
   196	                            <h1 className="mb-2">
   197	                                <span className="gradient-text">Your Account</span>
   198	                            </h1>
   199	                            <p className="text-muted-foreground">
   200	                                Signed in as <span className="font-medium">{email || '—'}</span>
   201	                            </p>
   202	                        </div>
   203	                        <div className="flex gap-2">
   204	                            <Link to="/ai"><Button className="btn-secondary">Open AI Chat</Button></Link>
   205	                            <Button variant="outline" onClick={() => supabase.auth.signOut().then(() => (window.location.href = '/'))}>
   206	                                Sign out
   207	                            </Button>
   208	                        </div>
   209	                    </div>
   210	
   211	                    {/* Pills */}
   212	                    <div className="mt-6 flex flex-wrap gap-2">
   213	                        {headerChips.map((c) => (
   214	                            <button
   215	                                key={c.id}
   216	                                onClick={() => setActiveTab(c.id as typeof activeTab)}
   217	                                className={[
   218	                                    'px-3 py-1.5 rounded-full border text-sm',
   219	                                    activeTab === c.id
   220	                                        ? 'bg-primary text-white border-primary'
   221	                                        : 'bg-white text-muted-foreground border-muted hover:border-foreground/20',
   222	                                ].join(' ')}
   223	                            >
   224	                                {c.label}
   225	                            </button>
   226	                        ))}
   227	                    </div>
   228	                </div>
   229	            </section>
   230	
   231	            {/* Content */}
   232	            <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-10 space-y-8">
   233	
   234	                {activeTab === 'ai' && (
   235	                    <SectionCard
   236	                        title="Recent Conversations"
   237	                        description="Click any row to continue the thread."
   238	                        action={<Link to="/ai"><Button variant="outline">Go to AI</Button></Link>}
   239	                    >
   240	                        {aiConversations === null ? (
   241	                            <div className="text-muted-foreground">Loading…</div>
   242	                        ) : aiConversations.length === 0 ? (
   243	                            <div className="text-muted-foreground">No conversations yet.</div>
   244	                        ) : (
   245	                            <div className="overflow-x-auto">
   246	                                <table className="min-w-full text-sm">
   247	                                    <thead>
   248	                                    <tr className="text-left text-muted-foreground border-b">
   249	                                        <th className="py-2 pr-6 font-medium">Title</th>
   250	                                        <th className="py-2 pr-6 font-medium">Latest message</th>
   251	                                        <th className="py-2 pr-6 font-medium">Updated</th>
   252	                                    </tr>
   253	                                    </thead>
   254	                                    <tbody>
   255	                                    {aiConversations.map((c) => (
   256	                                        <tr
   257	                                            key={c.conversation_id}
   258	                                            className="border-b last:border-0 hover:bg-muted/30 cursor-pointer"
   259	                                            onClick={() => navigate(`/ai?c=${encodeURIComponent(c.conversation_id)}`)}
   260	                                            title="Open conversation"
   261	                                        >
   262	                                            <td className="py-2 pr-6">{c.title}</td>
   263	                                            <td className="py-2 pr-6 text-muted-foreground">{c.preview}</td>
   264	                                            <td className="py-2 pr-6 text-muted-foreground">{formatDate(c.updated_at)}</td>
   265	                                        </tr>
   266	                                    ))}
   267	                                    </tbody>
   268	                                </table>
   269	                            </div>
   270	                        )}
   271	                    </SectionCard>
   272	                )}
   273	
   274	                {activeTab === 'translate' && (
   275	                    <SectionCard
   276	                        title="Recent Translations"
   277	                        description="Your latest speech/text translations."
   278	                        action={<Link to="/translate"><Button variant="outline">Open Translator</Button></Link>}
   279	                    >
   280	                        {translations === null ? (
   281	                            <div className="text-muted-foreground">Loading…</div>
   282	                        ) : translations.length === 0 ? (
   283	                            <div className="text-muted-foreground">No translations yet.</div>
   284	                        ) : (
   285	                            <div className="overflow-x-auto">
   286	                                <table className="min-w-full text-sm">
   287	                                    <thead>
   288	                                    <tr className="text-left text-muted-foreground border-b">
   289	                                        <th className="py-2 pr-6 font-medium">From → To</th>
   290	                                        <th className="py-2 pr-6 font-medium">Input</th>
   291	                                        <th className="py-2 pr-6 font-medium">Output</th>
   292	                                        <th className="py-2 pr-6 font-medium">When</th>
   293	                                    </tr>
   294	                                    </thead>
   295	                                    <tbody>
   296	                                    {translations.map((r, i) => (
   297	                                        <tr key={i} className="border-b last:border-0">
   298	                                            <td className="py-2 pr-6">{r.source_lang || '—'} → {r.target_lang || '—'}</td>
   299	                                            <td className="py-2 pr-6 text-muted-foreground">{previewText(String(r.input_text ?? ''), 120)}</td>
   300	                                            <td className="py-2 pr-6">{previewText(String(r.output_text ?? ''), 160)}</td>
   301	                                            <td className="py-2 pr-6 text-muted-foreground">{formatDate(r.created_at)}</td>
   302	                                        </tr>
   303	                                    ))}
   304	                                    </tbody>
   305	                                </table>
   306	                            </div>
   307	                        )}
   308	                    </SectionCard>
   309	                )}
   310	
   311	                {activeTab === 'blog' && (
   312	                    <SectionCard
   313	                        title="Blog Responses"
   314	                        description="Drafts, posts, or response logs associated with your account."
   315	                        action={<Link to="/blog"><Button variant="outline">Go to Blog</Button></Link>}
   316	                    >
   317	                        {blog === null ? (
   318	                            <div className="text-muted-foreground">Loading…</div>
   319	                        ) : blog.length === 0 ? (
   320	                            <div className="text-muted-foreground">No entries yet.</div>
   321	                        ) : (
   322	                            <div className="overflow-x-auto">
   323	                                <table className="min-w-full text-sm">
   324	                                    <thead>
   325	                                    <tr className="text-left text-muted-foreground border-b">
   326	                                        <th className="py-2 pr-6 font-medium">Title</th>
   327	                                        <th className="py-2 pr-6 font-medium">Slug</th>
   328	                                        <th className="py-2 pr-6 font-medium">Published</th>
   329	                                        <th className="py-2 pr-6 font-medium">When</th>
   330	                                    </tr>
   331	                                    </thead>
   332	                                    <tbody>
   333	                                    {blog.map((r, i) => (
   334	                                        <tr key={i} className="border-b last:border-0">
   335	                                            <td className="py-2 pr-6">{r.title || '—'}</td>
   336	                                            <td className="py-2 pr-6 text-muted-foreground">{r.slug || '—'}</td>
   337	                                            <td className="py-2 pr-6">{String(r.published ?? '').replace('true','Yes').replace('false','No') || '—'}</td>
   338	                                            <td className="py-2 pr-6 text-muted-foreground">{formatDate(r.created_at)}</td>
   339	                                        </tr>
   340	                                    ))}
   341	                                    </tbody>
   342	                                </table>
   343	                            </div>
   344	                        )}
   345	                    </SectionCard>
   346	                )}
   347	            </div>
   348	        </div>
   349	    );
   350	}

========== FILE: ./src/pages/AIChat.tsx ==========

     1	import React, { useEffect, useMemo, useRef, useState } from 'react';
     2	import { Send, Plus, Pencil, ArrowDown, Lock, Loader2 } from 'lucide-react';
     3	import { Button } from '@/components/ui/button';
     4	import { Input } from '@/components/ui/input';
     5	import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
     6	import { Switch } from '@/components/ui/switch';
     7	import { useToast } from '@/hooks/use-toast';
     8	import { useConversations } from '@/hooks/useConversations';
     9	import { useMessages } from '@/hooks/useMessages';
    10	import { saveChat, updateConversationTitle } from '@/lib/api';
    11	
    12	type DbMessage = {
    13	    id: string;
    14	    role: 'system' | 'user' | 'assistant';
    15	    content: string;
    16	    created_at: string;
    17	};
    18	type Conversation = { id: string; title?: string | null };
    19	type Mode = 'normal' | 'thinking';
    20	
    21	/** Strip any chain-of-thought / reasoning before showing or saving */
    22	function stripReasoning(s: string): string {
    23	    if (!s) return s;
    24	    let out = s;
    25	    out = out.replace(/<think>[\s\S]*?<\/think>/gi, '');
    26	    out = out.replace(/```(?:thinking|reasoning)[\s\S]*?```/gi, '');
    27	    out = out.replace(/<\/?think>/gi, '');
    28	    return out.trim();
    29	}
    30	
    31	/** ---- SSE streaming helper (OpenAI-style) ---- */
    32	async function streamChat({
    33	                              messages,
    34	                              maxTokens,
    35	                              web,
    36	                              onDelta,
    37	                              onDone,
    38	                              onError,
    39	                          }: {
    40	    messages: { role: 'system' | 'user' | 'assistant'; content: string }[];
    41	    maxTokens: number;
    42	    web?: boolean;
    43	    onDelta: (chunk: string) => void;
    44	    onDone: (full: string) => void;
    45	    onError: (e: unknown) => void;
    46	}) {
    47	    try {
    48	        const res = await fetch('/api/ai-stream', {
    49	            method: 'POST',
    50	            headers: { 'Content-Type': 'application/json' },
    51	            body: JSON.stringify({
    52	                model: 'deepseek-ai/DeepSeek-R1-Distill-Qwen-14B',
    53	                temperature: 0.3,
    54	                max_tokens: maxTokens,
    55	                messages,
    56	                web,
    57	            }),
    58	        });
    59	        if (!res.ok || !res.body) throw new Error(`HTTP ${res.status}`);
    60	
    61	        const reader = res.body.getReader();
    62	        const decoder = new TextDecoder('utf-8');
    63	        let buffer = '';
    64	        let full = '';
    65	
    66	        while (true) {
    67	            const { value, done } = await reader.read();
    68	            if (done) break;
    69	
    70	            buffer += decoder.decode(value, { stream: true });
    71	            const parts = buffer.split('\n\n');
    72	            buffer = parts.pop() || '';
    73	
    74	            for (const part of parts) {
    75	                const line = part.split('\n').find((l) => l.startsWith('data:'));
    76	                if (!line) continue;
    77	                const payload = line.slice(5).trim();
    78	                if (payload === '[DONE]') {
    79	                    onDone(full);
    80	                    return;
    81	                }
    82	                try {
    83	                    const json = JSON.parse(payload);
    84	                    const delta =
    85	                        json?.choices?.[0]?.delta?.content ??
    86	                        json?.choices?.[0]?.message?.content ??
    87	                        '';
    88	                    if (delta) {
    89	                        full += delta;
    90	                        onDelta(delta);
    91	                    }
    92	                } catch {
    93	                    // ignore malformed/keepalive lines
    94	                }
    95	            }
    96	        }
    97	
    98	        onDone(full);
    99	    } catch (e) {
   100	        onError(e);
   101	    }
   102	}
   103	
   104	const SCROLL_SNAP_PX = 64;
   105	
   106	const AIChat: React.FC = () => {
   107	    const { toast } = useToast();
   108	
   109	    // Conversation + history
   110	    const [activeId, setActiveId] = useState<string | undefined>(undefined);
   111	    const { items: convos, loading: convLoading, refresh: refreshConvos } = useConversations();
   112	    const { items: msgs, loading: msgsLoading, refresh: refreshMsgs } = useMessages(activeId);
   113	
   114	    // Composer + controls
   115	    const [input, setInput] = useState('');
   116	    const [useInternet, setUseInternet] = useState(false);
   117	    const [usePersona, setUsePersona] = useState(false);
   118	    const [longMode, setLongMode] = useState(false);
   119	
   120	    // Streaming UI state
   121	    const [isTyping, setIsTyping] = useState(false);
   122	    const [isThinking, setIsThinking] = useState(false);
   123	    const [streamText, setStreamText] = useState('');
   124	
   125	    // Internal guards to hide CoT until it ends
   126	    const rawRef = useRef('');              // raw streamed text (may contain CoT)
   127	    const answerStartedRef = useRef(false); // flips once answer segment begins
   128	    const streamedIdxRef = useRef(0);       // last index already flushed to UI
   129	    const guardTimerRef = useRef<number | null>(null);
   130	    const guardArmedRef = useRef(false);
   131	
   132	    // Scroll helpers
   133	    const listRef = useRef<HTMLDivElement>(null);
   134	    const [isNearBottom, setIsNearBottom] = useState(true);
   135	    const onScroll = () => {
   136	        const el = listRef.current;
   137	        if (!el) return;
   138	        const atBottom = el.scrollHeight - el.scrollTop - el.clientHeight <= SCROLL_SNAP_PX;
   139	        setIsNearBottom(atBottom);
   140	    };
   141	    const scrollToBottom = () => {
   142	        const el = listRef.current;
   143	        if (!el) return;
   144	        el.scrollTo({ top: el.scrollHeight, behavior: 'smooth' });
   145	    };
   146	    useEffect(() => {
   147	        if (isNearBottom) scrollToBottom();
   148	    }, [msgs?.length, streamText, isNearBottom]);
   149	
   150	    const visibleMessages = useMemo(() => {
   151	        const base = (msgs as DbMessage[]) || [];
   152	        if (!streamText) return base;
   153	        return [
   154	            ...base,
   155	            {
   156	                id: 'streaming',
   157	                role: 'assistant' as const,
   158	                content: streamText,
   159	                created_at: new Date().toISOString(),
   160	            },
   161	        ];
   162	    }, [msgs, streamText]);
   163	
   164	    function startNewConversation() {
   165	        setActiveId(undefined);
   166	        setInput('');
   167	        setStreamText('');
   168	        setIsTyping(false);
   169	        setIsThinking(false);
   170	        rawRef.current = '';
   171	        answerStartedRef.current = false;
   172	        streamedIdxRef.current = 0;
   173	        guardArmedRef.current = false;
   174	        if (guardTimerRef.current) {
   175	            window.clearTimeout(guardTimerRef.current);
   176	            guardTimerRef.current = null;
   177	        }
   178	        refreshConvos();
   179	    }
   180	
   181	    async function handleRenameConversation() {
   182	        if (!activeId) return;
   183	        const current = (convos as any[]).find((c) => c.id === activeId)?.title || '';
   184	        const newTitle = window.prompt('Rename conversation', current);
   185	        if (!newTitle || newTitle === current) return;
   186	        try {
   187	            await updateConversationTitle(activeId, newTitle);
   188	            refreshConvos();
   189	        } catch (e: any) {
   190	            toast({
   191	                title: 'Rename failed',
   192	                description: e?.message || 'Please try again.',
   193	                variant: 'destructive',
   194	            });
   195	        }
   196	    }
   197	
   198	    async function handleSend() {
   199	        const text = input.trim();
   200	        if (!text || isTyping) return;
   201	
   202	        setInput('');
   203	        setIsTyping(true);
   204	        setIsThinking(true);
   205	        setStreamText('');
   206	        rawRef.current = '';
   207	        answerStartedRef.current = false;
   208	        streamedIdxRef.current = 0;
   209	        guardArmedRef.current = false;
   210	        if (guardTimerRef.current) {
   211	            window.clearTimeout(guardTimerRef.current);
   212	            guardTimerRef.current = null;
   213	        }
   214	
   215	        // Build base streaming context (last ~6 turns + system)
   216	        let streamingMessages: { role: 'system' | 'user' | 'assistant'; content: string }[] = [
   217	            { role: 'system', content: 'You are VAVUS AI. Be concise, actionable, and accurate.' },
   218	            ...(msgs as DbMessage[]).slice(-6).map((m) => ({ role: m.role, content: m.content })),
   219	            { role: 'user', content: text },
   220	        ];
   221	
   222	        const mode: Mode = useInternet || usePersona ? 'thinking' : 'normal';
   223	        let guardMs = 1200;
   224	
   225	        // Optional “thinking” prepass (not persisted) to prime the model
   226	        if (mode === 'thinking') {
   227	            try {
   228	                const res = await fetch('/api/ai', {
   229	                    method: 'POST',
   230	                    headers: { 'Content-Type': 'application/json' },
   231	                    body: JSON.stringify({
   232	                        conversationId: activeId,
   233	                        message: text,
   234	                        mode: 'thinking',
   235	                        longMode,
   236	                        useInternet,
   237	                        usePersona,
   238	                        useWorkspace: false,
   239	                        skipStrip: true, // let us strip locally
   240	                        noPersist: true, // do not save this step
   241	                    }),
   242	                });
   243	                const { reply } = await res.json();
   244	                const reasoning = stripReasoning(reply || '');
   245	                if (reasoning) {
   246	                    streamingMessages.push({
   247	                        role: 'system',
   248	                        content:
   249	                            `[Internal Reasoning]\n${reasoning}\n\nNow provide ONLY the final answer in plain language. Do not include <think> or analysis.`,
   250	                    });
   251	                }
   252	                guardMs = 500; // shorter guard when primed
   253	            } catch {
   254	                toast({
   255	                    title: 'Thinking failed',
   256	                    description: 'Continuing without internet/persona prepass.',
   257	                });
   258	            }
   259	        }
   260	
   261	        const maxTokens = longMode ? 2048 : 1024;
   262	
   263	        await streamChat({
   264	            messages: streamingMessages,
   265	            maxTokens,
   266	            web: useInternet,
   267	            onDelta: (chunk) => {
   268	                // Accumulate raw (may include CoT). Guard until </think> or timeout.
   269	                rawRef.current += chunk;
   270	                const rawLower = rawRef.current.toLowerCase();
   271	
   272	                // Arm a fallback guard after first token
   273	                if (!guardArmedRef.current) {
   274	                    guardArmedRef.current = true;
   275	                    guardTimerRef.current = window.setTimeout(() => {
   276	                        if (!answerStartedRef.current) {
   277	                            answerStartedRef.current = true;
   278	                            const clean = stripReasoning(rawRef.current);
   279	                            if (clean) setStreamText(clean);
   280	                            streamedIdxRef.current = rawRef.current.length;
   281	                            setIsThinking(false); // first visible content shown
   282	                            scrollToBottom();
   283	                        }
   284	                    }, guardMs) as unknown as number;
   285	                }
   286	
   287	                // If we detect explicit end of thinking, flush only the clean answer tail
   288	                const closeTagIdx = rawLower.lastIndexOf('</think>');
   289	                if (closeTagIdx !== -1 && !answerStartedRef.current) {
   290	                    answerStartedRef.current = true;
   291	                    // Start showing text strictly AFTER </think>
   292	                    const after = rawRef.current.slice(closeTagIdx + '</think>'.length);
   293	                    const cleanDelta = stripReasoning(after);
   294	                    if (cleanDelta) setStreamText((prev) => prev + cleanDelta);
   295	                    streamedIdxRef.current = rawRef.current.length;
   296	                    if (guardTimerRef.current) {
   297	                        window.clearTimeout(guardTimerRef.current);
   298	                        guardTimerRef.current = null;
   299	                    }
   300	                    setIsThinking(false); // answer starts now
   301	                    scrollToBottom();
   302	                    return;
   303	                }
   304	
   305	                if (answerStartedRef.current) {
   306	                    const newPortion = rawRef.current.slice(streamedIdxRef.current);
   307	                    const cleanDelta = stripReasoning(newPortion);
   308	                    if (cleanDelta) setStreamText((prev) => prev + cleanDelta);
   309	                    streamedIdxRef.current = rawRef.current.length;
   310	                }
   311	            },
   312	            onDone: async (full) => {
   313	                try {
   314	                    const finalClean = stripReasoning(full);
   315	                    setStreamText(finalClean);
   316	                    setIsThinking(false);
   317	                    // Persist the user+assistant turn; API can create a new conversation if missing.
   318	                    const r = await saveChat({
   319	                        conversationId: activeId,
   320	                        message: text,
   321	                        assistantText: finalClean,
   322	                        mode,
   323	                        longMode,
   324	                        useInternet,
   325	                        usePersona,
   326	                        useWorkspace: false,
   327	                    });
   328	                    const returnedId = (r as any)?.conversationId || activeId;
   329	                    if (!activeId && returnedId) {
   330	                        setActiveId(returnedId);
   331	                    }
   332	                    await Promise.all([refreshMsgs(returnedId), refreshConvos()]);
   333	                } catch (e: any) {
   334	                    toast({
   335	                        title: 'Save failed',
   336	                        description: e?.message || 'Could not save this turn.',
   337	                        variant: 'destructive',
   338	                    });
   339	                } finally {
   340	                    setIsTyping(false);
   341	                    setTimeout(scrollToBottom, 50);
   342	                }
   343	            },
   344	            onError: (e) => {
   345	                setIsTyping(false);
   346	                setIsThinking(false);
   347	                toast({
   348	                    title: 'Stream error',
   349	                    description: e instanceof Error ? e.message : 'Something went wrong.',
   350	                    variant: 'destructive',
   351	                });
   352	            },
   353	        });
   354	    }
   355	
   356	    return (
   357	        <div className="min-h-screen bg-gradient-subtle">
   358	            <div className="mx-auto max-w-4xl px-4 py-8 sm:px-6 lg:px-8">
   359	                {/* Header */}
   360	                <div className="mb-6 flex flex-col gap-3 md:flex-row md:items-center md:justify-between">
   361	                    <div className="text-left">
   362	                        <h1 className="mb-1">
   363	                            <span className="gradient-text">AI Chat Assistant</span>
   364	                        </h1>
   365	                        <p className="text-sm text-muted-foreground">Your conversations are saved privately to your account.</p>
   366	                    </div>
   367	
   368	                    {/* Conversation picker */}
   369	                    <div className="flex items-center gap-2">
   370	                        <Select value={activeId ?? ''} onValueChange={(v) => setActiveId(v || undefined)}>
   371	                            <SelectTrigger className="w-64">
   372	                                <SelectValue placeholder={convLoading ? 'Loading…' : activeId ? 'Select conversation' : 'New conversation'} />
   373	                            </SelectTrigger>
   374	                            <SelectContent>
   375	                                {(convos as Conversation[]).map((c) => (
   376	                                    <SelectItem key={c.id} value={c.id}>
   377	                                        {c.title || 'Untitled conversation'}
   378	                                    </SelectItem>
   379	                                ))}
   380	                                {(convos as Conversation[]).length === 0 && (
   381	                                    <div className="px-3 py-2 text-sm text-muted-foreground">No conversations yet</div>
   382	                                )}
   383	                            </SelectContent>
   384	                        </Select>
   385	                        <Button variant="outline" size="icon" onClick={handleRenameConversation} disabled={!activeId}>
   386	                            <Pencil className="h-4 w-4" />
   387	                        </Button>
   388	                        <Button variant="outline" onClick={startNewConversation}>
   389	                            <Plus className="h-4 w-4 mr-1" />
   390	                            New chat
   391	                        </Button>
   392	                    </div>
   393	                </div>
   394	
   395	                {/* Notice */}
   396	                <div className="mb-6 p-3 bg-accent-brand-light border border-accent-brand/20 rounded-lg text-center">
   397	                    <p className="text-sm text-accent-brand font-medium inline-flex items-center">
   398	                        <Lock className="h-4 w-4 mr-1" />
   399	                        Only you can see your conversations.
   400	                    </p>
   401	                </div>
   402	
   403	                {/* Controls */}
   404	                <div className="mb-3 grid grid-cols-1 sm:grid-cols-3 gap-3">
   405	                    <label className="flex items-center justify-between rounded-lg border p-3">
   406	                        <div>
   407	                            <div className="font-medium">Internet</div>
   408	                            <div className="text-xs text-muted-foreground">Enable web browsing in reasoning pass</div>
   409	                        </div>
   410	                        <Switch checked={useInternet} onCheckedChange={setUseInternet} />
   411	                    </label>
   412	
   413	                    <label className="flex items-center justify-between rounded-lg border p-3">
   414	                        <div>
   415	                            <div className="font-medium">Persona</div>
   416	                            <div className="text-xs text-muted-foreground">Use your saved assistant persona</div>
   417	                        </div>
   418	                        <Switch checked={usePersona} onCheckedChange={setUsePersona} />
   419	                    </label>
   420	
   421	                    <label className="flex items-center justify-between rounded-lg border p-3">
   422	                        <div>
   423	                            <div className="font-medium">Long mode</div>
   424	                            <div className="text-xs text-muted-foreground">Allow longer answers</div>
   425	                        </div>
   426	                        <Switch checked={longMode} onCheckedChange={setLongMode} />
   427	                    </label>
   428	                </div>
   429	
   430	                {/* Messages */}
   431	                <div
   432	                    ref={listRef}
   433	                    onScroll={onScroll}
   434	                    className="relative h-[56vh] overflow-y-auto rounded-lg border bg-background p-4"
   435	                >
   436	                    {msgsLoading && (msgs?.length ?? 0) === 0 ? (
   437	                        <div className="text-sm text-muted-foreground">Loading…</div>
   438	                    ) : (
   439	                        <div className="space-y-3">
   440	                            {(visibleMessages as DbMessage[]).map((m) => (
   441	                                <div key={m.id} className={`flex ${m.role === 'user' ? 'justify-end' : 'justify-start'}`}>
   442	                                    <div
   443	                                        className={`max-w-[80%] rounded-lg px-3 py-2 text-sm ${
   444	                                            m.role === 'user' ? 'bg-primary text-primary-foreground' : 'bg-muted text-foreground'
   445	                                        }`}
   446	                                    >
   447	                                        {m.content}
   448	                                    </div>
   449	                                </div>
   450	                            ))}
   451	                        </div>
   452	                    )}
   453	
   454	                    {/* Thinking spinner (only before first visible token) */}
   455	                    {isTyping && isThinking && (
   456	                        <div className="mt-3 flex items-center gap-2 text-sm text-muted-foreground">
   457	                            <Loader2 className="h-4 w-4 animate-spin" />
   458	                            <span>thinking…</span>
   459	                        </div>
   460	                    )}
   461	
   462	                    {/* Scroll-to-bottom */}
   463	                    {!isNearBottom && (
   464	                        <Button
   465	                            variant="secondary"
   466	                            size="sm"
   467	                            onClick={scrollToBottom}
   468	                            className="absolute bottom-4 right-4 shadow-md"
   469	                        >
   470	                            <ArrowDown className="h-4 w-4 mr-1" />
   471	                            Jump to latest
   472	                        </Button>
   473	                    )}
   474	                </div>
   475	
   476	                {/* Composer */}
   477	                <div className="mt-3 flex gap-2">
   478	                    <Input
   479	                        placeholder="Type your message…"
   480	                        value={input}
   481	                        onChange={(e) => setInput(e.target.value)}
   482	                        onKeyDown={(e) => {
   483	                            if (e.key === 'Enter' && !e.shiftKey) {
   484	                                e.preventDefault();
   485	                                handleSend();
   486	                            }
   487	                        }}
   488	                        className="flex-1"
   489	                    />
   490	                    <Button onClick={handleSend} disabled={!input.trim() || isTyping} className="btn-hero">
   491	                        <Send className="h-4 w-4" />
   492	                    </Button>
   493	                </div>
   494	            </div>
   495	        </div>
   496	    );
   497	};
   498	
   499	export default AIChat;

========== FILE: ./src/pages/AuthPage.tsx ==========

     1	import { useEffect, useMemo } from 'react';
     2	import { useNavigate, useLocation } from 'react-router-dom';
     3	import { Auth } from '@supabase/auth-ui-react';
     4	import { ThemeSupa } from '@supabase/auth-ui-shared';
     5	import { supabase } from '@/lib/supabase';
     6	
     7	export default function AuthPage() {
     8	    const navigate = useNavigate();
     9	    const { search } = useLocation();
    10	
    11	    // Support ?next=/account (defaults to /account)
    12	    const nextPath = useMemo(() => {
    13	        const url = new URLSearchParams(search);
    14	        const next = url.get('next') || '/account';
    15	        return next.startsWith('/') ? next : '/account';
    16	    }, [search]);
    17	
    18	    useEffect(() => {
    19	        // If already signed in, send to account immediately
    20	        supabase.auth.getSession().then(({ data }) => {
    21	            if (data.session) navigate(nextPath, { replace: true });
    22	        });
    23	
    24	        // Also handle real-time auth changes
    25	        const { data: sub } = supabase.auth.onAuthStateChange((event) => {
    26	            if (event === 'SIGNED_IN') navigate(nextPath, { replace: true });
    27	        });
    28	        return () => sub?.subscription.unsubscribe();
    29	    }, [navigate, nextPath]);
    30	
    31	    return (
    32	        <div className="min-h-screen bg-gradient-subtle relative">
    33	            <div className="absolute inset-0 bg-gradient-to-r from-primary/5 to-accent-brand/5" />
    34	            <div className="relative max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-20">
    35	                <div className="mx-auto w-full max-w-md">
    36	                    <div className="rounded-xl border bg-white/70 backdrop-blur p-6 shadow-sm">
    37	                        <div className="text-center mb-6">
    38	                            <h1 className="text-2xl font-semibold">
    39	                                Sign in to <span className="gradient-text">Vavus AI</span>
    40	                            </h1>
    41	                            <p className="text-sm text-muted-foreground mt-1">
    42	                                Privacy-first. Zero telemetry. HIPAA mode available.
    43	                            </p>
    44	                        </div>
    45	
    46	                        <Auth
    47	                            supabaseClient={supabase}
    48	                            appearance={{
    49	                                theme: ThemeSupa,
    50	                                variables: {
    51	                                    default: {
    52	                                        colors: {
    53	                                            brand: 'hsl(var(--primary))',
    54	                                            brandAccent: 'hsl(var(--accent-brand))',
    55	                                            inputBackground: 'white',
    56	                                            inputBorder: 'hsl(var(--muted))',
    57	                                            inputText: 'hsl(var(--foreground))',
    58	                                        },
    59	                                        borderWidths: { buttonBorderWidth: '1px' },
    60	                                        radii: { borderRadiusButton: '0.75rem', buttonBorderRadius: '0.75rem' },
    61	                                    },
    62	                                },
    63	                                className: {
    64	                                    button:
    65	                                        'btn-hero w-full !bg-primary !text-white hover:opacity-95 transition',
    66	                                    input: 'bg-white',
    67	                                    container: 'space-y-4',
    68	                                },
    69	                            }}
    70	                            providers={[]} // email only
    71	                            // For magic links & OAuth, this must be whitelisted in Supabase Auth -> URL config
    72	                            redirectTo={`${window.location.origin}${nextPath}`}
    73	                        />
    74	
    75	                        <p className="text-xs text-muted-foreground mt-4 text-center">
    76	                            By continuing you agree to our Terms and Privacy Policy.
    77	                        </p>
    78	                    </div>
    79	                </div>
    80	            </div>
    81	        </div>
    82	    );
    83	}

========== FILE: ./src/pages/BlogList.tsx ==========

     1	import { useEffect, useMemo, useState } from 'react';
     2	import { useSearchParams, Link } from 'react-router-dom';
     3	import { Helmet } from 'react-helmet-async';
     4	import { supabase } from '@/lib/supabase';
     5	import BlogCard from '@/components/blog/BlogCard';
     6	import { Input } from '@/components/ui/input';
     7	import { Button } from '@/components/ui/button';
     8	import { useIsAdmin } from '@/hooks/useIsAdmin';
     9	
    10	type Post = {
    11	    id: string; slug: string; title: string; excerpt: string | null;
    12	    cover_url: string | null; created_at: string; tags: string[] | null;
    13	};
    14	
    15	const PAGE_SIZE = 9;
    16	
    17	export default function BlogList() {
    18	    const isAdmin = useIsAdmin();
    19	    const [sp, setSp] = useSearchParams();
    20	    const q = sp.get('q') ?? '';
    21	    const page = Math.max(1, Number(sp.get('page') ?? '1'));
    22	
    23	    const [posts, setPosts] = useState<Post[]>([]);
    24	    const [total, setTotal] = useState(0);
    25	    const [loading, setLoading] = useState(true);
    26	
    27	    const from = (page - 1) * PAGE_SIZE;
    28	    const to = from + PAGE_SIZE - 1;
    29	
    30	    useEffect(() => {
    31	        setLoading(true);
    32	        (async () => {
    33	            let query = supabase
    34	                .from('posts')
    35	                .select('id,slug,title,excerpt,cover_url,created_at,tags', { count: 'exact' })
    36	                .eq('published', true)
    37	                .order('created_at', { ascending: false })
    38	                .range(from, to);
    39	
    40	            if (q.trim()) {
    41	                // simple search on title/content/excerpt
    42	                query = query.or(`title.ilike.%${q}%,content.ilike.%${q}%,excerpt.ilike.%${q}%`);
    43	            }
    44	
    45	            const { data, error, count } = await query;
    46	            if (!error) {
    47	                setPosts(data ?? []);
    48	                setTotal(count ?? 0);
    49	            }
    50	            setLoading(false);
    51	        })();
    52	    }, [q, page]);
    53	
    54	    const pageCount = Math.max(1, Math.ceil(total / PAGE_SIZE));
    55	
    56	    const heroTitle = useMemo(
    57	        () => (q ? `Search “${q}” – Blog` : 'Blog – VAVUS AI'),
    58	        [q]
    59	    );
    60	    const heroDesc =
    61	        'Official VAVUS updates, engineering notes, and behind-the-scenes on privacy-first AI.';
    62	
    63	    return (
    64	        <div className="max-w-6xl mx-auto px-4 py-10 space-y-8">
    65	            <Helmet>
    66	                <title>{heroTitle}</title>
    67	                <meta name="description" content={heroDesc} />
    68	                <link rel="canonical" href={`${import.meta.env.VITE_SITE_URL || ''}/blog`} />
    69	            </Helmet>
    70	
    71	            <section className="rounded-2xl border p-8 bg-white">
    72	                <div className="flex flex-col md:flex-row md:items-end md:justify-between gap-4">
    73	                    <div>
    74	                        <h1 className="mb-2">VAVUS Blog</h1>
    75	                        <p className="text-muted-foreground">{heroDesc}</p>
    76	                    </div>
    77	                    <div className="flex gap-2">
    78	                        <Input
    79	                            placeholder="Search posts…"
    80	                            defaultValue={q}
    81	                            onKeyDown={(e) => {
    82	                                if (e.key === 'Enter') {
    83	                                    const v = (e.target as HTMLInputElement).value;
    84	                                    const next = new URLSearchParams(sp);
    85	                                    v ? next.set('q', v) : next.delete('q');
    86	                                    next.delete('page');
    87	                                    setSp(next, { replace: true });
    88	                                }
    89	                            }}
    90	                        />
    91	                        {isAdmin ? (
    92	                            <Link to="/blog/new">
    93	                                <Button>New Post</Button>
    94	                            </Link>
    95	                        ) : null}
    96	                    </div>
    97	                </div>
    98	            </section>
    99	
   100	            {loading ? (
   101	                <p className="text-muted-foreground">Loading…</p>
   102	            ) : posts.length === 0 ? (
   103	                <div className="rounded-xl border p-10 text-center">
   104	                    <p className="text-muted-foreground">
   105	                        {q ? 'No results.' : 'No posts yet.'}
   106	                    </p>
   107	                </div>
   108	            ) : (
   109	                <>
   110	                    <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6">
   111	                        {posts.map((p) => (
   112	                            <BlogCard key={p.id} {...p} />
   113	                        ))}
   114	                    </div>
   115	
   116	                    {pageCount > 1 && (
   117	                        <div className="flex justify-center gap-2 pt-6">
   118	                            <Button
   119	                                variant="outline"
   120	                                disabled={page <= 1}
   121	                                onClick={() => {
   122	                                    const next = new URLSearchParams(sp);
   123	                                    next.set('page', String(page - 1));
   124	                                    setSp(next, { replace: true });
   125	                                }}
   126	                            >
   127	                                Prev
   128	                            </Button>
   129	                            <div className="px-4 py-2 text-sm">
   130	                                Page {page} / {pageCount}
   131	                            </div>
   132	                            <Button
   133	                                variant="outline"
   134	                                disabled={page >= pageCount}
   135	                                onClick={() => {
   136	                                    const next = new URLSearchParams(sp);
   137	                                    next.set('page', String(page + 1));
   138	                                    setSp(next, { replace: true });
   139	                                }}
   140	                            >
   141	                                Next
   142	                            </Button>
   143	                        </div>
   144	                    )}
   145	                </>
   146	            )}
   147	        </div>
   148	    );
   149	}

========== FILE: ./src/pages/BlogNew.tsx ==========

     1	import { useEffect, useMemo, useState } from 'react';
     2	import { supabase } from '@/lib/supabase';
     3	import { Input } from '@/components/ui/input';
     4	import { Textarea } from '@/components/ui/textarea';
     5	import { Button } from '@/components/ui/button';
     6	import { Card } from '@/components/ui/card';
     7	import { useNavigate } from 'react-router-dom';
     8	import { customAlphabet } from 'nanoid';
     9	import { useIsAdmin } from '@/hooks/useIsAdmin';
    10	
    11	const nanoid = customAlphabet('abcdefghijklmnopqrstuvwxyz0123456789', 6);
    12	
    13	function slugify(str: string) {
    14	    return str.toLowerCase().replace(/[^a-z0-9\s-]/g, '').trim().replace(/\s+/g, '-').replace(/-+/g, '-');
    15	}
    16	
    17	function stripMarkdown(md: string) {
    18	    // very light markdown → text
    19	    return md
    20	        .replace(/```[\s\S]*?```/g, '')      // code fences
    21	        .replace(/`[^`]*`/g, '')             // inline code
    22	        .replace(/!\[[^\]]*\]\([^)]*\)/g, '')// images
    23	        .replace(/\[[^\]]*\]\([^)]*\)/g, '') // links
    24	        .replace(/[#>*_\-\+~`]/g, '')        // md symbols
    25	        .replace(/\n{2,}/g, ' ')
    26	        .replace(/\s{2,}/g, ' ')
    27	        .trim();
    28	}
    29	
    30	export default function BlogNew() {
    31	    const nav = useNavigate();
    32	    const isAdmin = useIsAdmin();
    33	
    34	    const [userId, setUserId] = useState<string | null>(null);
    35	
    36	    // MAIN FIELDS
    37	    const [title, setTitle] = useState('');
    38	    const [content, setContent] = useState('# New post\n\nWrite in **Markdown**.');
    39	    const [excerpt, setExcerpt] = useState('');
    40	    const [coverUrl, setCoverUrl] = useState('');
    41	    const [tagsStr, setTagsStr] = useState(''); // comma-separated
    42	    const [canonicalUrl, setCanonicalUrl] = useState('');
    43	
    44	    const [saving, setSaving] = useState(false);
    45	
    46	    useEffect(() => {
    47	        supabase.auth.getUser().then(({ data }) => setUserId(data.user?.id ?? null));
    48	    }, []);
    49	
    50	    // Live slug preview (not editable here, generated from title)
    51	    const slugPreview = useMemo(() => slugify(title) || 'post', [title]);
    52	
    53	    // If no excerpt provided, derive one from content (first ~160 chars of plain text)
    54	    const autoExcerpt = useMemo(() => {
    55	        if (excerpt.trim()) return excerpt.trim();
    56	        const txt = stripMarkdown(content);
    57	        return txt.slice(0, 160);
    58	    }, [excerpt, content]);
    59	
    60	    const parsedTags = useMemo(
    61	        () =>
    62	            tagsStr
    63	                .split(',')
    64	                .map(t => t.trim().toLowerCase())
    65	                .filter(Boolean)
    66	                .slice(0, 10),
    67	        [tagsStr]
    68	    );
    69	
    70	    const submit = async () => {
    71	        if (!isAdmin) return;
    72	        if (!userId || !title.trim() || !content.trim()) return;
    73	
    74	        setSaving(true);
    75	        let base = slugify(title) || 'post';
    76	        let candidate = base;
    77	
    78	        for (let i = 0; i < 3; i++) {
    79	            const { data, error } = await supabase
    80	                .from('posts')
    81	                .insert({
    82	                    author_id: userId,
    83	                    title: title.trim(),
    84	                    slug: candidate,
    85	                    content: content.trim(),
    86	                    excerpt: autoExcerpt || null,
    87	                    cover_url: coverUrl.trim() || null,
    88	                    tags: parsedTags.length ? parsedTags : null,
    89	                    canonical_url: canonicalUrl.trim() || null,
    90	                    published: true,
    91	                })
    92	                .select('slug')
    93	                .single();
    94	
    95	            if (!error && data) {
    96	                nav(`/blog/${data.slug}`);
    97	                return;
    98	            }
    99	            candidate = `${base}-${nanoid()}`;
   100	        }
   101	
   102	        setSaving(false);
   103	        alert('Could not save post. Try a different title.');
   104	    };
   105	
   106	    if (isAdmin === null) {
   107	        return <div className="max-w-3xl mx-auto p-6">Loading…</div>;
   108	    }
   109	    if (!isAdmin) {
   110	        return (
   111	            <div className="max-w-3xl mx-auto p-6">
   112	                <h1>403 – Not allowed</h1>
   113	                <p className="text-muted-foreground">Only the site owner can publish posts.</p>
   114	            </div>
   115	        );
   116	    }
   117	
   118	    return (
   119	        <div className="max-w-3xl mx-auto p-6 space-y-4">
   120	            <h1>New Post</h1>
   121	
   122	            <Card className="p-6 space-y-6">
   123	                {/* Title + Slug preview */}
   124	                <div>
   125	                    <label className="block text-sm font-medium mb-1">Title *</label>
   126	                    <Input
   127	                        value={title}
   128	                        onChange={(e) => setTitle(e.target.value)}
   129	                        placeholder="Awesome announcement"
   130	                        required
   131	                    />
   132	                    <p className="text-xs text-muted-foreground mt-1">
   133	                        Slug: <code className="px-1 rounded bg-surface">{slugPreview}</code>
   134	                    </p>
   135	                </div>
   136	
   137	                {/* Excerpt */}
   138	                <div>
   139	                    <label className="block text-sm font-medium mb-1">
   140	                        Excerpt <span className="text-muted-foreground">(~150–160 characters)</span>
   141	                    </label>
   142	                    <Textarea
   143	                        rows={3}
   144	                        value={excerpt}
   145	                        onChange={(e) => setExcerpt(e.target.value)}
   146	                        placeholder="Short description for cards and social previews."
   147	                    />
   148	                    <p className="text-xs text-muted-foreground mt-1">
   149	                        {autoExcerpt.length}/160 {excerpt ? '' : '(auto-generated from content if left blank)'}
   150	                    </p>
   151	                </div>
   152	
   153	                {/* Cover image */}
   154	                <div>
   155	                    <label className="block text-sm font-medium mb-1">Cover image URL</label>
   156	                    <Input
   157	                        value={coverUrl}
   158	                        onChange={(e) => setCoverUrl(e.target.value)}
   159	                        placeholder="https://…"
   160	                    />
   161	                    {coverUrl.trim() ? (
   162	                        <div className="mt-3 rounded-lg overflow-hidden border">
   163	                            {/* eslint-disable-next-line @next/next/no-img-element */}
   164	                            <img
   165	                                src={coverUrl}
   166	                                alt="Cover preview"
   167	                                className="w-full h-48 object-cover"
   168	                                onError={(e) => ((e.currentTarget.style.display = 'none'))}
   169	                            />
   170	                        </div>
   171	                    ) : null}
   172	                </div>
   173	
   174	                {/* Tags */}
   175	                <div>
   176	                    <label className="block text-sm font-medium mb-1">Tags</label>
   177	                    <Input
   178	                        value={tagsStr}
   179	                        onChange={(e) => setTagsStr(e.target.value)}
   180	                        placeholder="ai, announcement, research"
   181	                    />
   182	                    {parsedTags.length > 0 && (
   183	                        <p className="text-xs text-muted-foreground mt-1">
   184	                            Parsed tags:&nbsp;
   185	                            {parsedTags.map((t, i) => (
   186	                                <span key={t}>
   187	                  <code className="px-1 rounded bg-surface">#{t}</code>
   188	                                    {i < parsedTags.length - 1 ? ', ' : ''}
   189	                </span>
   190	                            ))}
   191	                        </p>
   192	                    )}
   193	                </div>
   194	
   195	                {/* Canonical URL */}
   196	                <div>
   197	                    <label className="block text-sm font-medium mb-1">Canonical URL</label>
   198	                    <Input
   199	                        value={canonicalUrl}
   200	                        onChange={(e) => setCanonicalUrl(e.target.value)}
   201	                        placeholder="https://www.vavusai.com/blog/your-post"
   202	                    />
   203	                </div>
   204	
   205	                {/* Content */}
   206	                <div>
   207	                    <label className="block text-sm font-medium mb-1">Content (Markdown) *</label>
   208	                    <Textarea
   209	                        rows={16}
   210	                        value={content}
   211	                        onChange={(e) => setContent(e.target.value)}
   212	                        required
   213	                    />
   214	                </div>
   215	
   216	                <div className="flex justify-end">
   217	                    <Button onClick={submit} disabled={saving}>
   218	                        {saving ? 'Publishing…' : 'Publish'}
   219	                    </Button>
   220	                </div>
   221	            </Card>
   222	        </div>
   223	    );
   224	}

========== FILE: ./src/pages/BlogView.tsx ==========

     1	import { useEffect, useMemo, useState } from 'react';
     2	import { useParams, Link } from 'react-router-dom';
     3	import { Helmet } from 'react-helmet-async';
     4	import { supabase } from '@/lib/supabase';
     5	import DOMPurify from 'dompurify';
     6	import { marked } from 'marked';
     7	import { Card } from '@/components/ui/card';
     8	import { Textarea } from '@/components/ui/textarea';
     9	import { Button } from '@/components/ui/button';
    10	
    11	type Post = {
    12	    id: string; title: string; slug: string;
    13	    content: string; excerpt: string | null; cover_url: string | null;
    14	    created_at: string; updated_at: string; tags: string[] | null; canonical_url: string | null;
    15	};
    16	
    17	type Comment = { id: string; content: string; created_at: string; author_id: string };
    18	
    19	export default function BlogView() {
    20	    const { slug } = useParams<{ slug: string }>();
    21	    const [post, setPost] = useState<Post | null>(null);
    22	    const [comments, setComments] = useState<Comment[]>([]);
    23	    const [comment, setComment] = useState('');
    24	    const [userId, setUserId] = useState<string | null>(null);
    25	
    26	    useEffect(() => {
    27	        supabase.auth.getUser().then(({ data }) => setUserId(data.user?.id ?? null));
    28	    }, []);
    29	
    30	    useEffect(() => {
    31	        if (!slug) return;
    32	        (async () => {
    33	            const { data } = await supabase
    34	                .from('posts')
    35	                .select('id,title,slug,content,excerpt,cover_url,created_at,updated_at,tags,canonical_url')
    36	                .eq('slug', slug).maybeSingle();
    37	            setPost(data ?? null);
    38	
    39	            if (data) {
    40	                const { data: cmts } = await supabase
    41	                    .from('comments')
    42	                    .select('id,content,created_at,author_id')
    43	                    .eq('post_id', data.id)
    44	                    .order('created_at', { ascending: true });
    45	                setComments(cmts ?? []);
    46	            }
    47	        })();
    48	    }, [slug]);
    49	
    50	    const html = useMemo(
    51	        () => (post ? DOMPurify.sanitize(marked.parse(post.content) as string) : ''),
    52	        [post]
    53	    );
    54	
    55	    const SITE = import.meta.env.VITE_SITE_URL || '';
    56	    const url = `${SITE}/blog/${slug ?? ''}`;
    57	    const metaTitle = post ? `${post.title} – VAVUS Blog` : 'Loading…';
    58	    const metaDesc = post?.excerpt || 'VAVUS AI blog article.';
    59	    const jsonLd = post
    60	        ? {
    61	            '@context': 'https://schema.org',
    62	            '@type': 'Article',
    63	            headline: post.title,
    64	            datePublished: post.created_at,
    65	            dateModified: post.updated_at || post.created_at,
    66	            image: post.cover_url ? [post.cover_url] : undefined,
    67	            author: { '@type': 'Organization', name: 'VAVUS AI' },
    68	            publisher: { '@type': 'Organization', name: 'VAVUS AI' },
    69	            mainEntityOfPage: url,
    70	            description: metaDesc,
    71	        }
    72	        : null;
    73	
    74	    const addComment = async () => {
    75	        if (!userId || !post || !comment.trim()) return;
    76	        const { data, error } = await supabase
    77	            .from('comments')
    78	            .insert({ post_id: post.id, author_id: userId, content: comment.trim() })
    79	            .select()
    80	            .single();
    81	        if (!error && data) {
    82	            setComments((prev) => [...prev, data]);
    83	            setComment('');
    84	        }
    85	    };
    86	
    87	    if (!post) {
    88	        return <div className="max-w-3xl mx-auto p-6">Loading…</div>;
    89	    }
    90	
    91	    return (
    92	        <div className="max-w-3xl mx-auto px-4 py-10 space-y-8">
    93	            <Helmet>
    94	                <title>{metaTitle}</title>
    95	                <meta name="description" content={metaDesc} />
    96	                <link rel="canonical" href={post.canonical_url || url} />
    97	                <meta property="og:title" content={post.title} />
    98	                <meta property="og:description" content={metaDesc} />
    99	                <meta property="og:type" content="article" />
   100	                <meta property="og:url" content={url} />
   101	                {post.cover_url && <meta property="og:image" content={post.cover_url} />}
   102	                {jsonLd && (
   103	                    <script type="application/ld+json">{JSON.stringify(jsonLd)}</script>
   104	                )}
   105	            </Helmet>
   106	
   107	            {post.cover_url && (
   108	                <div className="rounded-xl overflow-hidden border">
   109	                    <img src={post.cover_url} alt={post.title} className="w-full object-cover" />
   110	                </div>
   111	            )}
   112	
   113	            <header>
   114	                <h1 className="mb-2">{post.title}</h1>
   115	                <p className="text-sm text-muted-foreground">
   116	                    {new Date(post.created_at).toLocaleString()}
   117	                </p>
   118	            </header>
   119	
   120	            <Card className="p-6 prose max-w-none">
   121	                <div dangerouslySetInnerHTML={{ __html: html }} />
   122	            </Card>
   123	
   124	            <div className="flex items-center gap-2">
   125	                <a
   126	                    className="text-sm underline"
   127	                    href={`https://twitter.com/intent/tweet?url=${encodeURIComponent(url)}&text=${encodeURIComponent(post.title)}`}
   128	                    target="_blank" rel="noreferrer"
   129	                >
   130	                    Share on X
   131	                </a>
   132	                <span className="text-muted-foreground">·</span>
   133	                <Link className="text-sm underline" to="/blog">Back to Blog</Link>
   134	            </div>
   135	
   136	            <section className="space-y-3">
   137	                <h2 className="text-xl font-semibold">Comments</h2>
   138	                {comments.length === 0 ? (
   139	                    <p className="text-muted-foreground text-sm">No comments yet.</p>
   140	                ) : (
   141	                    comments.map((c) => (
   142	                        <Card key={c.id} className="p-3">
   143	                            <p className="text-sm whitespace-pre-wrap">{c.content}</p>
   144	                            <p className="text-xs text-muted-foreground mt-1">
   145	                                {new Date(c.created_at).toLocaleString()}
   146	                            </p>
   147	                        </Card>
   148	                    ))
   149	                )}
   150	                {userId ? (
   151	                    <div className="space-y-2">
   152	                        <Textarea
   153	                            value={comment}
   154	                            onChange={(e) => setComment(e.target.value)}
   155	                            placeholder="Write a comment…"
   156	                            rows={3}
   157	                        />
   158	                        <Button onClick={addComment}>Post Comment</Button>
   159	                    </div>
   160	                ) : (
   161	                    <p className="text-sm text-muted-foreground">Sign in to comment.</p>
   162	                )}
   163	            </section>
   164	        </div>
   165	    );
   166	}

========== FILE: ./src/pages/Business.tsx ==========

     1	import React, { useState } from 'react';
     2	import {
     3	  Shield, Lock, FileText, Download, ChevronDown, ChevronRight, Building, Users, Globe,
     4	  Stethoscope, Gavel, GraduationCap
     5	} from 'lucide-react';
     6	import { Button } from '@/components/ui/button';
     7	import { Card } from '@/components/ui/card';
     8	import { Input } from '@/components/ui/input';
     9	import { Textarea } from '@/components/ui/textarea';
    10	import { Collapsible, CollapsibleContent, CollapsibleTrigger } from '@/components/ui/collapsible';
    11	import { useToast } from '@/hooks/use-toast';
    12	
    13	const Business = () => {
    14	  const [openSections, setOpenSections] = useState<string[]>(['security']);
    15	  const [openCustomers, setOpenCustomers] = useState<string[]>([]);
    16	  const [formData, setFormData] = useState({
    17	    name: '',
    18	    email: '',
    19	    company: '',
    20	    message: ''
    21	  });
    22	  const { toast } = useToast();
    23	
    24	  const toggleSection = (section: string) => {
    25	    setOpenSections(prev =>
    26	        prev.includes(section)
    27	            ? prev.filter(s => s !== section)
    28	            : [...prev, section]
    29	    );
    30	  };
    31	
    32	  const toggleCustomer = (id: string) => {
    33	    setOpenCustomers(prev =>
    34	        prev.includes(id)
    35	            ? prev.filter(s => s !== id)
    36	            : [...prev, id]
    37	    );
    38	  };
    39	
    40	  const handleFormSubmit = (e: React.FormEvent) => {
    41	    e.preventDefault();
    42	    toast({
    43	      title: "Request Submitted",
    44	      description: "We'll send you the security documentation within 24 hours."
    45	    });
    46	    setFormData({ name: '', email: '', company: '', message: '' });
    47	  };
    48	
    49	  const securitySections = [
    50	    {
    51	      id: 'security',
    52	      title: 'Security Overview',
    53	      icon: Shield,
    54	      content: (
    55	          <div className="space-y-4">
    56	            <p className="text-muted-foreground">
    57	              VAVUS AI is built with enterprise-grade security from the ground up, ensuring your data remains private and protected.
    58	            </p>
    59	            <ul className="space-y-2 text-muted-foreground">
    60	              <li className="flex items-start space-x-2">
    61	                <div className="h-1.5 w-1.5 bg-primary rounded-full mt-2 flex-shrink-0" />
    62	                <span>End-to-end encryption for all communications</span>
    63	              </li>
    64	              <li className="flex items-start space-x-2">
    65	                <div className="h-1.5 w-1.5 bg-primary rounded-full mt-2 flex-shrink-0" />
    66	                <span>Zero-knowledge architecture - we cannot access your data</span>
    67	              </li>
    68	              <li className="flex items-start space-x-2">
    69	                <div className="h-1.5 w-1.5 bg-primary rounded-full mt-2 flex-shrink-0" />
    70	                <span>Hardware-based security with dedicated devices</span>
    71	              </li>
    72	              <li className="flex items-start space-x-2">
    73	                <div className="h-1.5 w-1.5 bg-primary rounded-full mt-2 flex-shrink-0" />
    74	                <span>FIPS only security for OS, Apps and Server.</span>
    75	              </li>
    76	            </ul>
    77	          </div>
    78	      )
    79	    },
    80	    {
    81	      id: 'data',
    82	      title: 'Data Handling & Encryption',
    83	      icon: Lock,
    84	      content: (
    85	          <div className="space-y-4">
    86	            <p className="text-muted-foreground">
    87	              Our data handling practices ensure maximum privacy and security for enterprise customers.
    88	            </p>
    89	            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
    90	              <div className="p-4 bg-surface rounded-lg">
    91	                <h4 className="font-semibold mb-2">Data Encryption</h4>
    92	                <ul className="text-sm text-muted-foreground space-y-1">
    93	                  <li>• AES-256 encryption at rest</li>
    94	                  <li>• TLS 1.3 for data in transit</li>
    95	                  <li>• Perfect forward secrecy</li>
    96	                  <li>• Hardware security modules</li>
    97	                </ul>
    98	              </div>
    99	              <div className="p-4 bg-surface rounded-lg">
   100	                <h4 className="font-semibold mb-2">Data Processing</h4>
   101	                <ul className="text-sm text-muted-foreground space-y-1">
   102	                  <li>• On-device processing where possible</li>
   103	                  <li>• Minimal data retention policies</li>
   104	                  <li>• Encrypted storage and data transfer</li>
   105	                  <li>• Automatic data purging</li>
   106	                  <li>• No third-party data sharing</li>
   107	                </ul>
   108	              </div>
   109	            </div>
   110	          </div>
   111	      )
   112	    },
   113	    {
   114	      id: 'compliance',
   115	      title: 'Compliance Roadmap',
   116	      icon: FileText,
   117	      content: (
   118	          <div className="space-y-4">
   119	            <p className="text-muted-foreground">
   120	              We're committed to meeting the highest compliance standards for enterprise deployment.
   121	            </p>
   122	            <div className="space-y-3">
   123	              <div className="flex items-center justify-between p-3 bg-success/10 rounded-lg">
   124	                <span className="font-medium">GDPR Compliance</span>
   125	                <span className="text-success text-sm font-medium">Ready</span>
   126	              </div>
   127	              <div className="flex items-center justify-between p-3 bg-warning/10 rounded-lg">
   128	                <span className="font-medium">HIPAA Compliance</span>
   129	                <span className="text-warning text-sm font-medium">Ready</span>
   130	              </div>
   131	              <div className="flex items-center justify-between p-3 bg-muted/10 rounded-lg">
   132	                <span className="font-medium">SOC 2 Type II</span>
   133	                <span className="text-muted-foreground text-sm font-medium">Q4 2025</span>
   134	              </div>
   135	              <div className="flex items-center justify-between p-3 bg-muted/10 rounded-lg">
   136	                <span className="font-medium">ISO 27001</span>
   137	                <span className="text-muted-foreground text-sm font-medium">Q4 2025</span>
   138	              </div>
   139	            </div>
   140	          </div>
   141	      )
   142	    },
   143	    {
   144	      id: 'architecture',
   145	      title: 'Architecture Summary',
   146	      icon: Building,
   147	      content: (
   148	          <div className="space-y-4">
   149	            <p className="text-muted-foreground">
   150	              High-level overview of our secure, scalable architecture designed for enterprise needs.
   151	            </p>
   152	            <div className="bg-surface p-6 rounded-lg">
   153	              <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
   154	                <div className="text-center">
   155	                  <div className="bg-primary-light p-3 rounded-lg w-fit mx-auto mb-3">
   156	                    <Shield className="h-6 w-6 text-primary" />
   157	                  </div>
   158	                  <h4 className="font-semibold mb-2">Edge Security</h4>
   159	                  <p className="text-sm text-muted-foreground">
   160	                    Device-level encryption and processing
   161	                  </p>
   162	                </div>
   163	                <div className="text-center">
   164	                  <div className="bg-accent-brand-light p-3 rounded-lg w-fit mx-auto mb-3">
   165	                    <Globe className="h-6 w-6 text-accent-brand" />
   166	                  </div>
   167	                  <h4 className="font-semibold mb-2">Distributed AI</h4>
   168	                  <p className="text-sm text-muted-foreground">
   169	                    Scalable AI processing infrastructure
   170	                  </p>
   171	                </div>
   172	                <div className="text-center">
   173	                  <div className="bg-success/20 p-3 rounded-lg w-fit mx-auto mb-3">
   174	                    <Users className="h-6 w-6 text-success" />
   175	                  </div>
   176	                  <h4 className="font-semibold mb-2">Enterprise Admin</h4>
   177	                  <p className="text-sm text-muted-foreground">
   178	                    Centralized management and controls
   179	                  </p>
   180	                </div>
   181	              </div>
   182	            </div>
   183	          </div>
   184	      )
   185	    },
   186	    {
   187	      id: 'deployment',
   188	      title: 'Deployment Options',
   189	      icon: Globe,
   190	      content: (
   191	          <div className="space-y-4">
   192	            <p className="text-muted-foreground">
   193	              Flexible deployment options to meet your organization's security and compliance requirements.
   194	            </p>
   195	            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
   196	              <Card className="p-6">
   197	                <h4 className="font-semibold mb-3">Cloud Deployment</h4>
   198	                <ul className="text-sm text-muted-foreground space-y-2">
   199	                  <li>• Multi-region availability</li>
   200	                  <li>• Auto-scaling infrastructure</li>
   201	                  <li>• 99.9% uptime SLA</li>
   202	                  <li>• Managed updates and security</li>
   203	                </ul>
   204	              </Card>
   205	              <Card className="p-6">
   206	                <h4 className="font-semibold mb-3">On-Premises</h4>
   207	                <ul className="text-sm text-muted-foreground space-y-2">
   208	                  <li>• Full data control</li>
   209	                  <li>• Air-gapped deployment</li>
   210	                  <li>• Custom security policies</li>
   211	                  <li>• Dedicated support team</li>
   212	                </ul>
   213	              </Card>
   214	            </div>
   215	          </div>
   216	      )
   217	    }
   218	  ];
   219	
   220	  // -------- Customer Solutions (tables revealed on click) --------
   221	  type Row = { feature: string; description: string };
   222	  const customerSegments: {
   223	    id: string;
   224	    title: string;
   225	    icon: React.ComponentType<{ className?: string }>;
   226	    rows: Row[];
   227	  }[] = [
   228	    {
   229	      id: 'doctors',
   230	      title: 'For Doctors',
   231	      icon: Stethoscope,
   232	      rows: [
   233	        { feature: 'HIPAA-ready architecture', description: 'Zero-access design with on-device PHI processing and optional encrypted sync.' },
   234	        { feature: 'BAA & auditing', description: 'Business Associate Agreement available; audit logs and breach workflows.' },
   235	        { feature: 'Clinical language models', description: 'Medical terminology translation, dictation tuning, drug & procedure vocab.' },
   236	        { feature: 'Document Creation', description: 'Transcribing and creating your documents, just for you to sign' },
   237	        { feature: 'Secure recordings & transcripts', description: 'Local encryption, retention controls, and clinician-managed sharing.' },
   238	        { feature: 'Role-based access', description: 'Provider/staff roles, approval queues, and granular permissions.' },
   239	        { feature: 'Offline / air-gapped mode', description: 'Works in low-connectivity clinics for translations; queued sync when policy allows.' },
   240	        { feature: 'Custom Server', description: 'We can host on your server or in your environment everything' },
   241	      ],
   242	    },
   243	    {
   244	      id: 'lawyers',
   245	      title: 'For Lawyers',
   246	      icon: Gavel,
   247	      rows: [
   248	        { feature: 'Privilege mode', description: 'Local-only processing and no-retention by default to preserve privilege.' },
   249	        { feature: 'Citation-aware drafting', description: 'Case law summaries with backlinking; Bluebook-style references.' },
   250	        { feature: 'Contract review & redaction', description: 'Clause extraction, risk flags, version compare, automatic redaction.' },
   251	        { feature: 'Document Creation', description: 'Transcribing and creating your documents, just for you to sign' },
   252	        { feature: 'Client–matter tagging', description: 'Tag outputs by client/matter; export bundles for DMS and billing.' },
   253	        { feature: 'Legal holds & retention', description: 'Hold policies, time-based purge, and export for records management.' },
   254	        { feature: 'Custom Server', description: 'We can host on your server or in your environment everything' },
   255	
   256	      ],
   257	    },
   258	    {
   259	      id: 'schools',
   260	      title: 'For Schools',
   261	      icon: GraduationCap,
   262	      rows: [
   263	        { feature: 'Student privacy first', description: 'No data collection; admin policies aligned with school privacy needs.' },
   264	        { feature: 'Classroom mode', description: 'Safe responses, profanity/harassment filters, teacher controls.' },
   265	        { feature: 'Live translation & captions', description: 'Real-time translation for classes and parent meetings; multi-headphone support.' },
   266	        { feature: 'School Chat', description: 'Students can talk directly to their peers or to their professors (group chats)' },
   267	        { feature: 'Accessibility', description: 'Captions, TTS, and dyslexia-friendly display options.' },
   268	        { feature: 'Admin dashboards', description: 'Org/class analytics, device fleet health, and policy enforcement.' },
   269	        { feature: 'Custom Server', description: 'We can host on your server or in your environment everything' },
   270	
   271	      ],
   272	    },
   273	    {
   274	      id: 'enterprises',
   275	      title: 'For Enterprises',
   276	      icon: Building,
   277	      rows: [
   278	        { feature: 'Integrate your business into AI', description: 'Integrates everything from your business to get AI solutions' },
   279	        { feature: 'Enterprise Chat', description: 'Talk to your employees privately and securily in any language.' },
   280	        { feature: 'Data boundaries & DLP', description: 'Region pinning, redaction policies, and data loss prevention.' },
   281	        { feature: 'MDM posture checks', description: 'Intune/Workspace ONE compliance gates and device attestation.' },
   282	        { feature: 'Private tenant / VPC', description: 'Dedicated resources, private peering, and custom SLAs.' },
   283	        { feature: 'On-prem / air-gapped', description: 'Deploy behind your firewall with full data control.' },
   284	        { feature: 'SLA & support', description: '99.9%+ uptime target and priority support options.' },
   285	        { feature: 'Custom Server', description: 'We can host on your server or in your environment everything' },
   286	
   287	      ],
   288	    },
   289	  ];
   290	
   291	  const FeatureTable = ({ rows }: { rows: Row[] }) => (
   292	      <div className="mt-4 overflow-x-auto rounded-lg border">
   293	        <table className="w-full text-sm">
   294	          <thead className="bg-surface">
   295	          <tr>
   296	            <th className="text-left px-4 py-3 font-medium">Feature</th>
   297	            <th className="text-left px-4 py-3 font-medium">Description</th>
   298	          </tr>
   299	          </thead>
   300	          <tbody>
   301	          {rows.map((r, i) => (
   302	              <tr key={r.feature} className={i % 2 === 0 ? 'bg-white' : 'bg-surface'}>
   303	                <td className="px-4 py-3 font-medium">{r.feature}</td>
   304	                <td className="px-4 py-3 text-muted-foreground">{r.description}</td>
   305	              </tr>
   306	          ))}
   307	          </tbody>
   308	        </table>
   309	      </div>
   310	  );
   311	
   312	  return (
   313	      <div className="min-h-screen bg-gradient-subtle">
   314	        <div className="mx-auto max-w-6xl px-4 py-16 sm:px-6 lg:px-8">
   315	          {/* Header */}
   316	          <div className="text-center mb-10">
   317	            <h1 className="mb-6">
   318	              <span className="gradient-text">Enterprise & Security</span>
   319	            </h1>
   320	            <p className="text-xl text-muted-foreground max-w-3xl mx-auto">
   321	              Built for enterprise deployment with industry-leading security, compliance,
   322	              and privacy protection. Your data stays yours.
   323	            </p>
   324	          </div>
   325	
   326	          {/* DISTINCT BAND: Solutions by Industry */}
   327	          <section className="mb-16">
   328	            <div className="rounded-2xl border bg-white shadow-sm p-6 md:p-8">
   329	              <div className="flex items-end justify-between mb-6">
   330	                <div>
   331	                  <h2 className="mb-1">Solutions by Industry</h2>
   332	                  <p className="text-sm text-muted-foreground">
   333	                    Choose your sector to see tailored capabilities.
   334	                  </p>
   335	                </div>
   336	              </div>
   337	
   338	              {/* 4-column responsive grid */}
   339	              <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-6">
   340	                {customerSegments.map((seg) => {
   341	                  const isOpen = openCustomers.includes(seg.id);
   342	                  return (
   343	                      <Card key={seg.id} className="overflow-hidden">
   344	                        <Collapsible
   345	                            open={isOpen}
   346	                            onOpenChange={() => toggleCustomer(seg.id)}
   347	                        >
   348	                          <CollapsibleTrigger className="w-full" aria-expanded={isOpen}>
   349	                            <div className="flex items-center justify-between p-4 hover:bg-surface/50 transition-colors">
   350	                              <div className="flex items-center space-x-3">
   351	                                <div className="bg-gradient-hero p-2 rounded-lg">
   352	                                  <seg.icon className="h-5 w-5 text-white" />
   353	                                </div>
   354	                                <h3 className="font-semibold text-left">{seg.title}</h3>
   355	                              </div>
   356	                              {isOpen ? (
   357	                                  <ChevronDown className="h-5 w-5 text-muted-foreground" />
   358	                              ) : (
   359	                                  <ChevronRight className="h-5 w-5 text-muted-foreground" />
   360	                              )}
   361	                            </div>
   362	                          </CollapsibleTrigger>
   363	
   364	                          <CollapsibleContent className="px-4 pb-4">
   365	                            <FeatureTable rows={seg.rows} />
   366	                          </CollapsibleContent>
   367	                        </Collapsible>
   368	                      </Card>
   369	                  );
   370	                })}
   371	              </div>
   372	            </div>
   373	          </section>
   374	
   375	          {/* Security Sections */}
   376	          <div className="space-y-6 mb-16">
   377	            {securitySections.map((section) => (
   378	                <Card key={section.id} className="overflow-hidden">
   379	                  <Collapsible
   380	                      open={openSections.includes(section.id)}
   381	                      onOpenChange={() => toggleSection(section.id)}
   382	                  >
   383	                    <CollapsibleTrigger className="w-full">
   384	                      <div className="flex items-center justify-between p-6 hover:bg-surface/50 transition-colors">
   385	                        <div className="flex items-center space-x-4">
   386	                          <div className="bg-gradient-hero p-2 rounded-lg">
   387	                            <section.icon className="h-5 w-5 text-white" />
   388	                          </div>
   389	                          <h3 className="text-lg font-semibold text-left">{section.title}</h3>
   390	                        </div>
   391	                        {openSections.includes(section.id) ? (
   392	                            <ChevronDown className="h-5 w-5 text-muted-foreground" />
   393	                        ) : (
   394	                            <ChevronRight className="h-5 w-5 text-muted-foreground" />
   395	                        )}
   396	                      </div>
   397	                    </CollapsibleTrigger>
   398	                    <CollapsibleContent className="px-6 pb-6">
   399	                      {section.content}
   400	                    </CollapsibleContent>
   401	                  </Collapsible>
   402	                </Card>
   403	            ))}
   404	          </div>
   405	
   406	          {/* Request Documentation Form */}
   407	          <Card className="p-8">
   408	            <div className="max-w-2xl mx-auto">
   409	              <div className="text-center mb-8">
   410	                <h2 className="mb-4">Request Security Documentation</h2>
   411	                <p className="text-muted-foreground">
   412	                  Get detailed security documentation, compliance reports, and architecture diagrams.
   413	                </p>
   414	              </div>
   415	
   416	              <form onSubmit={handleFormSubmit} className="space-y-6">
   417	                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
   418	                  <div>
   419	                    <label className="block text-sm font-medium mb-2">Name *</label>
   420	                    <Input
   421	                        required
   422	                        value={formData.name}
   423	                        onChange={(e) => setFormData({ ...formData, name: e.target.value })}
   424	                        placeholder="Your full name"
   425	                    />
   426	                  </div>
   427	                  <div>
   428	                    <label className="block text-sm font-medium mb-2">Company *</label>
   429	                    <Input
   430	                        required
   431	                        value={formData.company}
   432	                        onChange={(e) => setFormData({ ...formData, company: e.target.value })}
   433	                        placeholder="Company name"
   434	                    />
   435	                  </div>
   436	                </div>
   437	
   438	                <div>
   439	                  <label className="block text-sm font-medium mb-2">Email *</label>
   440	                  <Input
   441	                      type="email"
   442	                      required
   443	                      value={formData.email}
   444	                      onChange={(e) => setFormData({ ...formData, email: e.target.value })}
   445	                      placeholder="your.email@company.com"
   446	                  />
   447	                </div>
   448	
   449	                <div>
   450	                  <label className="block text-sm font-medium mb-2">Message</label>
   451	                  <Textarea
   452	                      value={formData.message}
   453	                      onChange={(e) => setFormData({ ...formData, message: e.target.value })}
   454	                      placeholder="Tell us about your security requirements and use case..."
   455	                      rows={4}
   456	                  />
   457	                </div>
   458	
   459	                <Button type="submit" className="btn-hero w-full">
   460	                  <Download className="mr-2 h-4 w-4" />
   461	                  Request Security Docs PDF
   462	                </Button>
   463	              </form>
   464	            </div>
   465	          </Card>
   466	        </div>
   467	      </div>
   468	  );
   469	};
   470	
   471	export default Business;

========== FILE: ./src/pages/Contact.tsx ==========

     1	import React, { useState } from 'react';
     2	import { Mail, MessageSquare, Send, Phone, MapPin } from 'lucide-react';
     3	import { Button } from '@/components/ui/button';
     4	import { Card } from '@/components/ui/card';
     5	import { Input } from '@/components/ui/input';
     6	import { Textarea } from '@/components/ui/textarea';
     7	import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
     8	import { useToast } from '@/hooks/use-toast';
     9	
    10	// Allow TS to know about the Crisp global
    11	declare global {
    12	  interface Window {
    13	    $crisp?: any[];
    14	  }
    15	}
    16	
    17	// Opens the Crisp chat popup; retries briefly if the script isn't ready yet
    18	function openCrispChat() {
    19	  if (typeof window === 'undefined') return;
    20	
    21	  if (window.$crisp) {
    22	    window.$crisp.push(['do', 'chat:open']);
    23	    return;
    24	  }
    25	
    26	  let tries = 0;
    27	  const iv = setInterval(() => {
    28	    if (window.$crisp) {
    29	      window.$crisp.push(['do', 'chat:open']);
    30	      clearInterval(iv);
    31	    } else if (++tries > 40) {
    32	      clearInterval(iv); // stop after ~10s
    33	    }
    34	  }, 250);
    35	}
    36	
    37	const Contact = () => {
    38	  const [formData, setFormData] = useState({
    39	    name: '',
    40	    email: '',
    41	    category: '',
    42	    message: ''
    43	  });
    44	  const { toast } = useToast();
    45	
    46	  const handleSubmit = (e: React.FormEvent) => {
    47	    e.preventDefault();
    48	    toast({
    49	      title: "Message Sent!",
    50	      description: "We'll get back to you within 24 hours."
    51	    });
    52	    setFormData({
    53	      name: '',
    54	      email: '',
    55	      category: '',
    56	      message: ''
    57	    });
    58	  };
    59	
    60	  const contactMethods = [
    61	    {
    62	      icon: Mail,
    63	      title: 'Email Us',
    64	      description: 'Send us an email and we\'ll respond within 24 hours',
    65	      contact: 'constantine@vavusai.com',
    66	      action: 'mailto:constantine@vavusai.com'
    67	    },
    68	    {
    69	      icon: MessageSquare,
    70	      title: 'Start a Chat',
    71	      description: 'Get instant answers to your questions',
    72	      contact: 'Live Chat',
    73	      action: '#'
    74	    },
    75	    {
    76	      icon: Phone,
    77	      title: 'Call Us',
    78	      description: 'Speak with our team directly',
    79	      contact: '+1 (347) 973-1974',
    80	      action: 'tel:+13479731974'
    81	    }
    82	  ];
    83	
    84	  const offices = [
    85	    {
    86	      city: 'Casper',
    87	      address: '312 W 2nd St, Casper, WY 82601',
    88	      description: 'Our main headquarters and AI research lab'
    89	    },
    90	  ];
    91	
    92	  return (
    93	      <div className="min-h-screen bg-gradient-subtle">
    94	        <div className="mx-auto max-w-6xl px-4 py-16 sm:px-6 lg:px-8">
    95	          {/* Header */}
    96	          <div className="text-center mb-16">
    97	            <h1 className="mb-6">
    98	              <span className="gradient-text">Get in Touch</span>
    99	            </h1>
   100	            <p className="text-xl text-muted-foreground max-w-3xl mx-auto">
   101	              Have questions about VAVUS AI? Want to partner with us? Or just want to say hello?
   102	              We'd love to hear from you.
   103	            </p>
   104	          </div>
   105	
   106	          {/* Contact Methods */}
   107	          <div className="grid grid-cols-1 md:grid-cols-3 gap-8 mb-16">
   108	            {contactMethods.map((method) => (
   109	                <Card key={method.title} className="p-6 text-center hover:shadow-lg transition-shadow">
   110	                  <div className="bg-gradient-hero p-3 rounded-lg w-fit mx-auto mb-4">
   111	                    <method.icon className="h-6 w-6 text-white" />
   112	                  </div>
   113	                  <h3 className="font-semibold mb-2">{method.title}</h3>
   114	                  <p className="text-muted-foreground text-sm mb-4">{method.description}</p>
   115	
   116	                  {method.contact === 'Live Chat' ? (
   117	                      <a
   118	                          href="#"
   119	                          onClick={(e) => {
   120	                            e.preventDefault();
   121	                            openCrispChat();
   122	                          }}
   123	                          className="text-primary hover:text-primary-hover font-medium text-sm"
   124	                      >
   125	                        {method.contact}
   126	                      </a>
   127	                  ) : (
   128	                      <a
   129	                          href={method.action}
   130	                          className="text-primary hover:text-primary-hover font-medium text-sm"
   131	                      >
   132	                        {method.contact}
   133	                      </a>
   134	                  )}
   135	                </Card>
   136	            ))}
   137	          </div>
   138	
   139	          <div className="grid grid-cols-1 lg:grid-cols-2 gap-12">
   140	            {/* Contact Form */}
   141	            <Card className="p-8">
   142	              <div className="mb-8">
   143	                <h2 className="mb-4">Send us a Message</h2>
   144	                <p className="text-muted-foreground">
   145	                  Fill out the form below and we'll get back to you as soon as possible.
   146	                </p>
   147	              </div>
   148	
   149	              <form onSubmit={handleSubmit} className="space-y-6">
   150	                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
   151	                  <div>
   152	                    <label className="block text-sm font-medium mb-2">Name *</label>
   153	                    <Input
   154	                        required
   155	                        value={formData.name}
   156	                        onChange={(e) => setFormData({...formData, name: e.target.value})}
   157	                        placeholder="Your full name"
   158	                    />
   159	                  </div>
   160	                  <div>
   161	                    <label className="block text-sm font-medium mb-2">Email *</label>
   162	                    <Input
   163	                        type="email"
   164	                        required
   165	                        value={formData.email}
   166	                        onChange={(e) => setFormData({...formData, email: e.target.value})}
   167	                        placeholder="your.email@example.com"
   168	                    />
   169	                  </div>
   170	                </div>
   171	
   172	                <div>
   173	                  <label className="block text-sm font-medium mb-2">Category *</label>
   174	                  <Select value={formData.category} onValueChange={(value) => setFormData({...formData, category: value})}>
   175	                    <SelectTrigger>
   176	                      <SelectValue placeholder="What can we help you with?" />
   177	                    </SelectTrigger>
   178	                    <SelectContent>
   179	                      <SelectItem value="support">Support</SelectItem>
   180	                      <SelectItem value="sales">Sales Inquiry</SelectItem>
   181	                      <SelectItem value="partnership">Partnership</SelectItem>
   182	                      <SelectItem value="press">Press & Media</SelectItem>
   183	                      <SelectItem value="general">General Question</SelectItem>
   184	                    </SelectContent>
   185	                  </Select>
   186	                </div>
   187	
   188	                <div>
   189	                  <label className="block text-sm font-medium mb-2">Message *</label>
   190	                  <Textarea
   191	                      required
   192	                      value={formData.message}
   193	                      onChange={(e) => setFormData({...formData, message: e.target.value})}
   194	                      placeholder="Tell us how we can help you..."
   195	                      rows={6}
   196	                  />
   197	                </div>
   198	
   199	                <Button type="submit" className="btn-hero w-full">
   200	                  <Send className="mr-2 h-4 w-4" />
   201	                  Send Message
   202	                </Button>
   203	              </form>
   204	            </Card>
   205	
   206	            {/* Office Locations & Info */}
   207	            <div className="space-y-8">
   208	              {/* Offices */}
   209	              <Card className="p-8">
   210	                <div className="flex items-center space-x-3 mb-6">
   211	                  <MapPin className="h-6 w-6 text-primary" />
   212	                  <h2>Our Offices</h2>
   213	                </div>
   214	
   215	                <div className="space-y-6">
   216	                  {offices.map((office) => (
   217	                      <div key={office.city} className="border-l-2 border-primary pl-4">
   218	                        <h3 className="font-semibold text-lg">{office.city}</h3>
   219	                        <p className="text-muted-foreground text-sm whitespace-pre-line mb-2">
   220	                          {office.address}
   221	                        </p>
   222	                        <p className="text-muted-foreground text-sm">{office.description}</p>
   223	                      </div>
   224	                  ))}
   225	                </div>
   226	              </Card>
   227	
   228	              {/* FAQ */}
   229	              <Card className="p-8">
   230	                <h2 className="mb-6">Frequently Asked Questions</h2>
   231	
   232	                <div className="space-y-4">
   233	                  <div>
   234	                    <h3 className="font-semibold mb-2">When will VAVUS devices be available?</h3>
   235	                    <p className="text-muted-foreground text-sm">
   236	                      We're planning to launch our first devices in Q1 2025. Sign up for updates to be notified.
   237	                    </p>
   238	                  </div>
   239	
   240	                  <div>
   241	                    <h3 className="font-semibold mb-2">Is my data private and secure?</h3>
   242	                    <p className="text-muted-foreground text-sm">
   243	                      Yes! We use end-to-end encryption and a zero-knowledge architecture. We cannot access your data.
   244	                    </p>
   245	                  </div>
   246	
   247	                  <div>
   248	                    <h3 className="font-semibold mb-2">Do you offer enterprise solutions?</h3>
   249	                    <p className="text-muted-foreground text-sm">
   250	                      Yes, we offer enterprise-grade solutions with additional security and compliance features.
   251	                    </p>
   252	                  </div>
   253	
   254	                  <div>
   255	                    <h3 className="font-semibold mb-2">Can I try VAVUS AI before purchasing?</h3>
   256	                    <p className="text-muted-foreground text-sm">
   257	                      You can try our limited demo features on the translate and AI chat pages. Full features require a device.
   258	                    </p>
   259	                  </div>
   260	                </div>
   261	              </Card>
   262	
   263	              {/* Response Time */}
   264	              <Card className="p-6 bg-gradient-hero text-white text-center">
   265	                <h3 className="font-semibold mb-2">Quick Response Promise</h3>
   266	                <p className="text-sm opacity-90">
   267	                  We typically respond to all inquiries within 24 hours during business days.
   268	                  For urgent matters, please call us directly.
   269	                </p>
   270	              </Card>
   271	            </div>
   272	          </div>
   273	        </div>
   274	      </div>
   275	  );
   276	};
   277	
   278	export default Contact;

========== FILE: ./src/pages/Index.tsx ==========

     1	import React, { useState, useEffect } from 'react';
     2	import { Link } from 'react-router-dom';
     3	import {
     4	  ArrowRight,
     5	  Globe,
     6	  MessageSquare,
     7	  Smartphone,
     8	  Lock,
     9	  Check,
    10	} from 'lucide-react';
    11	import { Button } from '@/components/ui/button';
    12	import { Input } from '@/components/ui/input';
    13	import { SubscribeModal } from '@/components/ui/subscribe-modal';
    14	import DeviceShowcase from '../components/DeviceShowcase';
    15	
    16	import { supabase } from '@/lib/supabase';
    17	import { useSession } from '@/hooks/useSession';
    18	
    19	const Index: React.FC = () => {
    20	  const [email, setEmail] = useState('');
    21	  const [showSubscribeModal, setShowSubscribeModal] = useState(false);
    22	
    23	  // subscribe form status
    24	  const [subStatus, setSubStatus] = useState<'idle' | 'loading' | 'ok' | 'error'>('idle');
    25	  const [subMsg, setSubMsg] = useState('');
    26	  const { session } = useSession();
    27	
    28	  // Track if this browser has already subscribed
    29	  const [hasSubscribed, setHasSubscribed] = useState<boolean>(() => {
    30	    if (typeof window === 'undefined') return false;
    31	    return localStorage.getItem('vavus_subscribed') === '1';
    32	  });
    33	
    34	  // Exit-intent popup – only if NOT subscribed and NOT logged in
    35	  useEffect(() => {
    36	    if (typeof window === 'undefined' || hasSubscribed || session) return;
    37	
    38	    const handleMouseLeave = (e: MouseEvent) => {
    39	      if (e.clientY <= 0 && !hasSubscribed && !session) {
    40	        setShowSubscribeModal(true);
    41	      }
    42	    };
    43	
    44	    const timer = window.setTimeout(() => {
    45	      document.addEventListener('mouseleave', handleMouseLeave);
    46	    }, 10000); // Show after 10 seconds
    47	
    48	    return () => {
    49	      window.clearTimeout(timer);
    50	      document.removeEventListener('mouseleave', handleMouseLeave);
    51	    };
    52	  }, [hasSubscribed, session]);
    53	
    54	  // === Edgy Kickstarter copy ===
    55	  const features = [
    56	    {
    57	      icon: Globe,
    58	      title: '419 languages. No borders.',
    59	      description:
    60	          'Real-time speech ↔ text with clean AI notes. Built for messy rooms and bad mics.',
    61	    },
    62	    {
    63	      icon: MessageSquare,
    64	      title: 'Vavus AI — Top 3 overall.',
    65	      description:
    66	          'Hosted on our servers for speed and reliability. Tap specialist agents: Legal, Medical, Tutor, Professor.',
    67	    },
    68	    {
    69	      icon: Lock,
    70	      title: 'Zero-Telemetry Privacy.',
    71	      description:
    72	          'We don’t collect content or usage. End-to-end encrypted chats between devices. Your keys, your call.',
    73	    },
    74	    {
    75	      icon: Smartphone,
    76	      title: 'Vavus OS — No trackers.',
    77	      description:
    78	          'No social feeds. No Google tracking. FIPS-only crypto across OS and apps.',
    79	    },
    80	  ];
    81	
    82	  const socialProofLogos = ['TechCorp', 'GlobalCom', 'InnovateLab', 'FutureSync'];
    83	
    84	  function isEmail(v: string) {
    85	    return /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(v);
    86	  }
    87	
    88	  async function handleSubscribe(e: React.FormEvent<HTMLFormElement>) {
    89	    e.preventDefault();
    90	    const value = email.trim().toLowerCase();
    91	
    92	    if (!isEmail(value)) {
    93	      setSubStatus('error');
    94	      setSubMsg('Please enter a valid email.');
    95	      return;
    96	    }
    97	
    98	    setSubStatus('loading');
    99	    setSubMsg('');
   100	
   101	    try {
   102	      const page = window.location.pathname;
   103	      const utm = window.location.search.slice(1);
   104	
   105	      // ⬇️ Plain INSERT; duplicate emails are treated as success
   106	      const { error } = await supabase
   107	          .from('subscriptions')
   108	          .insert([{ email: value, user_id: session?.user?.id ?? null, page, utm }]);
   109	
   110	      if (error) {
   111	        if (error.code === '23505' || /duplicate key|unique/i.test(error.message)) {
   112	          // treat duplicate as success
   113	        } else {
   114	          throw error;
   115	        }
   116	      }
   117	
   118	      // Mark as subscribed on this browser, hide popup
   119	      localStorage.setItem('vavus_subscribed', '1');
   120	      setHasSubscribed(true);
   121	      setShowSubscribeModal(false);
   122	
   123	      setSubStatus('ok');
   124	      setSubMsg("You’re in. We’ll ping you before we go live.");
   125	      setEmail('');
   126	    } catch (err: any) {
   127	      console.error('[Index] Subscribe error:', err);
   128	      setSubStatus('error');
   129	      setSubMsg(err?.message || 'Something went wrong. Please try again.');
   130	    } finally {
   131	      setTimeout(() => setSubStatus('idle'), 4000);
   132	    }
   133	  }
   134	
   135	  return (
   136	      <div className="relative">
   137	        {/* Device Showcase Section */}
   138	        <DeviceShowcase />
   139	
   140	        {/* Hero Section */}
   141	        <section className="relative overflow-hidden bg-gradient-subtle">
   142	          <div className="absolute inset-0 bg-gradient-to-r from-primary/5 to-accent-brand/5" />
   143	          <div className="relative mx-auto max-w-7xl px-4 py-24 sm:px-6 lg:px-8">
   144	            <div className="text-center">
   145	              <h1 className="mb-8 animate-fade-in">
   146	                <span className="gradient-text">Meet the first HIPAA-grade AI Device.</span>
   147	                <br />
   148	                Zero telemetry. FIPS-only. Vavus AI (Top 3 overall).
   149	              </h1>
   150	
   151	              <p className="mx-auto mb-12 max-w-2xl text-xl text-muted-foreground animate-slide-up">
   152	                Translation, transcription, and specialist agents—without the tracking. Device-to-device chats stay sealed. We can’t see your messages—or your metadata.
   153	              </p>
   154	
   155	              <div className="flex flex-col sm:flex-row gap-4 justify-center items-center animate-slide-up">
   156	                <Link to="/kickstarter">
   157	                  <Button className="btn-hero group">
   158	                    Back on Kickstarter
   159	                    <ArrowRight className="ml-2 h-5 w-5 group-hover:translate-x-1 transition-transform" />
   160	                  </Button>
   161	                </Link>
   162	
   163	                <Link to="/ai">
   164	                  <Button className="btn-secondary">
   165	                    <MessageSquare className="mr-2 h-5 w-5" />
   166	                    Try AI Chat
   167	                  </Button>
   168	                </Link>
   169	              </div>
   170	
   171	              {/* Device Notice */}
   172	              <div className="mt-8 p-4 bg-accent-brand-light border border-accent-brand/20 rounded-lg max-w-lg mx-auto">
   173	                <p className="text-sm text-accent-brand font-medium">
   174	                  <Smartphone className="inline h-4 w-4 mr-1" />
   175	                  Accounts will require a Vavus Device after launch. Kickstarter backers ship first.
   176	                </p>
   177	              </div>
   178	            </div>
   179	          </div>
   180	        </section>
   181	
   182	        {/* Meet the Device */}
   183	        <section className="py-20 bg-white border-t">
   184	          <div className="mx-auto max-w-5xl px-4 sm:px-6 lg:px-8">
   185	            <div className="mb-8 text-center">
   186	              <h2 className="mb-3">Meet the Device</h2>
   187	              <p className="text-lg text-muted-foreground">HIPAA-grade AI. Access without surveillance.</p>
   188	            </div>
   189	            <ul className="grid grid-cols-1 sm:grid-cols-2 gap-4">
   190	              <li className="flex items-start gap-3"><Check className="h-5 w-5 mt-1" /><span><strong>419-language translation</strong> in real time.</span></li>
   191	              <li className="flex items-start gap-3"><Check className="h-5 w-5 mt-1" /><span><strong>Live transcription & AI notes</strong> for meetings and calls.</span></li>
   192	              <li className="flex items-start gap-3"><Check className="h-5 w-5 mt-1" /><span><strong>Vavus AI — Top 3 overall</strong>, hosted on our servers for speed and reliability.</span></li>
   193	              <li className="flex items-start gap-3"><Check className="h-5 w-5 mt-1" /><span><strong>Specialist agents</strong>: Legal, Medical, Tutor, Professor.</span></li>
   194	              <li className="flex items-start gap-3"><Check className="h-5 w-5 mt-1" /><span><strong>Zero telemetry & end-to-end encrypted chats</strong> between devices.</span></li>
   195	              <li className="flex items-start gap-3"><Check className="h-5 w-5 mt-1" /><span><strong>Vavus OS — no social media, no Google tracking</strong>; <strong>FIPS-only encryption</strong> across OS & apps.</span></li>
   196	              <li className="flex items-start gap-3"><Check className="h-5 w-5 mt-1" /><span><strong>HIPAA Mode (optional)</strong>: on-device audit; encrypted uploads under your keys; <strong>BAA available</strong>.</span></li>
   197	              <li className="flex items-start gap-3"><Check className="h-5 w-5 mt-1" /><span><strong>No-Guardrails Research Mode</strong>: open topic for lawful research (no step-by-step harm).</span></li>
   198	            </ul>
   199	          </div>
   200	        </section>
   201	
   202	        {/* Features Grid */}
   203	        <section className="py-24 bg-white">
   204	          <div className="mx-auto max-w-7xl px-4 sm:px-6 lg:px-8">
   205	            <div className="text-center mb-16">
   206	              <h2 className="mb-4">What the Device Gets You</h2>
   207	              <p className="text-xl text-muted-foreground max-w-2xl mx-auto">
   208	                Speed, privacy, and specialist intelligence—without the surveillance.
   209	              </p>
   210	            </div>
   211	
   212	            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-8">
   213	              {features.map((feature, index) => (
   214	                  <div
   215	                      key={feature.title}
   216	                      className="feature-card text-center"
   217	                      style={{ animationDelay: `${index * 100}ms` }}
   218	                  >
   219	                    <div className="bg-gradient-hero p-3 rounded-lg w-fit mx-auto mb-4">
   220	                      <feature.icon className="h-6 w-6 text-white" />
   221	                    </div>
   222	                    <h3 className="text-lg font-semibold mb-2 text-foreground">
   223	                      {feature.title}
   224	                    </h3>
   225	                    <p className="text-muted-foreground">{feature.description}</p>
   226	                  </div>
   227	              ))}
   228	            </div>
   229	          </div>
   230	        </section>
   231	
   232	        {/* Social Proof */}
   233	        <section className="py-16 bg-surface">
   234	          <div className="mx-auto max-w-7xl px-4 sm:px-6 lg:px-8">
   235	            <div className="text-center">
   236	              <p className="text-muted-foreground mb-6">Trust, not tracking</p>
   237	              <div className="flex flex-wrap justify-center items-center gap-3">
   238	                {['FIPS-Only Encryption', 'Zero Telemetry', 'End-to-End Encrypted Chats', 'HIPAA Mode (Optional)', 'BAA Available'].map((badge) => (
   239	                    <span
   240	                        key={badge}
   241	                        className="rounded-full border border-muted px-3 py-1 text-sm text-muted-foreground/90 bg-white"
   242	                    >
   243	                  {badge}
   244	                </span>
   245	                ))}
   246	              </div>
   247	            </div>
   248	          </div>
   249	        </section>
   250	
   251	        {/* Newsletter Section */}
   252	        <section className="py-24 bg-white">
   253	          <div className="mx-auto max-w-7xl px-4 sm:px-6 lg:px-8">
   254	            <div className="bg-gradient-hero rounded-xl p-8 md:p-12 text-center text-white">
   255	              <h2 className="mb-4 text-white">Get in early</h2>
   256	              <p className="mb-8 text-lg opacity-90 max-w-2xl mx-auto">
   257	                Early-bird pricing, limited units, and launch updates.
   258	              </p>
   259	
   260	              <form
   261	                  className="flex flex-col sm:flex-row gap-4 max-w-md mx-auto"
   262	                  onSubmit={handleSubscribe}
   263	              >
   264	                <Input
   265	                    type="email"
   266	                    placeholder="your@work.com"
   267	                    value={email}
   268	                    onChange={(e) => setEmail(e.target.value)}
   269	                    className="bg-white/20 border-white/30 text white placeholder:text-white/70 focus:border-white"
   270	                    disabled={subStatus === 'loading'}
   271	                    required
   272	                />
   273	                <Button
   274	                    type="submit"
   275	                    className="bg-white text-primary hover:bg-white/90 font-semibold px-8"
   276	                    disabled={subStatus === 'loading'}
   277	                >
   278	                  {subStatus === 'loading' ? 'Subscribing…' : 'Get Early Access'}
   279	                </Button>
   280	              </form>
   281	
   282	              {subMsg && (
   283	                  <p
   284	                      className={`mt-3 text-sm ${
   285	                          subStatus === 'error' ? 'text-red-200' : 'text-emerald-200'
   286	                      }`}
   287	                  >
   288	                    {subMsg}
   289	                  </p>
   290	              )}
   291	            </div>
   292	          </div>
   293	        </section>
   294	
   295	        {/* Subscribe Modal (won't render once subscribed or when logged in) */}
   296	        <SubscribeModal
   297	            isOpen={showSubscribeModal && !hasSubscribed && !session}
   298	            onClose={() => setShowSubscribeModal(false)}
   299	            onSubscribed={() => {
   300	              localStorage.setItem('vavus_subscribed', '1');
   301	              setHasSubscribed(true);
   302	              setShowSubscribeModal(false);
   303	            }}
   304	        />
   305	      </div>
   306	  );
   307	};
   308	
   309	export default Index;

========== FILE: ./src/pages/Join.tsx ==========

     1	import React, { useState } from 'react';
     2	import { Code, Palette, Handshake, Megaphone, Upload, Send } from 'lucide-react';
     3	import { Button } from '@/components/ui/button';
     4	import { Card } from '@/components/ui/card';
     5	import { Input } from '@/components/ui/input';
     6	import { Textarea } from '@/components/ui/textarea';
     7	import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
     8	import { useToast } from '@/hooks/use-toast';
     9	
    10	const Join = () => {
    11	  const [formData, setFormData] = useState({
    12	    name: '',
    13	    email: '',
    14	    linkedin: '',
    15	    role: '',
    16	    message: ''
    17	  });
    18	  const { toast } = useToast();
    19	
    20	  const opportunities = [
    21	    {
    22	      icon: Code,
    23	      title: 'Engineering',
    24	      description: 'Build the future of AI-powered communication',
    25	      roles: [
    26	        'Chief Technology Officer',
    27	        'AI/ML Engineer', 
    28	        'DevOps Engineer',
    29	        'Mobile Developer React Native - (iOS/Android/Web)',
    30	      ],
    31	      skills: ['React/TypeScript', 'Python/PyTorch', 'Kubernetes', 'Swift/Kotlin', 'Go/Rust']
    32	    },
    33	    {
    34	      icon: Palette,
    35	      title: 'Design',
    36	      description: 'Create beautiful, intuitive experiences for global users',
    37	      roles: [
    38	        'Senior Product Designer',
    39	        'UX Researcher',
    40	        'Design Systems Lead',
    41	        'Brand Designer'
    42	      ],
    43	      skills: ['Figma', 'User Research', 'Design Systems', 'Accessibility', 'Prototyping']
    44	    },
    45	    {
    46	      icon: Handshake,
    47	      title: 'Partnerships',
    48	      description: 'Build strategic relationships and expand our reach',
    49	      roles: [
    50	        'Medical Sales Rep',
    51	        'Influencers',
    52	      ],
    53	      skills: ['Relationship Building', 'Negotiation', 'Strategic Planning', 'Enterprise Sales']
    54	    },
    55	    {
    56	      icon: Megaphone,
    57	      title: 'Marketing',
    58	      description: 'Tell our story and connect with users worldwide',
    59	      roles: [
    60	        'Growth Marketing Manager',
    61	        'Content Marketing Lead',
    62	        'Social Media Marketer',
    63	        'Community Manager'
    64	      ],
    65	      skills: ['Growth Hacking', 'Content Strategy', 'Developer Community', 'Analytics']
    66	    }
    67	  ];
    68	
    69	  const handleSubmit = (e: React.FormEvent) => {
    70	    e.preventDefault();
    71	    toast({
    72	      title: "Application Submitted!",
    73	      description: "We'll review your application and get back to you within a week."
    74	    });
    75	    setFormData({
    76	      name: '',
    77	      email: '',
    78	      linkedin: '',
    79	      role: '',
    80	      message: ''
    81	    });
    82	  };
    83	
    84	  return (
    85	    <div className="min-h-screen bg-gradient-subtle">
    86	      <div className="mx-auto max-w-6xl px-4 py-16 sm:px-6 lg:px-8">
    87	        {/* Header */}
    88	        <div className="text-center mb-16">
    89	          <h1 className="mb-6">
    90	            <span className="gradient-text">Join Our Team</span>
    91	          </h1>
    92	          <p className="text-xl text-muted-foreground max-w-3xl mx-auto">
    93	            Help us break down language barriers and connect the world through 
    94	            AI-powered communication. We're looking for passionate people who want 
    95	            to make a global impact.
    96	          </p>
    97	        </div>
    98	
    99	        {/* Why Join VAVUS */}
   100	        <Card className="p-8 mb-16 bg-gradient-hero text-white">
   101	          <div className="text-center mb-8">
   102	            <h2 className="mb-4 text-white">Why Join VAVUS AI?</h2>
   103	            <p className="text-lg opacity-90 max-w-2xl mx-auto">
   104	              We're building the future of human communication while respecting privacy and security.
   105	            </p>
   106	          </div>
   107	          
   108	          <div className="grid grid-cols-1 md:grid-cols-3 gap-8">
   109	            <div className="text-center">
   110	              <h3 className="font-semibold mb-2">Global Impact</h3>
   111	              <p className="text-sm opacity-80">
   112	                Your work will help millions of people communicate across language barriers
   113	              </p>
   114	            </div>
   115	            <div className="text-center">
   116	              <h3 className="font-semibold mb-2">Cutting-Edge Tech</h3>
   117	              <p className="text-sm opacity-80">
   118	                Work with the latest AI, security, and hardware technologies
   119	              </p>
   120	            </div>
   121	            <div className="text-center">
   122	              <h3 className="font-semibold mb-2">Privacy First</h3>
   123	              <p className="text-sm opacity-80">
   124	                Build products that respect user privacy and data ownership
   125	              </p>
   126	            </div>
   127	          </div>
   128	        </Card>
   129	
   130	        {/* Open Positions */}
   131	        <div className="mb-16">
   132	          <h2 className="text-center mb-12">Open Opportunities</h2>
   133	          
   134	          <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
   135	            {opportunities.map((opportunity) => (
   136	              <Card key={opportunity.title} className="p-8">
   137	                <div className="flex items-center space-x-4 mb-6">
   138	                  <div className="bg-gradient-hero p-3 rounded-lg">
   139	                    <opportunity.icon className="h-6 w-6 text-white" />
   140	                  </div>
   141	                  <div>
   142	                    <h3 className="text-xl font-semibold">{opportunity.title}</h3>
   143	                    <p className="text-muted-foreground">{opportunity.description}</p>
   144	                  </div>
   145	                </div>
   146	
   147	                <div className="mb-6">
   148	                  <h4 className="font-semibold mb-3">Open Roles:</h4>
   149	                  <ul className="space-y-2">
   150	                    {opportunity.roles.map((role) => (
   151	                      <li key={role} className="text-sm text-muted-foreground flex items-center">
   152	                        <div className="h-1.5 w-1.5 bg-primary rounded-full mr-2" />
   153	                        {role}
   154	                      </li>
   155	                    ))}
   156	                  </ul>
   157	                </div>
   158	
   159	                <div>
   160	                  <h4 className="font-semibold mb-3">Key Skills:</h4>
   161	                  <div className="flex flex-wrap gap-2">
   162	                    {opportunity.skills.map((skill) => (
   163	                      <span key={skill} className="px-2 py-1 bg-surface text-xs rounded-md">
   164	                        {skill}
   165	                      </span>
   166	                    ))}
   167	                  </div>
   168	                </div>
   169	              </Card>
   170	            ))}
   171	          </div>
   172	        </div>
   173	
   174	        {/* Application Form */}
   175	        <Card className="p-8">
   176	          <div className="max-w-2xl mx-auto">
   177	            <div className="text-center mb-8">
   178	              <h2 className="mb-4">Apply Now</h2>
   179	              <p className="text-muted-foreground">
   180	                Send us your information and tell us how you'd like to contribute to VAVUS AI.
   181	              </p>
   182	            </div>
   183	
   184	            <form onSubmit={handleSubmit} className="space-y-6">
   185	              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
   186	                <div>
   187	                  <label className="block text-sm font-medium mb-2">Full Name *</label>
   188	                  <Input
   189	                    required
   190	                    value={formData.name}
   191	                    onChange={(e) => setFormData({...formData, name: e.target.value})}
   192	                    placeholder="Your full name"
   193	                  />
   194	                </div>
   195	                <div>
   196	                  <label className="block text-sm font-medium mb-2">Email *</label>
   197	                  <Input
   198	                    type="email"
   199	                    required
   200	                    value={formData.email}
   201	                    onChange={(e) => setFormData({...formData, email: e.target.value})}
   202	                    placeholder="your.email@example.com"
   203	                  />
   204	                </div>
   205	              </div>
   206	
   207	              <div>
   208	                <label className="block text-sm font-medium mb-2">LinkedIn / Portfolio URL</label>
   209	                <Input
   210	                  value={formData.linkedin}
   211	                  onChange={(e) => setFormData({...formData, linkedin: e.target.value})}
   212	                  placeholder="https://linkedin.com/in/yourprofile"
   213	                />
   214	              </div>
   215	
   216	              <div>
   217	                <label className="block text-sm font-medium mb-2">Interested Role *</label>
   218	                <Select value={formData.role} onValueChange={(value) => setFormData({...formData, role: value})}>
   219	                  <SelectTrigger>
   220	                    <SelectValue placeholder="Select a role category" />
   221	                  </SelectTrigger>
   222	                  <SelectContent>
   223	                    <SelectItem value="engineering">Engineering</SelectItem>
   224	                    <SelectItem value="design">Design</SelectItem>
   225	                    <SelectItem value="partnerships">Partnerships</SelectItem>
   226	                    <SelectItem value="marketing">Marketing</SelectItem>
   227	                    <SelectItem value="other">Other</SelectItem>
   228	                  </SelectContent>
   229	                </Select>
   230	              </div>
   231	
   232	              <div>
   233	                <label className="block text-sm font-medium mb-2">Tell us about yourself *</label>
   234	                <Textarea
   235	                  required
   236	                  value={formData.message}
   237	                  onChange={(e) => setFormData({...formData, message: e.target.value})}
   238	                  placeholder="Tell us about your background, experience, and why you're interested in joining VAVUS AI..."
   239	                  rows={6}
   240	                />
   241	              </div>
   242	
   243	              <div className="flex flex-col sm:flex-row gap-4">
   244	                <Button type="button" variant="outline" className="flex-1">
   245	                  <Upload className="mr-2 h-4 w-4" />
   246	                  Upload Resume
   247	                </Button>
   248	                <Button type="submit" className="btn-hero flex-1">
   249	                  <Send className="mr-2 h-4 w-4" />
   250	                  Submit Application
   251	                </Button>
   252	              </div>
   253	            </form>
   254	          </div>
   255	        </Card>
   256	
   257	        {/* Additional Info */}
   258	        <div className="mt-16 text-center">
   259	          <Card className="p-8 bg-surface">
   260	            <h3 className="font-semibold mb-4">Remote-First Culture</h3>
   261	            <p className="text-muted-foreground max-w-2xl mx-auto">
   262	              We're a distributed team with hubs in San Francisco and London. 
   263	              We offer competitive compensation, equity, health benefits, and unlimited PTO. 
   264	              Most importantly, you'll be working on technology that connects people worldwide.
   265	            </p>
   266	          </Card>
   267	        </div>
   268	      </div>
   269	    </div>
   270	  );
   271	};
   272	
   273	export default Join;

========== FILE: ./src/pages/Kickstarter.tsx ==========

     1	import React from "react";
     2	import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
     3	import SubscribeForm from "@/components/SubscribeForm";
     4	
     5	const Kickstarter: React.FC = () => {
     6	    return (
     7	        <div className="bg-background text-foreground">
     8	            <div className="max-w-6xl mx-auto px-6 py-16">
     9	                {/* Hero */}
    10	                <Card className="border border-border">
    11	                    <CardHeader className="text-center">
    12	                        <CardTitle className="text-4xl md:text-5xl font-bold">
    13	                            Fully encrypted OS, fully encrypted apps, fully encrypted server!
    14	                        </CardTitle>
    15	                        <p className="mt-4 text-lg md:text-xl text-muted-foreground">
    16	                            Private, on-device translation for hospitals, courts, schools, and travelers.
    17	                        </p>
    18	                    </CardHeader>
    19	
    20	                    {/* Replaced inert input+button with shared SubscribeForm */}
    21	                    <CardContent className="flex justify-center">
    22	                        <SubscribeForm />
    23	                    </CardContent>
    24	
    25	                    <img
    26	                        src="/Kickstarter/hero.jpg"
    27	                        alt="VAVUS preview"
    28	                        className="mx-auto mt-8 rounded-2xl shadow-xl max-w-3xl"
    29	                    />
    30	                </Card>
    31	
    32	                {/* Features (white icons that pop on primary strip) */}
    33	                <div className="mt-16 rounded-2xl p-8 bg-primary text-primary-foreground">
    34	                    <div className="grid md:grid-cols-3 gap-8">
    35	                        {[
    36	                            { title: "Offline Translation", desc: "HIPAA-ready on-device processing", icon: "/kickstarter/icons/offline-white-static.svg" },
    37	                            { title: "Multi-Headphone Chat", desc: "Real conversations, multiple participants", icon: "/kickstarter/icons/multi-white-static.svg" },
    38	                            { title: "OCR + Converters", desc: "Photo translation, currency, units", icon: "/kickstarter/icons/ocr-white-static.svg" },
    39	                        ].map((f) => (
    40	                            <div key={f.title} className="text-center">
    41	                                <img src={f.icon} alt="" className="mx-auto h-16 w-16 mb-3" />
    42	                                <div className="text-xl font-semibold">{f.title}</div>
    43	                                <p className="text-sm opacity-90">{f.desc}</p>
    44	                            </div>
    45	                        ))}
    46	                    </div>
    47	                </div>
    48	
    49	                {/* Timeline */}
    50	                <div className="mt-16 text-center">
    51	                    <h2 className="text-3xl font-bold mb-4">Our Roadmap</h2>
    52	                    <p className="text-muted-foreground mb-8">
    53	                        Prototype complete. Manufacturer partnership next. Kickstarter launch soon.
    54	                    </p>
    55	                    <img
    56	                        src="/Kickstarter/timeline.png"
    57	                        alt="VAVUS timeline"
    58	                        className="mx-auto rounded-2xl shadow-xl"
    59	                    />
    60	                </div>
    61	
    62	                {/* Final CTA */}
    63	                <div className="mt-16 text-center">
    64	                    <h3 className="text-2xl md:text-3xl font-bold mb-3">Join the waitlist</h3>
    65	                    <p className="text-muted-foreground mb-6">Get early-bird pricing and exclusive updates.</p>
    66	
    67	                    {/* Replaced inert input+button with shared SubscribeForm */}
    68	                    <div className="flex justify-center">
    69	                        <SubscribeForm />
    70	                    </div>
    71	                </div>
    72	            </div>
    73	        </div>
    74	    );
    75	};
    76	
    77	export default Kickstarter;

========== FILE: ./src/pages/Login.tsx ==========

     1	import React, { useState } from 'react';
     2	import { Mail, Lock, Eye, EyeOff, Smartphone, AlertTriangle } from 'lucide-react';
     3	import { Button } from '@/components/ui/button';
     4	import { Card } from '@/components/ui/card';
     5	import { Input } from '@/components/ui/input';
     6	import { Separator } from '@/components/ui/separator';
     7	import { useToast } from '@/hooks/use-toast';
     8	import { Link } from 'react-router-dom';
     9	
    10	const Login = () => {
    11	  const [showPassword, setShowPassword] = useState(false);
    12	  const [isLogin, setIsLogin] = useState(true);
    13	  const [formData, setFormData] = useState({
    14	    email: '',
    15	    password: '',
    16	    confirmPassword: ''
    17	  });
    18	  const [isSubmitting, setIsSubmitting] = useState(false);
    19	  const { toast } = useToast();
    20	
    21	  const handleSubmit = async (e: React.FormEvent) => {
    22	    e.preventDefault();
    23	    setIsSubmitting(true);
    24	
    25	    // Simulate API call
    26	    await new Promise(resolve => setTimeout(resolve, 1500));
    27	
    28	    toast({
    29	      title: isLogin ? "Login Successful" : "Account Created",
    30	      description: isLogin 
    31	        ? "Welcome back! Note: Full features require VAVUS device after launch." 
    32	        : "Account created successfully. Check your email for verification."
    33	    });
    34	
    35	    setIsSubmitting(false);
    36	  };
    37	
    38	  return (
    39	    <div className="min-h-screen bg-gradient-subtle flex items-center justify-center py-12">
    40	      <div className="mx-auto max-w-md w-full px-4">
    41	        <div className="text-center mb-8">
    42	          <h1 className="mb-4">
    43	            <span className="gradient-text">{isLogin ? 'Welcome Back' : 'Join VAVUS AI'}</span>
    44	          </h1>
    45	          <p className="text-muted-foreground">
    46	            {isLogin 
    47	              ? 'Sign in to access your VAVUS AI account' 
    48	              : 'Create your account and start communicating globally'
    49	            }
    50	          </p>
    51	        </div>
    52	
    53	        <Card className="p-8">
    54	          {/* Device Notice */}
    55	          <div className="mb-6 p-4 bg-accent-brand-light border border-accent-brand/20 rounded-lg">
    56	            <div className="flex items-start space-x-3">
    57	              <Smartphone className="h-5 w-5 text-accent-brand mt-0.5 flex-shrink-0" />
    58	              <div>
    59	                <p className="text-sm font-medium text-accent-brand mb-1">
    60	                  Device Requirement Notice
    61	                </p>
    62	                <p className="text-xs text-accent-brand/80">
    63	                  Once the device launches, you must purchase/own a VAVUS AI device to access 
    64	                  full account features. Until launch: access is demo-limited.
    65	                </p>
    66	              </div>
    67	            </div>
    68	          </div>
    69	
    70	          <form onSubmit={handleSubmit} className="space-y-6">
    71	            <div>
    72	              <label className="block text-sm font-medium mb-2">Email Address</label>
    73	              <div className="relative">
    74	                <Mail className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground" />
    75	                <Input
    76	                  type="email"
    77	                  required
    78	                  value={formData.email}
    79	                  onChange={(e) => setFormData({...formData, email: e.target.value})}
    80	                  placeholder="your.email@example.com"
    81	                  className="pl-10 focus-ring"
    82	                />
    83	              </div>
    84	            </div>
    85	
    86	            <div>
    87	              <label className="block text-sm font-medium mb-2">Password</label>
    88	              <div className="relative">
    89	                <Lock className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground" />
    90	                <Input
    91	                  type={showPassword ? 'text' : 'password'}
    92	                  required
    93	                  value={formData.password}
    94	                  onChange={(e) => setFormData({...formData, password: e.target.value})}
    95	                  placeholder="Enter your password"
    96	                  className="pl-10 pr-10 focus-ring"
    97	                />
    98	                <button
    99	                  type="button"
   100	                  onClick={() => setShowPassword(!showPassword)}
   101	                  className="absolute right-3 top-1/2 transform -translate-y-1/2 text-muted-foreground hover:text-foreground"
   102	                >
   103	                  {showPassword ? <EyeOff className="h-4 w-4" /> : <Eye className="h-4 w-4" />}
   104	                </button>
   105	              </div>
   106	            </div>
   107	
   108	            {!isLogin && (
   109	              <div>
   110	                <label className="block text-sm font-medium mb-2">Confirm Password</label>
   111	                <div className="relative">
   112	                  <Lock className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground" />
   113	                  <Input
   114	                    type={showPassword ? 'text' : 'password'}
   115	                    required
   116	                    value={formData.confirmPassword}
   117	                    onChange={(e) => setFormData({...formData, confirmPassword: e.target.value})}
   118	                    placeholder="Confirm your password"
   119	                    className="pl-10 focus-ring"
   120	                  />
   121	                </div>
   122	              </div>
   123	            )}
   124	
   125	            <Button 
   126	              type="submit" 
   127	              disabled={isSubmitting}
   128	              className="btn-hero w-full"
   129	            >
   130	              {isSubmitting 
   131	                ? (isLogin ? 'Signing In...' : 'Creating Account...') 
   132	                : (isLogin ? 'Sign In' : 'Create Account')
   133	              }
   134	            </Button>
   135	          </form>
   136	
   137	          <div className="mt-6">
   138	            <Separator />
   139	            <div className="text-center mt-6">
   140	              <Button
   141	                variant="outline"
   142	                className="w-full"
   143	                onClick={() => toast({
   144	                  title: "Coming Soon",
   145	                  description: "Google Sign-In will be available at launch."
   146	                })}
   147	              >
   148	                <svg className="w-4 h-4 mr-2" viewBox="0 0 24 24">
   149	                  <path fill="currentColor" d="M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z"/>
   150	                  <path fill="currentColor" d="M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z"/>
   151	                  <path fill="currentColor" d="M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z"/>
   152	                  <path fill="currentColor" d="M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z"/>
   153	                </svg>
   154	                Continue with Google
   155	              </Button>
   156	            </div>
   157	          </div>
   158	
   159	          <div className="mt-6 text-center">
   160	            <button
   161	              type="button"
   162	              onClick={() => setIsLogin(!isLogin)}
   163	              className="text-sm text-muted-foreground hover:text-foreground"
   164	            >
   165	              {isLogin 
   166	                ? "Don't have an account? Sign up" 
   167	                : "Already have an account? Sign in"
   168	              }
   169	            </button>
   170	          </div>
   171	
   172	          {isLogin && (
   173	            <div className="mt-4 text-center">
   174	              <button
   175	                type="button"
   176	                className="text-sm text-primary hover:text-primary-hover"
   177	                onClick={() => toast({
   178	                  title: "Reset Link Sent",
   179	                  description: "Check your email for password reset instructions."
   180	                })}
   181	              >
   182	                Forgot your password?
   183	              </button>
   184	            </div>
   185	          )}
   186	
   187	          {/* Privacy Policy Link */}
   188	          <div className="mt-6 text-center">
   189	            <p className="text-xs text-muted-foreground">
   190	              By continuing, you agree to our{' '}
   191	              <Link to="/privacy" className="text-primary hover:text-primary-hover">
   192	                Privacy Policy
   193	              </Link>
   194	            </p>
   195	          </div>
   196	        </Card>
   197	
   198	        {/* Mock Device Entitlement Section */}
   199	        <Card className="mt-8 p-6 border-l-4 border-l-warning bg-warning/5">
   200	          <div className="flex items-start space-x-3">
   201	            <AlertTriangle className="h-5 w-5 text-warning mt-0.5 flex-shrink-0" />
   202	            <div>
   203	              <h3 className="font-semibold text-sm mb-2">Device Entitlement Required (After Launch)</h3>
   204	              <p className="text-xs text-muted-foreground mb-3">
   205	                Once logged in, you'll need to add your VAVUS device serial to unlock full features:
   206	              </p>
   207	              <div className="flex space-x-2">
   208	                <Input 
   209	                  placeholder="Device serial number" 
   210	                  className="text-xs"
   211	                  disabled
   212	                />
   213	                <Button size="sm" variant="outline" disabled>
   214	                  Add Device
   215	                </Button>
   216	              </div>
   217	            </div>
   218	          </div>
   219	        </Card>
   220	      </div>
   221	    </div>
   222	  );
   223	};
   224	
   225	export default Login;

========== FILE: ./src/pages/NotFound.tsx ==========

     1	import { useLocation } from "react-router-dom";
     2	import { useEffect } from "react";
     3	
     4	const NotFound = () => {
     5	  const location = useLocation();
     6	
     7	  useEffect(() => {
     8	    console.error(
     9	      "404 Error: User attempted to access non-existent route:",
    10	      location.pathname
    11	    );
    12	  }, [location.pathname]);
    13	
    14	  return (
    15	    <div className="min-h-screen flex items-center justify-center bg-gradient-subtle">
    16	      <div className="text-center max-w-md mx-auto px-4">
    17	        <div className="text-8xl font-bold gradient-text mb-4">404</div>
    18	        <h1 className="text-2xl font-semibold mb-4">Page not found</h1>
    19	        <p className="text-muted-foreground mb-8">
    20	          The page you're looking for doesn't exist or has been moved.
    21	        </p>
    22	        <a 
    23	          href="/" 
    24	          className="btn-hero inline-flex items-center justify-center px-6 py-3 rounded-lg font-semibold"
    25	        >
    26	          Return to Home
    27	        </a>
    28	      </div>
    29	    </div>
    30	  );
    31	};
    32	
    33	export default NotFound;

========== FILE: ./src/pages/Privacy.tsx ==========

     1	import React from 'react';
     2	import { Shield, Eye, Lock, Database, Users, Mail } from 'lucide-react';
     3	import { Card } from '@/components/ui/card';
     4	
     5	const Privacy = () => {
     6	  const sections = [
     7	    {
     8	      id: 'data-collection',
     9	      icon: Database,
    10	      title: 'Data We Collect',
    11	      content: (
    12	        <div className="space-y-4">
    13	          <p className="text-muted-foreground">
    14	            VAVUS AI is designed with privacy at its core. We collect minimal data necessary to provide our services:
    15	          </p>
    16	          <ul className="space-y-2 text-muted-foreground">
    17	            <li className="flex items-start space-x-2">
    18	              <div className="h-1.5 w-1.5 bg-primary rounded-full mt-2 flex-shrink-0" />
    19	              <span><strong>Account Information:</strong> Email address, encrypted authentication credentials</span>
    20	            </li>
    21	            <li className="flex items-start space-x-2">
    22	              <div className="h-1.5 w-1.5 bg-primary rounded-full mt-2 flex-shrink-0" />
    23	              <span><strong>Device Data:</strong> Device identifiers for hardware authentication and sync</span>
    24	            </li>
    25	            <li className="flex items-start space-x-2">
    26	              <div className="h-1.5 w-1.5 bg-primary rounded-full mt-2 flex-shrink-0" />
    27	              <span><strong>Usage Analytics:</strong> Anonymous usage patterns to improve our services</span>
    28	            </li>
    29	            <li className="flex items-start space-x-2">
    30	              <div className="h-1.5 w-1.5 bg-primary rounded-full mt-2 flex-shrink-0" />
    31	              <span><strong>Communication Content:</strong> Encrypted translations and conversations (we cannot read these)</span>
    32	            </li>
    33	          </ul>
    34	          <p className="text-muted-foreground">
    35	            <strong>Important:</strong> We use zero-knowledge architecture, meaning we cannot access the content of your translations or conversations.
    36	          </p>
    37	        </div>
    38	      )
    39	    },
    40	    {
    41	      id: 'data-usage',
    42	      icon: Eye,
    43	      title: 'How We Use Data',
    44	      content: (
    45	        <div className="space-y-4">
    46	          <p className="text-muted-foreground">
    47	            Your data is used solely to provide and improve VAVUS AI services:
    48	          </p>
    49	          <ul className="space-y-2 text-muted-foreground">
    50	            <li className="flex items-start space-x-2">
    51	              <div className="h-1.5 w-1.5 bg-primary rounded-full mt-2 flex-shrink-0" />
    52	              <span><strong>Service Delivery:</strong> Process translations and AI conversations securely</span>
    53	            </li>
    54	            <li className="flex items-start space-x-2">
    55	              <div className="h-1.5 w-1.5 bg-primary rounded-full mt-2 flex-shrink-0" />
    56	              <span><strong>Account Management:</strong> Authenticate users and sync data across devices</span>
    57	            </li>
    58	            <li className="flex items-start space-x-2">
    59	              <div className="h-1.5 w-1.5 bg-primary rounded-full mt-2 flex-shrink-0" />
    60	              <span><strong>Service Improvement:</strong> Analyze anonymous usage patterns to enhance features</span>
    61	            </li>
    62	            <li className="flex items-start space-x-2">
    63	              <div className="h-1.5 w-1.5 bg-primary rounded-full mt-2 flex-shrink-0" />
    64	              <span><strong>Security:</strong> Detect and prevent unauthorized access or abuse</span>
    65	            </li>
    66	          </ul>
    67	          <p className="text-muted-foreground">
    68	            <strong>We never:</strong> Sell your data, share it with advertisers, or use it for marketing without explicit consent.
    69	          </p>
    70	        </div>
    71	      )
    72	    },
    73	    {
    74	      id: 'cookies',
    75	      icon: Shield,
    76	      title: 'Cookies & Tracking',
    77	      content: (
    78	        <div className="space-y-4">
    79	          <p className="text-muted-foreground">
    80	            We use minimal cookies and tracking technologies:
    81	          </p>
    82	          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
    83	            <div className="p-4 bg-surface rounded-lg">
    84	              <h4 className="font-semibold mb-2">Essential Cookies</h4>
    85	              <ul className="text-sm text-muted-foreground space-y-1">
    86	                <li>• Authentication sessions</li>
    87	                <li>• Security tokens</li>
    88	                <li>• Language preferences</li>
    89	                <li>• Essential functionality</li>
    90	              </ul>
    91	            </div>
    92	            <div className="p-4 bg-surface rounded-lg">
    93	              <h4 className="font-semibold mb-2">Optional Analytics</h4>
    94	              <ul className="text-sm text-muted-foreground space-y-1">
    95	                <li>• Anonymous usage statistics</li>
    96	                <li>• Performance monitoring</li>
    97	                <li>• Error reporting</li>
    98	                <li>• Feature usage patterns</li>
    99	              </ul>
   100	            </div>
   101	          </div>
   102	          <p className="text-muted-foreground">
   103	            You can control analytics cookies through our consent banner or browser settings.
   104	          </p>
   105	        </div>
   106	      )
   107	    },
   108	    {
   109	      id: 'third-parties',
   110	      icon: Users,
   111	      title: 'Third Parties',
   112	      content: (
   113	        <div className="space-y-4">
   114	          <p className="text-muted-foreground">
   115	            We work with minimal third-party services, all carefully vetted for privacy compliance:
   116	          </p>
   117	          <ul className="space-y-2 text-muted-foreground">
   118	            <li className="flex items-start space-x-2">
   119	              <div className="h-1.5 w-1.5 bg-primary rounded-full mt-2 flex-shrink-0" />
   120	              <span><strong>Cloud Infrastructure:</strong> Secure hosting and data processing (encrypted)</span>
   121	            </li>
   122	            <li className="flex items-start space-x-2">
   123	              <div className="h-1.5 w-1.5 bg-primary rounded-full mt-2 flex-shrink-0" />
   124	              <span><strong>Payment Processing:</strong> Secure payment handling for subscriptions</span>
   125	            </li>
   126	            <li className="flex items-start space-x-2">
   127	              <div className="h-1.5 w-1.5 bg-primary rounded-full mt-2 flex-shrink-0" />
   128	              <span><strong>Analytics:</strong> Anonymous usage analytics (optional, with consent)</span>
   129	            </li>
   130	            <li className="flex items-start space-x-2">
   131	              <div className="h-1.5 w-1.5 bg-primary rounded-full mt-2 flex-shrink-0" />
   132	              <span><strong>Customer Support:</strong> Encrypted support ticket management</span>
   133	            </li>
   134	          </ul>
   135	          <p className="text-muted-foreground">
   136	            All third parties are bound by strict data processing agreements and cannot access your content.
   137	          </p>
   138	        </div>
   139	      )
   140	    },
   141	    {
   142	      id: 'data-retention',
   143	      icon: Database,
   144	      title: 'Data Retention',
   145	      content: (
   146	        <div className="space-y-4">
   147	          <p className="text-muted-foreground">
   148	            We retain data only as long as necessary to provide our services:
   149	          </p>
   150	          <div className="space-y-3">
   151	            <div className="flex items-center justify-between p-3 bg-surface rounded-lg">
   152	              <span className="font-medium">Account Data</span>
   153	              <span className="text-muted-foreground text-sm">Until account deletion</span>
   154	            </div>
   155	            <div className="flex items-center justify-between p-3 bg-surface rounded-lg">
   156	              <span className="font-medium">Conversation History</span>
   157	              <span className="text-muted-foreground text-sm">User-controlled (1-365 days)</span>
   158	            </div>
   159	            <div className="flex items-center justify-between p-3 bg-surface rounded-lg">
   160	              <span className="font-medium">Usage Analytics</span>
   161	              <span className="text-muted-foreground text-sm">90 days (anonymized)</span>
   162	            </div>
   163	            <div className="flex items-center justify-between p-3 bg-surface rounded-lg">
   164	              <span className="font-medium">Support Tickets</span>
   165	              <span className="text-muted-foreground text-sm">3 years for support quality</span>
   166	            </div>
   167	          </div>
   168	          <p className="text-muted-foreground">
   169	            You can request data deletion at any time through your account settings or by contacting support.
   170	          </p>
   171	        </div>
   172	      )
   173	    },
   174	    {
   175	      id: 'your-rights',
   176	      icon: Lock,
   177	      title: 'Your Rights',
   178	      content: (
   179	        <div className="space-y-4">
   180	          <p className="text-muted-foreground">
   181	            You have comprehensive rights over your personal data:
   182	          </p>
   183	          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
   184	            <div className="space-y-3">
   185	              <div className="p-3 bg-success/10 rounded-lg">
   186	                <h4 className="font-semibold text-success mb-1">Access</h4>
   187	                <p className="text-sm text-muted-foreground">Download all your data anytime</p>
   188	              </div>
   189	              <div className="p-3 bg-accent-brand/10 rounded-lg">
   190	                <h4 className="font-semibold text-accent-brand mb-1">Portability</h4>
   191	                <p className="text-sm text-muted-foreground">Export data in standard formats</p>
   192	              </div>
   193	              <div className="p-3 bg-warning/10 rounded-lg">
   194	                <h4 className="font-semibold text-warning mb-1">Correction</h4>
   195	                <p className="text-sm text-muted-foreground">Update or correct your information</p>
   196	              </div>
   197	            </div>
   198	            <div className="space-y-3">
   199	              <div className="p-3 bg-destructive/10 rounded-lg">
   200	                <h4 className="font-semibold text-destructive mb-1">Deletion</h4>
   201	                <p className="text-sm text-muted-foreground">Permanently delete all your data</p>
   202	              </div>
   203	              <div className="p-3 bg-primary/10 rounded-lg">
   204	                <h4 className="font-semibold text-primary mb-1">Objection</h4>
   205	                <p className="text-sm text-muted-foreground">Object to specific data processing</p>
   206	              </div>
   207	              <div className="p-3 bg-muted/30 rounded-lg">
   208	                <h4 className="font-semibold text-foreground mb-1">Withdrawal</h4>
   209	                <p className="text-sm text-muted-foreground">Withdraw consent anytime</p>
   210	              </div>
   211	            </div>
   212	          </div>
   213	        </div>
   214	      )
   215	    }
   216	  ];
   217	
   218	  return (
   219	    <div className="min-h-screen bg-gradient-subtle">
   220	      <div className="mx-auto max-w-4xl px-4 py-16 sm:px-6 lg:px-8">
   221	        {/* Header */}
   222	        <div className="text-center mb-16">
   223	          <h1 className="mb-6">
   224	            <span className="gradient-text">Privacy Policy</span>
   225	          </h1>
   226	          <p className="text-lg text-muted-foreground max-w-2xl mx-auto">
   227	            Your privacy is fundamental to everything we build. This policy explains how we collect, 
   228	            use, and protect your information with complete transparency.
   229	          </p>
   230	          <p className="text-sm text-muted-foreground mt-4">
   231	            <strong>Last updated:</strong> December 1, 2024
   232	          </p>
   233	        </div>
   234	
   235	        {/* Privacy Principles */}
   236	        <Card className="p-8 mb-12 bg-gradient-hero text-white">
   237	          <h2 className="text-center mb-8 text-white">Our Privacy Principles</h2>
   238	          <div className="grid grid-cols-1 md:grid-cols-3 gap-8">
   239	            <div className="text-center">
   240	              <Lock className="h-8 w-8 mx-auto mb-3" />
   241	              <h3 className="font-semibold mb-2">Zero-Knowledge</h3>
   242	              <p className="text-sm opacity-90">
   243	                We cannot read your conversations or translations
   244	              </p>
   245	            </div>
   246	            <div className="text-center">
   247	              <Shield className="h-8 w-8 mx-auto mb-3" />
   248	              <h3 className="font-semibold mb-2">Minimal Collection</h3>
   249	              <p className="text-sm opacity-90">
   250	                We collect only what's essential for our services
   251	              </p>
   252	            </div>
   253	            <div className="text-center">
   254	              <Users className="h-8 w-8 mx-auto mb-3" />
   255	              <h3 className="font-semibold mb-2">User Control</h3>
   256	              <p className="text-sm opacity-90">
   257	                You control your data and can delete it anytime
   258	              </p>
   259	            </div>
   260	          </div>
   261	        </Card>
   262	
   263	        {/* Privacy Sections */}
   264	        <div className="space-y-8 mb-16">
   265	          {sections.map((section) => (
   266	            <Card key={section.id} className="p-8">
   267	              <div className="flex items-center space-x-4 mb-6">
   268	                <div className="bg-gradient-hero p-3 rounded-lg">
   269	                  <section.icon className="h-6 w-6 text-white" />
   270	                </div>
   271	                <h2>{section.title}</h2>
   272	              </div>
   273	              
   274	              {section.content}
   275	            </Card>
   276	          ))}
   277	        </div>
   278	
   279	        {/* Important Notice */}
   280	        <Card className="p-8 border-l-4 border-l-warning bg-warning/5">
   281	          <h3 className="font-semibold mb-4 flex items-center">
   282	            <Shield className="h-5 w-5 mr-2 text-warning" />
   283	            Important Notice for Users
   284	          </h3>
   285	          <p className="text-muted-foreground mb-4">
   286	            This privacy policy is a placeholder for demonstration purposes. In a production environment, 
   287	            you would need to:
   288	          </p>
   289	          <ul className="space-y-2 text-muted-foreground text-sm">
   290	            <li>• Have this policy reviewed by legal counsel</li>
   291	            <li>• Ensure compliance with GDPR, CCPA, and other applicable privacy laws</li>
   292	            <li>• Update the policy based on your actual data practices</li>
   293	            <li>• Include specific details about your data processing activities</li>
   294	            <li>• Provide clear contact information for privacy inquiries</li>
   295	          </ul>
   296	        </Card>
   297	
   298	        {/* Contact */}
   299	        <Card className="p-8 text-center mt-8">
   300	          <Mail className="h-8 w-8 mx-auto mb-4 text-primary" />
   301	          <h3 className="font-semibold mb-2">Questions About Privacy?</h3>
   302	          <p className="text-muted-foreground mb-4">
   303	            If you have any questions about this privacy policy or how we handle your data, 
   304	            please don't hesitate to contact us.
   305	          </p>
   306	          <a 
   307	            href="mailto:privacy@vavus.ai" 
   308	            className="text-primary hover:text-primary-hover font-medium"
   309	          >
   310	            privacy@vavus.ai
   311	          </a>
   312	        </Card>
   313	      </div>
   314	    </div>
   315	  );
   316	};
   317	
   318	export default Privacy;

========== FILE: ./src/pages/Timeline.tsx ==========

     1	import React, { useState } from 'react';
     2	import { CheckCircle, Clock, Circle, Filter } from 'lucide-react';
     3	import { Button } from '@/components/ui/button';
     4	import { Card } from '@/components/ui/card';
     5	import { Badge } from '@/components/ui/badge';
     6	
     7	const Timeline = () => {
     8	  const [activeFilter, setActiveFilter] = useState('All');
     9	
    10	  const filters = ['All', 'Product', 'Devices', 'Security', 'Apps'];
    11	
    12	  const milestones = [
    13	    {
    14	      quarter: 'Q3 2025',
    15	      status: 'completed',
    16	      category: 'Product',
    17	      title: 'Core AI Engine',
    18	      description: 'Completed initial development of our multilingual AI translation engine with context awareness.',
    19	      items: [
    20	        'Neural machine translation model',
    21	        'Context-aware processing',
    22	        'Developed and tested Vavus AI and Vavus AI Pro',
    23	        'Initial language support (21 languages)'
    24	      ]
    25	    },
    26	    {
    27	      quarter: 'Q3 2025',
    28	      status: 'completed',
    29	      category: 'Security',
    30	      title: 'Security Framework',
    31	      description: 'Implemented end-to-end encryption and privacy-first architecture.',
    32	      items: [
    33	        'E2E encryption protocol',
    34	        'Zero-knowledge architecture',
    35	        'Security audit completed',
    36	        'OS, Apps and Server security developed and tested'
    37	      ]
    38	    },
    39	    {
    40	      quarter: 'Q4 2025',
    41	      status: 'in-progress',
    42	      category: 'Apps',
    43	      title: 'Beta Test Applications',
    44	      description: 'Launched web and mobile beta applications for early testing.',
    45	      items: [
    46	        'Web application beta',
    47	        'iOS app development',
    48	        'Android app development',
    49	        'User feedback integration'
    50	      ]
    51	    },
    52	    {
    53	      quarter: 'Q4 2025',
    54	      status: 'in-progress',
    55	      category: 'Devices',
    56	      title: 'Hardware Development',
    57	      description: 'Development of dedicated VAVUS AI hardware devices for enhanced security.',
    58	      items: [
    59	        'Device prototype design',
    60	        'Hardware security module',
    61	        'Manufacturing partnerships',
    62	        'FCC/CE certifications'
    63	      ]
    64	    },
    65	    {
    66	      quarter: 'Q4 2025',
    67	      status: 'planned',
    68	      category: 'Product Launch',
    69	      title: 'Kickstarter campaign',
    70	      description: 'Launch Vavus AI device on kickstarter.',
    71	      items: [
    72	        'Pre-Campaign',
    73	        'Videos with the apps and features',
    74	        'Setup of Donations',
    75	        'Performance optimization'
    76	      ]
    77	    },
    78	    {
    79	      quarter: 'Q4 2025',
    80	      status: 'planned',
    81	      category: 'Devices',
    82	      title: 'Device Launch',
    83	      description: 'Public launch of VAVUS AI hardware devices and full platform.',
    84	      items: [
    85	        'Device manufacturing',
    86	        'Retail partnerships',
    87	        'Marketing campaign',
    88	        'Customer support launch'
    89	      ]
    90	    },
    91	    {
    92	      quarter: 'Q4 2025',
    93	      status: 'completed',
    94	      category: 'Security',
    95	      title: 'Enterprise Features',
    96	      description: 'Launch enterprise-grade features for business customers.',
    97	      items: [
    98	        'HIPAA compliance',
    99	        'GDPR full compliance',
   100	        'Enterprise SSO',
   101	        'Admin dashboard'
   102	      ]
   103	    },
   104	    {
   105	      quarter: 'Q1 2026',
   106	      status: 'planned',
   107	      category: 'Product',
   108	      title: 'AI Enhancement',
   109	      description: 'Advanced AI features including voice cloning and real-time conversation.',
   110	      items: [
   111	        'Voice synthesis',
   112	        'Real-time conversation mode',
   113	        'AI personality customization',
   114	        'Advanced context understanding'
   115	      ]
   116	    }
   117	  ];
   118	
   119	  const getStatusIcon = (status: string) => {
   120	    switch (status) {
   121	      case 'completed':
   122	        return <CheckCircle className="h-6 w-6 text-success" />;
   123	      case 'in-progress':
   124	        return <Clock className="h-6 w-6 text-warning" />;
   125	      default:
   126	        return <Circle className="h-6 w-6 text-muted-foreground" />;
   127	    }
   128	  };
   129	
   130	  const getStatusBadge = (status: string) => {
   131	    switch (status) {
   132	      case 'completed':
   133	        return <Badge className="bg-success text-success-foreground">Done</Badge>;
   134	      case 'in-progress':
   135	        return <Badge className="bg-warning text-warning-foreground">In Progress</Badge>;
   136	      default:
   137	        return <Badge variant="outline">Planned</Badge>;
   138	    }
   139	  };
   140	
   141	  const filteredMilestones = activeFilter === 'All' 
   142	    ? milestones 
   143	    : milestones.filter(milestone => milestone.category === activeFilter);
   144	
   145	  return (
   146	    <div className="min-h-screen bg-gradient-subtle">
   147	      <div className="mx-auto max-w-6xl px-4 py-16 sm:px-6 lg:px-8">
   148	        {/* Header */}
   149	        <div className="text-center mb-16">
   150	          <h1 className="mb-6">
   151	            <span className="gradient-text">Product Timeline</span>
   152	          </h1>
   153	          <p className="text-xl text-muted-foreground max-w-3xl mx-auto">
   154	            Track our progress as we build the future of AI-powered communication. 
   155	            From core technology to hardware devices and enterprise features.
   156	          </p>
   157	        </div>
   158	
   159	        {/* Filters */}
   160	        <div className="flex flex-wrap justify-center gap-2 mb-12">
   161	          {filters.map((filter) => (
   162	            <Button
   163	              key={filter}
   164	              variant={activeFilter === filter ? 'default' : 'outline'}
   165	              onClick={() => setActiveFilter(filter)}
   166	              className={`${activeFilter === filter ? 'btn-hero' : 'btn-ghost'}`}
   167	            >
   168	              <Filter className="h-4 w-4 mr-1" />
   169	              {filter}
   170	            </Button>
   171	          ))}
   172	        </div>
   173	
   174	        {/* Timeline */}
   175	        <div className="relative">
   176	          {/* Timeline Line */}
   177	          <div className="absolute left-8 top-0 bottom-0 w-0.5 bg-border hidden md:block" />
   178	
   179	          <div className="space-y-12">
   180	            {filteredMilestones.map((milestone, index) => (
   181	              <div key={milestone.quarter} className="relative">
   182	                {/* Timeline Node */}
   183	                <div className="absolute left-5 -translate-x-1/2 hidden md:block">
   184	                  <div className="bg-white p-2 rounded-full border-2 border-border shadow-sm">
   185	                    {getStatusIcon(milestone.status)}
   186	                  </div>
   187	                </div>
   188	
   189	                {/* Content */}
   190	                <Card className="md:ml-20 p-8">
   191	                  <div className="flex flex-col sm:flex-row sm:items-start sm:justify-between mb-6">
   192	                    <div className="flex items-center space-x-4 mb-4 sm:mb-0">
   193	                      <div className="md:hidden">
   194	                        {getStatusIcon(milestone.status)}
   195	                      </div>
   196	                      <div>
   197	                        <h3 className="text-2xl font-semibold text-foreground">
   198	                          {milestone.title}
   199	                        </h3>
   200	                        <p className="text-accent-brand font-medium">
   201	                          {milestone.quarter}
   202	                        </p>
   203	                      </div>
   204	                    </div>
   205	                    <div className="flex items-center space-x-3">
   206	                      {getStatusBadge(milestone.status)}
   207	                      <Badge variant="outline">{milestone.category}</Badge>
   208	                    </div>
   209	                  </div>
   210	
   211	                  <p className="text-muted-foreground mb-6">
   212	                    {milestone.description}
   213	                  </p>
   214	
   215	                  <div className="grid grid-cols-1 sm:grid-cols-2 gap-3">
   216	                    {milestone.items.map((item, itemIndex) => (
   217	                      <div key={itemIndex} className="flex items-center space-x-2">
   218	                        <div className={`h-2 w-2 rounded-full ${
   219	                          milestone.status === 'completed' 
   220	                            ? 'bg-success' 
   221	                            : milestone.status === 'in-progress'
   222	                            ? 'bg-warning'
   223	                            : 'bg-muted-foreground'
   224	                        }`} />
   225	                        <span className="text-sm text-muted-foreground">{item}</span>
   226	                      </div>
   227	                    ))}
   228	                  </div>
   229	                </Card>
   230	              </div>
   231	            ))}
   232	          </div>
   233	        </div>
   234	
   235	        {/* Progress Summary */}
   236	        <Card className="mt-16 p-8 bg-white">
   237	          <div className="text-center">
   238	            <h2 className="mb-6">Progress Overview</h2>
   239	            <div className="grid grid-cols-1 md:grid-cols-3 gap-8">
   240	              <div className="text-center">
   241	                <div className="text-3xl font-bold text-success mb-2">
   242	                  {milestones.filter(m => m.status === 'completed').length}
   243	                </div>
   244	                <p className="text-muted-foreground">Completed Milestones</p>
   245	              </div>
   246	              <div className="text-center">
   247	                <div className="text-3xl font-bold text-warning mb-2">
   248	                  {milestones.filter(m => m.status === 'in-progress').length}
   249	                </div>
   250	                <p className="text-muted-foreground">In Progress</p>
   251	              </div>
   252	              <div className="text-center">
   253	                <div className="text-3xl font-bold text-muted-foreground mb-2">
   254	                  {milestones.filter(m => m.status === 'planned').length}
   255	                </div>
   256	                <p className="text-muted-foreground">Planned Features</p>
   257	              </div>
   258	            </div>
   259	          </div>
   260	        </Card>
   261	      </div>
   262	    </div>
   263	  );
   264	};
   265	
   266	export default Timeline;

========== FILE: ./src/pages/Translate.tsx ==========

     1	import React, { useEffect, useState } from 'react';
     2	import { ArrowRight, Copy, History, Globe, Lock, ArrowLeftRight } from 'lucide-react';
     3	import { Button } from '@/components/ui/button';
     4	import { Textarea } from '@/components/ui/textarea';
     5	import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
     6	import { Card } from '@/components/ui/card';
     7	import { useToast } from '@/hooks/use-toast';
     8	import { translateText } from '@/lib/api';
     9	import { supabase } from '@/lib/supabase';
    10	import { MADLAD_LANGUAGES, AUTO_CODE, labelFor } from '@/lib/languages/madlad';
    11	
    12	type TranslationRow = {
    13	  id: string;
    14	  source_lang: string | null;
    15	  target_lang: string | null;
    16	  input_text: string;
    17	  output_text: string | null;
    18	  created_at: string;
    19	};
    20	
    21	const Translate = () => {
    22	  const [sourceText, setSourceText] = useState('');
    23	  const [targetText, setTargetText] = useState('');
    24	
    25	  // User-selectable source language (default: auto-detect)
    26	  const [sourceLanguage, setSourceLanguage] = useState<string>(AUTO_CODE);
    27	  // Target language by BCP-47 (default: Spanish)
    28	  const [targetLanguage, setTargetLanguage] = useState<string>('es');
    29	
    30	  const [isTranslating, setIsTranslating] = useState(false);
    31	  const [history, setHistory] = useState<TranslationRow[]>([]);
    32	  const { toast } = useToast();
    33	
    34	  // Lists: source shows ALL (incl. auto), target hides auto
    35	  const sourceLanguages = MADLAD_LANGUAGES;
    36	  const targetLanguages = MADLAD_LANGUAGES.filter(l => l.code !== AUTO_CODE);
    37	
    38	  async function fetchHistory() {
    39	    const { data, error } = await supabase
    40	        .from('translations')
    41	        .select('id, source_lang, target_lang, input_text, output_text, created_at')
    42	        .order('created_at', { ascending: false })
    43	        .limit(20);
    44	
    45	    if (!error && data) setHistory(data);
    46	  }
    47	
    48	  useEffect(() => {
    49	    fetchHistory();
    50	  }, []);
    51	
    52	  const handleTranslate = async () => {
    53	    if (!sourceText.trim()) return;
    54	
    55	    try {
    56	      setIsTranslating(true);
    57	      const { output } = await translateText({
    58	        text: sourceText,
    59	        sourceLang: sourceLanguage, // pass selected source
    60	        targetLang: targetLanguage,
    61	      });
    62	      setTargetText(output || '');
    63	      await fetchHistory();
    64	    } catch (e: any) {
    65	      toast({
    66	        title: 'Could not translate',
    67	        description: typeof e?.message === 'string' ? e.message : 'Please try again.',
    68	        variant: 'destructive',
    69	      });
    70	    } finally {
    71	      setIsTranslating(false);
    72	    }
    73	  };
    74	
    75	  const handleCopy = () => {
    76	    if (!targetText) return;
    77	    navigator.clipboard.writeText(targetText);
    78	    toast({ title: 'Copied to clipboard', description: 'Translation copied successfully' });
    79	  };
    80	
    81	  // Quick swap (disabled if source is auto)
    82	  const handleSwap = () => {
    83	    if (sourceLanguage === AUTO_CODE) return;
    84	    const prevSource = sourceLanguage;
    85	    setSourceLanguage(targetLanguage);
    86	    setTargetLanguage(prevSource);
    87	    setSourceText(targetText);
    88	    setTargetText(sourceText);
    89	  };
    90	
    91	  return (
    92	      <div className="min-h-screen bg-gradient-subtle">
    93	        <div className="mx-auto max-w-6xl px-4 py-12 sm:px-6 lg:px-8">
    94	          {/* Header */}
    95	          <div className="text-center mb-12">
    96	            <h1 className="mb-4">
    97	              <span className="gradient-text">Universal Translator</span>
    98	            </h1>
    99	            <p className="text-xl text-muted-foreground max-w-2xl mx-auto">
   100	              AI-powered translation with context awareness. Your translations are saved to your account.
   101	            </p>
   102	
   103	            <div className="mt-6 p-4 bg-accent-brand-light border border-accent-brand/20 rounded-lg max-w-lg mx-auto">
   104	              <p className="text-sm text-accent-brand font-medium flex items-center justify-center">
   105	                <Lock className="h-4 w-4 mr-1" />
   106	                Private by design — only you can view your history.
   107	              </p>
   108	            </div>
   109	          </div>
   110	
   111	          {/* Translation Interface */}
   112	          <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
   113	            {/* Source Text */}
   114	            <Card className="p-6">
   115	              <div className="flex items-center justify-between mb-4">
   116	                <h3 className="font-semibold text-foreground">Source Text</h3>
   117	
   118	                {/* Source language selector (includes Auto-detect) */}
   119	                <div className="flex items-center gap-2">
   120	                  <Globe className="h-4 w-4 text-muted-foreground" />
   121	                  <Select value={sourceLanguage} onValueChange={setSourceLanguage}>
   122	                    <SelectTrigger className="w-56">
   123	                      <SelectValue placeholder="Select source language" />
   124	                    </SelectTrigger>
   125	                    <SelectContent>
   126	                      {sourceLanguages.map((lang) => (
   127	                          <SelectItem key={lang.code} value={lang.code}>
   128	                            {labelFor(lang.code)}
   129	                          </SelectItem>
   130	                      ))}
   131	                    </SelectContent>
   132	                  </Select>
   133	                </div>
   134	              </div>
   135	
   136	              <Textarea
   137	                  placeholder="Enter text to translate."
   138	                  value={sourceText}
   139	                  onChange={(e) => setSourceText(e.target.value)}
   140	                  className="min-h-[200px] resize-none focus-ring"
   141	              />
   142	
   143	              <div className="flex justify-between items-center mt-4">
   144	                <span className="text-sm text-muted-foreground">{sourceText.length} characters</span>
   145	                <div className="flex items-center gap-2">
   146	                  <Button
   147	                      variant="outline"
   148	                      onClick={handleSwap}
   149	                      disabled={sourceLanguage === AUTO_CODE}
   150	                      title={sourceLanguage === AUTO_CODE ? 'Swap disabled when source is Auto' : 'Swap languages'}
   151	                  >
   152	                    <ArrowLeftRight className="h-4 w-4" />
   153	                  </Button>
   154	                  <Button onClick={handleTranslate} disabled={!sourceText.trim() || isTranslating} className="btn-hero">
   155	                    {isTranslating ? 'Translating…' : (
   156	                        <>
   157	                          <span>Translate</span>
   158	                          <ArrowRight className="ml-2 h-4 w-4" />
   159	                        </>
   160	                    )}
   161	                  </Button>
   162	                </div>
   163	              </div>
   164	            </Card>
   165	
   166	            {/* Target Text */}
   167	            <Card className="p-6">
   168	              <div className="flex items-center justify-between mb-4">
   169	                <h3 className="font-semibold text-foreground">Translation</h3>
   170	
   171	                {/* Target language selector (no Auto) */}
   172	                <Select value={targetLanguage} onValueChange={setTargetLanguage}>
   173	                  <SelectTrigger className="w-56">
   174	                    <SelectValue placeholder="Choose target language" />
   175	                  </SelectTrigger>
   176	                  <SelectContent>
   177	                    {targetLanguages.map((lang) => (
   178	                        <SelectItem key={lang.code} value={lang.code}>
   179	                          {labelFor(lang.code)}
   180	                        </SelectItem>
   181	                    ))}
   182	                  </SelectContent>
   183	                </Select>
   184	              </div>
   185	
   186	              <Textarea
   187	                  placeholder="Translation will appear here."
   188	                  value={targetText}
   189	                  readOnly
   190	                  className="min-h-[200px] resize-none bg-surface"
   191	              />
   192	
   193	              <div className="flex justify-between items-center mt-4">
   194	                <span className="text-sm text-muted-foreground">{targetText.length} characters</span>
   195	                <div className="flex space-x-2">
   196	                  <Button onClick={handleCopy} disabled={!targetText} variant="outline" size="sm">
   197	                    <Copy className="h-4 w-4 mr-1" />
   198	                    Copy
   199	                  </Button>
   200	                </div>
   201	              </div>
   202	            </Card>
   203	          </div>
   204	
   205	          {/* History */}
   206	          <div className="mt-10">
   207	            <h3 className="text-lg font-semibold mb-3 flex items-center">
   208	              <History className="h-5 w-5 mr-2" />
   209	              Recent translations
   210	            </h3>
   211	
   212	            {history.length === 0 ? (
   213	                <p className="text-sm text-muted-foreground">No translations yet.</p>
   214	            ) : (
   215	                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
   216	                  {history.map((row) => (
   217	                      <Card key={row.id} className="p-4 hover:bg-surface transition">
   218	                        <div className="text-xs text-muted-foreground mb-1">
   219	                          {new Date(row.created_at).toLocaleString()}
   220	                          {row.source_lang ? ` • ${labelFor(row.source_lang)} → ` : ' • '}
   221	                          {row.target_lang ? `${labelFor(row.target_lang)}` : ''}
   222	                        </div>
   223	                        <div className="text-sm font-medium mb-2 line-clamp-2">{row.input_text}</div>
   224	                        <div className="text-sm text-muted-foreground line-clamp-2">{row.output_text}</div>
   225	                        <div className="mt-3 flex gap-2">
   226	                          <Button
   227	                              size="sm"
   228	                              variant="outline"
   229	                              onClick={() => {
   230	                                setSourceText(row.input_text);
   231	                                setTargetText(row.output_text || '');
   232	                                if (row.source_lang) setSourceLanguage(row.source_lang);
   233	                                if (row.target_lang) setTargetLanguage(row.target_lang);
   234	                              }}
   235	                          >
   236	                            Load
   237	                          </Button>
   238	                        </div>
   239	                      </Card>
   240	                  ))}
   241	                </div>
   242	            )}
   243	          </div>
   244	        </div>
   245	      </div>
   246	  );
   247	};
   248	
   249	export default Translate;

========== FILE: ./src/pages/VavusAI.tsx ==========

     1	import React from 'react';
     2	import { Card } from '@/components/ui/card';
     3	import { Button } from '@/components/ui/button';
     4	import { Check, BarChart, Globe, MessageSquare, Shield, Code2, Bot, Zap } from 'lucide-react';
     5	import { useNavigate } from 'react-router-dom';
     6	
     7	const VavusAI = () => {
     8	    const navigate = useNavigate();
     9	
    10	    // Correct specs (rebranded from GLM-4.5 series)
    11	    const specs = [
    12	        {
    13	            name: 'Vavus AI',
    14	            subtitle: 'Fast, lightweight, unified intelligence',
    15	            details: [
    16	                '106B total parameters / 12B active (MoE)',
    17	                'Hybrid modes: Thinking & Fast',
    18	                '128k context length',
    19	                'Native function/tool calling',
    20	            ],
    21	        },
    22	        {
    23	            name: 'Vavus AI Pro',
    24	            subtitle: 'Flagship reasoning & agentic performance',
    25	            details: [
    26	                '355B total parameters / 32B active (MoE)',
    27	                'Hybrid modes: Thinking & Fast',
    28	                '128k context length',
    29	                'Native function/tool calling',
    30	            ],
    31	        },
    32	    ];
    33	
    34	    // Compact benchmark highlights taken from the GLM-4.5 reports (rebranded)
    35	    const benchmarksAgentic = [
    36	        { metric: 'TAU-bench (Retail)', pro: '79.7', base: '77.9' },
    37	        { metric: 'TAU-bench (Airline)', pro: '60.4', base: '60.8' },
    38	        { metric: 'BFCL v3 (Full)', pro: '77.8', base: '76.4' },
    39	        { metric: 'BrowseComp (Web)', pro: '26.4%', base: '21.3%' },
    40	    ];
    41	
    42	    const benchmarksReasoning = [
    43	        { metric: 'MMLU Pro', pro: '84.6', base: '81.4' },
    44	        { metric: 'AIME 2024', pro: '91.0', base: '89.4' },
    45	        { metric: 'MATH 500', pro: '98.2', base: '98.1' },
    46	        { metric: 'GPQA', pro: '79.1', base: '75.0' },
    47	    ];
    48	
    49	    const benchmarksCoding = [
    50	        { metric: 'SWE-bench Verified', pro: '64.2', base: '57.6' },
    51	        { metric: 'Terminal-Bench', pro: '37.5', base: '30.0' },
    52	        { metric: 'Tool Calling Success', pro: '90.6%', base: '—' },
    53	    ];
    54	
    55	    const capabilities = [
    56	        { icon: Globe, title: 'World-class translation' },
    57	        { icon: MessageSquare, title: 'Conversational intelligence' },
    58	        { icon: Code2, title: 'Full-stack app generation' },
    59	        { icon: Bot, title: 'Agentic tool use & browsing' },
    60	        { icon: BarChart, title: 'Data analysis & insights' },
    61	        { icon: Shield, title: 'Privacy-first architecture' },
    62	    ];
    63	
    64	    return (
    65	        <div className="bg-gradient-subtle">
    66	            {/* Hero */}
    67	            <section className="relative overflow-hidden bg-gradient-hero text-white">
    68	                <div className="mx-auto max-w-7xl px-4 py-24 text-center">
    69	                    <h1 className="mb-6 text-4xl md:text-5xl font-bold">
    70	                        <span className="gradient-text">⚡ Introducing Vavus AI & Vavus AI Pro</span>
    71	                    </h1>
    72	                    <p className="max-w-2xl mx-auto text-lg opacity-90">
    73	                        Unified reasoning, coding, and agentic intelligence — built for speed, accuracy, and privacy.
    74	                    </p>
    75	
    76	                    {/* Get Started -> AIChat.tsx */}
    77	                    <Button className="btn-hero mt-8" onClick={() => navigate('/ai')}>
    78	                        Get Started
    79	                    </Button>
    80	
    81	                    {/* Quick badges */}
    82	                    <div className="mt-8 flex flex-wrap justify-center gap-3 text-sm opacity-90">
    83	                        <span className="rounded-full bg-white/10 px-3 py-1">Top-tier math & logic</span>
    84	                        <span className="rounded-full bg-white/10 px-3 py-1">High-reliability tool calling</span>
    85	                        <span className="rounded-full bg-white/10 px-3 py-1">128k context</span>
    86	                        <span className="rounded-full bg-white/10 px-3 py-1">MoE architecture</span>
    87	                    </div>
    88	                </div>
    89	            </section>
    90	
    91	            {/* Value Props */}
    92	            <section className="py-16">
    93	                <div className="mx-auto max-w-5xl px-4 text-center">
    94	                    <h2 className="text-2xl md:text-3xl font-semibold">Two Models. Endless Possibilities.</h2>
    95	                    <p className="mt-4 text-muted-foreground">
    96	                        <strong>Vavus AI</strong> delivers incredible speed and efficiency. <strong>Vavus AI Pro</strong> pushes the
    97	                        limits of deep reasoning, coding, and multi-step agentic tasks.
    98	                    </p>
    99	                </div>
   100	            </section>
   101	
   102	            {/* Model Specs */}
   103	            <section className="py-16">
   104	                <div className="mx-auto max-w-7xl px-4">
   105	                    <h3 className="text-center mb-10 text-xl md:text-2xl font-semibold">Model Specifications</h3>
   106	                    <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
   107	                        {specs.map((spec) => (
   108	                            <Card key={spec.name} className="p-8 text-center feature-card">
   109	                                <h4 className="text-2xl font-semibold">{spec.name}</h4>
   110	                                <p className="mt-1 text-sm text-muted-foreground">{spec.subtitle}</p>
   111	                                <ul className="mt-6 space-y-2 text-muted-foreground">
   112	                                    {spec.details.map((detail) => (
   113	                                        <li key={detail}>
   114	                                            <Check className="inline h-4 w-4 text-primary mr-2" />
   115	                                            {detail}
   116	                                        </li>
   117	                                    ))}
   118	                                </ul>
   119	                            </Card>
   120	                        ))}
   121	                    </div>
   122	                </div>
   123	            </section>
   124	
   125	            {/* Hybrid Modes */}
   126	            <section className="py-16 bg-surface">
   127	                <div className="mx-auto max-w-7xl px-4">
   128	                    <h3 className="text-center mb-10 text-xl md:text-2xl font-semibold">Hybrid Reasoning Modes</h3>
   129	                    <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
   130	                        <Card className="p-6">
   131	                            <div className="flex items-start gap-3">
   132	                                <Zap className="h-6 w-6 text-primary mt-1" />
   133	                                <div>
   134	                                    <h4 className="font-semibold">Fast Mode</h4>
   135	                                    <p className="text-sm text-muted-foreground">
   136	                                        Instant, streamlined responses for chat, assistance, and rapid iteration.
   137	                                    </p>
   138	                                </div>
   139	                            </div>
   140	                        </Card>
   141	                        <Card className="p-6">
   142	                            <div className="flex items-start gap-3">
   143	                                <Bot className="h-6 w-6 text-primary mt-1" />
   144	                                <div>
   145	                                    <h4 className="font-semibold">Thinking Mode</h4>
   146	                                    <p className="text-sm text-muted-foreground">
   147	                                        Deep chain-of-thought reasoning and multi-turn tool use for complex tasks.
   148	                                    </p>
   149	                                </div>
   150	                            </div>
   151	                        </Card>
   152	                    </div>
   153	                </div>
   154	            </section>
   155	
   156	            {/* Benchmarks – Agentic */}
   157	            <section className="py-16">
   158	                <div className="mx-auto max-w-7xl px-4">
   159	                    <h3 className="text-center mb-10 text-xl md:text-2xl font-semibold">Agentic Benchmarks</h3>
   160	                    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
   161	                        {benchmarksAgentic.map((b) => (
   162	                            <Card key={b.metric} className="p-6 text-center">
   163	                                <BarChart className="h-8 w-8 mx-auto mb-4 text-primary" />
   164	                                <h4 className="font-semibold">{b.metric}</h4>
   165	                                <p className="text-sm text-muted-foreground mt-2">
   166	                                    <strong>Vavus AI Pro:</strong> {b.pro}
   167	                                    <br />
   168	                                    <strong>Vavus AI:</strong> {b.base}
   169	                                </p>
   170	                            </Card>
   171	                        ))}
   172	                    </div>
   173	                    <p className="text-center text-xs text-muted-foreground mt-6">
   174	                        *Measured with optimized user simulator where applicable; BrowseComp reflects % correct with browsing tools.
   175	                    </p>
   176	                </div>
   177	            </section>
   178	
   179	            {/* Benchmarks – Reasoning */}
   180	            <section className="py-16 bg-surface">
   181	                <div className="mx-auto max-w-7xl px-4">
   182	                    <h3 className="text-center mb-10 text-xl md:text-2xl font-semibold">Reasoning Benchmarks</h3>
   183	                    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
   184	                        {benchmarksReasoning.map((b) => (
   185	                            <Card key={b.metric} className="p-6 text-center">
   186	                                <BarChart className="h-8 w-8 mx-auto mb-4 text-primary" />
   187	                                <h4 className="font-semibold">{b.metric}</h4>
   188	                                <p className="text-sm text-muted-foreground mt-2">
   189	                                    <strong>Vavus AI Pro:</strong> {b.pro}
   190	                                    <br />
   191	                                    <strong>Vavus AI:</strong> {b.base}
   192	                                </p>
   193	                            </Card>
   194	                        ))}
   195	                    </div>
   196	                    <p className="text-center text-xs text-muted-foreground mt-6">
   197	                        *AIME/GPQA averaged over multiple samples to reduce variance; text-only HLE subset where relevant.
   198	                    </p>
   199	                </div>
   200	            </section>
   201	
   202	            {/* Benchmarks – Coding */}
   203	            <section className="py-16">
   204	                <div className="mx-auto max-w-7xl px-4">
   205	                    <h3 className="text-center mb-10 text-xl md:text-2xl font-semibold">Coding Benchmarks</h3>
   206	                    <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
   207	                        {benchmarksCoding.map((b) => (
   208	                            <Card key={b.metric} className="p-6 text-center">
   209	                                <Code2 className="h-8 w-8 mx-auto mb-4 text-primary" />
   210	                                <h4 className="font-semibold">{b.metric}</h4>
   211	                                <p className="text-sm text-muted-foreground mt-2">
   212	                                    <strong>Vavus AI Pro:</strong> {b.pro}
   213	                                    <br />
   214	                                    <strong>Vavus AI:</strong> {b.base}
   215	                                </p>
   216	                            </Card>
   217	                        ))}
   218	                    </div>
   219	                    <p className="text-center text-xs text-muted-foreground mt-6">
   220	                        *SWE-bench with OpenHands constraints; Terminal-Bench via Terminus; standard function calling.
   221	                    </p>
   222	                </div>
   223	            </section>
   224	
   225	            {/* Capabilities */}
   226	            <section className="py-16">
   227	                <div className="mx-auto max-w-7xl px-4">
   228	                    <h3 className="text-center mb-10 text-xl md:text-2xl font-semibold">What Vavus AI Can Do</h3>
   229	                    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
   230	                        {capabilities.map((cap, idx) => (
   231	                            <div
   232	                                key={cap.title}
   233	                                className="feature-card text-center p-6"
   234	                                style={{ animationDelay: `${idx * 100}ms` }}
   235	                            >
   236	                                <div className="bg-gradient-hero p-3 rounded-lg w-fit mx-auto mb-4">
   237	                                    <cap.icon className="h-6 w-6 text-white" />
   238	                                </div>
   239	                                <h4 className="text-lg font-semibold mb-2 text-foreground">{cap.title}</h4>
   240	                            </div>
   241	                        ))}
   242	                    </div>
   243	                </div>
   244	            </section>
   245	        </div>
   246	    );
   247	};
   248	
   249	export default VavusAI;

========== FILE: ./src/pages/VavusApps.tsx ==========

     1	import React from "react";
     2	import { useNavigate } from "react-router-dom";
     3	import { Card } from "@/components/ui/card";
     4	import { Button } from "@/components/ui/button";
     5	import { Badge } from "@/components/ui/badge";
     6	import {
     7	    Mic,
     8	    FileText,
     9	    Scale,
    10	    Stethoscope,
    11	    Pill,
    12	    GraduationCap,
    13	    BookOpen,
    14	    MessagesSquare,
    15	    Users,
    16	    Radio,
    17	    Check,
    18	} from "lucide-react";
    19	
    20	type AppItem = {
    21	    id: string;
    22	    name: string;
    23	    icon: React.ComponentType<any>;
    24	    blurb: string;
    25	    features: string[];
    26	    comingSoon?: boolean;
    27	    action?: { label: string; onClick?: () => void; disabled?: boolean };
    28	    route?: string;
    29	};
    30	
    31	const VavusApps = () => {
    32	    const navigate = useNavigate();
    33	
    34	    const apps: AppItem[] = [
    35	        {
    36	            id: "transcriber",
    37	            name: "AI Transcriber",
    38	            icon: Mic,
    39	            blurb:
    40	                "Real-time, multi-language transcription with smart timestamps and speaker-aware notes.",
    41	            features: [
    42	                "Live or recorded audio transcription",
    43	                "Speakers, timestamps, sections",
    44	                "Export notes to TXT / DOCX / PDF",
    45	                "Works with Vavus devices & headsets",
    46	            ],
    47	            comingSoon: true,
    48	            action: { label: "Preview soon", disabled: true },
    49	        },
    50	        {
    51	            id: "docs",
    52	            name: "Document Creation & Analysis",
    53	            icon: FileText,
    54	            blurb:
    55	                "Turn long documents into clear answers, summaries, and ready-to-use drafts.",
    56	            features: [
    57	                "Ask questions about any document",
    58	                "Auto-summaries & highlights",
    59	                "Draft contracts, letters & reports",
    60	                "Source citations & traceable quotes",
    61	            ],
    62	            comingSoon: true,
    63	            action: { label: "Preview soon", disabled: true },
    64	        },
    65	        {
    66	            id: "lawyer",
    67	            name: "AI Lawyer",
    68	            icon: Scale,
    69	            blurb:
    70	                "Contract review and risk spotting with plain-language explanations and clause suggestions.",
    71	            features: [
    72	                "Redline suggestions & risk flags",
    73	                "Clause libraries & comparisons",
    74	                "Plain-language summaries",
    75	                "Export clean drafts for counsel",
    76	            ],
    77	            comingSoon: true,
    78	            action: { label: "Preview soon", disabled: true },
    79	        },
    80	        {
    81	            id: "doctor",
    82	            name: "AI Doctor",
    83	            icon: Stethoscope,
    84	            blurb:
    85	                "Educational triage assistant that explains symptoms and next-step options.",
    86	            features: [
    87	                "Symptom exploration & triage education",
    88	                "Guideline-based explanations",
    89	                "Follow-up questions & checklists",
    90	                "Printable visit prep notes",
    91	            ],
    92	            comingSoon: true,
    93	            action: { label: "Preview soon", disabled: true },
    94	        },
    95	        {
    96	            id: "pharmacist",
    97	            name: "AI Pharmacist",
    98	            icon: Pill,
    99	            blurb:
   100	                "Medication information, interaction checks, and patient-friendly instructions.",
   101	            features: [
   102	                "Interaction & duplication checks",
   103	                "Usage, storage & missed-dose guides",
   104	                "OTC vs Rx comparisons",
   105	                "Question prompts for your pharmacist",
   106	            ],
   107	            comingSoon: true,
   108	            action: { label: "Preview soon", disabled: true },
   109	        },
   110	        {
   111	            id: "tutor",
   112	            name: "AI Tutor",
   113	            icon: GraduationCap,
   114	            blurb:
   115	                "Personalized study plans with step-by-step explanations and adaptive practice.",
   116	            features: [
   117	                "Diagnostic quiz & study roadmap",
   118	                "Worked examples & hints",
   119	                "Adaptive practice & spaced review",
   120	                "Progress tracking & goals",
   121	            ],
   122	            comingSoon: true,
   123	            action: { label: "Preview soon", disabled: true },
   124	        },
   125	        {
   126	            id: "teacher",
   127	            name: "AI Teacher",
   128	            icon: BookOpen,
   129	            blurb:
   130	                "Lesson planning, rubric suggestions, and classroom-ready materials in minutes.",
   131	            features: [
   132	                "Curriculum-aligned lesson plans",
   133	                "Rubrics & formative checks",
   134	                "Worksheets, slides & answer keys",
   135	                "Parent-friendly summaries",
   136	            ],
   137	            comingSoon: true,
   138	            action: { label: "Preview soon", disabled: true },
   139	        },
   140	        {
   141	            id: "chat-translate",
   142	            name: "Chat & Translation Chat (Group)",
   143	            icon: MessagesSquare,
   144	            blurb:
   145	                "Real-time translated group chat. Speak your language—everyone reads in theirs.",
   146	            features: [
   147	                "Live 2–10 person rooms",
   148	                "Auto-translate messages & voice",
   149	                "Photo/OCR translate (coming soon)",
   150	                "Multi-headphone support on devices",
   151	            ],
   152	            comingSoon: true,
   153	            action: { label: "Preview soon", disabled: true },
   154	
   155	        },
   156	        {
   157	            id: "group-chat",
   158	            name: "Group Chat",
   159	            icon: Users,
   160	            blurb:
   161	                "Fast, clean group messaging for teams and families. Voice notes and file sharing built-in.",
   162	            features: [
   163	                "Pinned messages & mentions",
   164	                "File sharing & voice notes",
   165	                "Read receipts & message controls",
   166	                "Device-to-device sync (coming soon)",
   167	            ],
   168	            comingSoon: true,
   169	            action: { label: "Preview soon", disabled: true },
   170	        },
   171	        {
   172	            id: "mesh",
   173	            name: "Internet-Free Chat (≈3 miles)",
   174	            icon: Radio,
   175	            blurb:
   176	                "Peer-to-peer mesh messaging for events and emergencies—no internet required.*",
   177	            features: [
   178	                "Mesh over Bluetooth / Wi-Fi Direct",
   179	                "Auto-relay via nearby devices",
   180	                "Ephemeral IDs & opt-in range boost",
   181	                "Emergency broadcast mode",
   182	            ],
   183	            comingSoon: true,
   184	            action: { label: "Preview soon", disabled: true },
   185	        },
   186	    ];
   187	
   188	    return (
   189	        <div className="min-h-screen bg-gradient-subtle">
   190	            <div className="mx-auto max-w-6xl px-4 py-16 sm:px-6 lg:px-8">
   191	                {/* Header */}
   192	                <header className="mb-10 text-center">
   193	                    <h1 className="text-3xl md:text-4xl font-bold">Vavus Apps</h1>
   194	                    <p className="mt-3 text-muted-foreground">
   195	                        Powerful AI experiences for communication, learning, documents, and care.{" "}
   196	                        <span className="font-medium">Previews coming soon.</span>
   197	                    </p>
   198	                    <div className="mt-4 flex flex-wrap justify-center gap-2 text-xs">
   199	                        <Badge variant="secondary">Multi-language</Badge>
   200	                        <Badge variant="secondary">Privacy-minded</Badge>
   201	                        <Badge variant="secondary">Built on Vavus AI & Vavus AI Pro</Badge>
   202	                    </div>
   203	                </header>
   204	
   205	                {/* Grid */}
   206	                <section className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6">
   207	                    {apps.map((app) => (
   208	                        <Card key={app.id} className="overflow-hidden hover:shadow-lg transition">
   209	                            {/* Preview placeholder */}
   210	                            <div className="relative aspect-video w-full bg-gradient-to-br from-black/10 via-transparent to-black/10">
   211	                                <div className="absolute inset-0 flex items-center justify-center">
   212	                                    <div className="rounded-xl border border-dashed border-white/20 bg-black/5 px-3 py-1 text-xs">
   213	                                        Preview {app.comingSoon ? "coming soon" : "available"}
   214	                                    </div>
   215	                                </div>
   216	                            </div>
   217	
   218	                            {/* Content */}
   219	                            <div className="p-5">
   220	                                <div className="flex items-center gap-2">
   221	                                    <app.icon className="h-5 w-5 text-primary" />
   222	                                    <h3 className="text-lg font-semibold">{app.name}</h3>
   223	                                    {app.comingSoon && (
   224	                                        <Badge className="ml-auto" variant="outline">
   225	                                            Preview soon
   226	                                        </Badge>
   227	                                    )}
   228	                                </div>
   229	
   230	                                <p className="mt-2 text-sm text-muted-foreground">{app.blurb}</p>
   231	
   232	                                <ul className="mt-4 space-y-1 text-sm text-muted-foreground">
   233	                                    {app.features.map((f) => (
   234	                                        <li key={f} className="flex items-start gap-2">
   235	                                            <Check className="mt-0.5 h-4 w-4 text-primary shrink-0" />
   236	                                            <span>{f}</span>
   237	                                        </li>
   238	                                    ))}
   239	                                </ul>
   240	
   241	                                <div className="mt-5">
   242	                                    <Button
   243	                                        variant={app.comingSoon ? "secondary" : "default"}
   244	                                        disabled={app.action?.disabled}
   245	                                        onClick={app.action?.onClick}
   246	                                        className="w-full"
   247	                                    >
   248	                                        {app.action?.label ?? "Learn more"}
   249	                                    </Button>
   250	                                </div>
   251	                            </div>
   252	                        </Card>
   253	                    ))}
   254	                </section>
   255	
   256	                {/* Footer notes */}
   257	                <footer className="mt-10 space-y-2 text-xs text-muted-foreground">
   258	                    <p>
   259	                        *Estimated mesh range depends on local conditions, device hardware, and line-of-sight. Range extenders and
   260	                        relay nodes improve coverage.
   261	                    </p>
   262	                    <p>
   263	                        Research preview only. These tools do not replace licensed professionals. They are not medical devices and
   264	                        do not provide medical or legal advice.
   265	                    </p>
   266	                </footer>
   267	            </div>
   268	        </div>
   269	    );
   270	};
   271	
   272	export default VavusApps;

========== FILE: ./src/vite-env.d.ts ==========

     1	/// <reference types="vite/client" />

========== FILE: ./tailwind.config.ts ==========

     1	import type { Config } from "tailwindcss";
     2	
     3	export default {
     4		darkMode: ["class"],
     5		content: [
     6			"./pages/**/*.{ts,tsx}",
     7			"./components/**/*.{ts,tsx}",
     8			"./app/**/*.{ts,tsx}",
     9			"./src/**/*.{ts,tsx}",
    10		],
    11		prefix: "",
    12		theme: {
    13			container: {
    14				center: true,
    15				padding: '2rem',
    16				screens: {
    17					'2xl': '1400px'
    18				}
    19			},
    20			extend: {
    21				colors: {
    22					border: 'hsl(var(--border))',
    23					input: 'hsl(var(--input))',
    24					ring: 'hsl(var(--ring))',
    25					background: 'hsl(var(--background))',
    26					foreground: 'hsl(var(--foreground))',
    27					
    28					// Brand Colors
    29					primary: {
    30						DEFAULT: 'hsl(var(--primary))',
    31						foreground: 'hsl(var(--primary-foreground))',
    32						hover: 'hsl(var(--primary-hover))',
    33						light: 'hsl(var(--primary-light))'
    34					},
    35					'accent-brand': {
    36						DEFAULT: 'hsl(var(--accent-brand))',
    37						foreground: 'hsl(var(--accent-brand-foreground))',
    38						hover: 'hsl(var(--accent-brand-hover))',
    39						light: 'hsl(var(--accent-brand-light))'
    40					},
    41					
    42					// Surface Colors
    43					surface: {
    44						DEFAULT: 'hsl(var(--surface))',
    45						foreground: 'hsl(var(--surface-foreground))'
    46					},
    47					
    48					// Semantic Colors
    49					secondary: {
    50						DEFAULT: 'hsl(var(--secondary))',
    51						foreground: 'hsl(var(--secondary-foreground))'
    52					},
    53					destructive: {
    54						DEFAULT: 'hsl(var(--destructive))',
    55						foreground: 'hsl(var(--destructive-foreground))'
    56					},
    57					muted: {
    58						DEFAULT: 'hsl(var(--muted))',
    59						foreground: 'hsl(var(--muted-foreground))'
    60					},
    61					accent: {
    62						DEFAULT: 'hsl(var(--accent))',
    63						foreground: 'hsl(var(--accent-foreground))'
    64					},
    65					popover: {
    66						DEFAULT: 'hsl(var(--popover))',
    67						foreground: 'hsl(var(--popover-foreground))'
    68					},
    69					card: {
    70						DEFAULT: 'hsl(var(--card))',
    71						foreground: 'hsl(var(--card-foreground))'
    72					},
    73					
    74					// Status Colors
    75					success: {
    76						DEFAULT: 'hsl(var(--success))',
    77						foreground: 'hsl(var(--success-foreground))'
    78					},
    79					warning: {
    80						DEFAULT: 'hsl(var(--warning))',
    81						foreground: 'hsl(var(--warning-foreground))'
    82					}
    83				},
    84				borderRadius: {
    85					lg: 'var(--radius-lg)',
    86					md: 'var(--radius)',
    87					sm: 'calc(var(--radius) - 4px)',
    88					xl: 'var(--radius-xl)'
    89				},
    90				boxShadow: {
    91					'brand': 'var(--shadow-brand)',
    92					'sm': 'var(--shadow-sm)',
    93					'md': 'var(--shadow-md)',
    94					'lg': 'var(--shadow-lg)',
    95					'xl': 'var(--shadow-xl)'
    96				},
    97				backgroundImage: {
    98					'gradient-primary': 'var(--gradient-primary)',
    99					'gradient-subtle': 'var(--gradient-subtle)',
   100					'gradient-hero': 'var(--gradient-hero)'
   101				},
   102				fontFamily: {
   103					'sans': ['Inter', 'ui-sans-serif', 'system-ui', 'sans-serif']
   104				},
   105				animation: {
   106					'fade-in': 'fadeIn 0.3s ease-out',
   107					'slide-up': 'slideUp 0.3s ease-out',
   108					'scale-in': 'scaleIn 0.2s ease-out',
   109					'bounce-in': 'bounceIn 0.6s cubic-bezier(0.68, -0.55, 0.265, 1.55)'
   110				},
   111				keyframes: {
   112					fadeIn: {
   113						'0%': { opacity: '0', transform: 'translateY(10px)' },
   114						'100%': { opacity: '1', transform: 'translateY(0)' }
   115					},
   116					slideUp: {
   117						'0%': { opacity: '0', transform: 'translateY(20px)' },
   118						'100%': { opacity: '1', transform: 'translateY(0)' }
   119					},
   120					scaleIn: {
   121						'0%': { opacity: '0', transform: 'scale(0.95)' },
   122						'100%': { opacity: '1', transform: 'scale(1)' }
   123					},
   124					bounceIn: {
   125						'0%': { opacity: '0', transform: 'scale(0.3)' },
   126						'50%': { opacity: '1', transform: 'scale(1.05)' },
   127						'70%': { transform: 'scale(0.9)' },
   128						'100%': { opacity: '1', transform: 'scale(1)' }
   129					}
   130				}
   131			}
   132		},
   133		plugins: [require("tailwindcss-animate")],
   134	} satisfies Config;

========== FILE: ./tests/chat.spec.ts ==========

     1	import { describe, it, expect, vi } from 'vitest';
     2	
     3	interface DB {
     4	    conversations: any[];
     5	    messages: any[];
     6	    user_memory: any[];
     7	    workspace_memory: any[];
     8	    user_settings: any[];
     9	}
    10	
    11	function createSupabaseMock(db: DB) {
    12	    return {
    13	        from(table: string) {
    14	            if (table === 'information_schema.columns') {
    15	                return {
    16	                    select() { return this; },
    17	                    eq() {
    18	                        if (!(this as any)._eqCalled) { (this as any)._eqCalled = true; return this; }
    19	                        return Promise.resolve({ data: [
    20	                                { column_name: 'id' },
    21	                                { column_name: 'summary' },
    22	                                { column_name: 'turns_count' },
    23	                                { column_name: 'long_mode_enabled' },
    24	                                { column_name: 'last_summary_turn' },
    25	                            ], error: null });
    26	                    },
    27	                } as any;
    28	            }
    29	            if (table === 'conversations') {
    30	                return {
    31	                    insert(row: any) {
    32	                        return {
    33	                            select() {
    34	                                return {
    35	                                    single: async () => {
    36	                                        const conv = { id: 'c1', summary: '', turns_count: 0, long_mode_enabled: false, last_summary_turn: 0, ...row };
    37	                                        db.conversations.push(conv);
    38	                                        return { data: conv, error: null };
    39	                                    },
    40	                                };
    41	                            },
    42	                        };
    43	                    },
    44	                    select() {
    45	                        return {
    46	                            eq() {
    47	                                return {
    48	                                    single: async () => ({ data: db.conversations[0], error: null }),
    49	                                };
    50	                            },
    51	                        };
    52	                    },
    53	                    update() {
    54	                        return {
    55	                            eq: async () => ({ data: null, error: null }),
    56	                        };
    57	                    },
    58	                } as any;
    59	            }
    60	            if (table === 'messages') {
    61	                return {
    62	                    select() {
    63	                        return {
    64	                            eq() {
    65	                                return {
    66	                                    order: async () => ({ data: db.messages, error: null }),
    67	                                };
    68	                            },
    69	                        };
    70	                    },
    71	                    insert: async (row: any) => {
    72	                        db.messages.push(row);
    73	                        return { error: null };
    74	                    },
    75	                } as any;
    76	            }
    77	            if (table === 'user_memory') {
    78	                return { select: () => ({ eq: () => ({ single: async () => ({ data: db.user_memory[0], error: null }) }) }) } as any;
    79	            }
    80	            if (table === 'workspace_memory') {
    81	                return { select: () => ({ eq: () => ({ single: async () => ({ data: db.workspace_memory[0], error: null }) }) }) } as any;
    82	            }
    83	            if (table === 'user_settings') {
    84	                return { select: () => ({ eq: () => ({ single: async () => ({ data: db.user_settings[0], error: null }) }) }) } as any;
    85	            }
    86	            return {} as any;
    87	        },
    88	    };
    89	}
    90	
    91	function createFetchMock(reply: string) {
    92	    return vi.fn().mockResolvedValue({
    93	        ok: true,
    94	        json: async () => ({ choices: [{ message: { content: reply } }] }),
    95	    });
    96	}
    97	
    98	function createRes() {
    99	    const res: any = {
   100	        statusCode: 200,
   101	        headers: {} as Record<string, string>,
   102	        body: undefined as any,
   103	        status(code: number) { this.statusCode = code; return this; },
   104	        setHeader(key: string, value: string) { this.headers[key] = value; },
   105	        json(data: any) { this.body = data; return this; },
   106	        end(data?: any) { this.body = data; return this; },
   107	    };
   108	    return res;
   109	}
   110	
   111	async function setup(opts: {
   112	    runpodReply?: string;
   113	    personaSummary?: string;
   114	    workspaceNote?: string;
   115	    usePersona?: boolean;
   116	    useWorkspace?: boolean;
   117	} = {}) {
   118	    vi.resetModules();
   119	    const {
   120	        runpodReply = 'ok',
   121	        personaSummary = '',
   122	        workspaceNote = '',
   123	        usePersona = true,
   124	        useWorkspace = true,
   125	    } = opts;
   126	
   127	    const db: DB = {
   128	        conversations: [],
   129	        messages: [],
   130	        user_memory: [{ persona_summary: personaSummary, user_id: 'u1' }],
   131	        workspace_memory: [{ note: workspaceNote, user_id: 'u1' }],
   132	        user_settings: [{ use_persona: usePersona, use_workspace: useWorkspace, user_id: 'u1' }],
   133	    };
   134	
   135	    const supabaseAdmin = createSupabaseMock(db);
   136	    vi.mock('../api/_utils/supabaseAdmin.js', () => ({ supabaseAdmin }));
   137	    vi.mock('../api/_utils/auth.js', () => ({ requireUser: () => ({ userId: 'u1' }) }));
   138	
   139	    const fetchMock = createFetchMock(runpodReply);
   140	    (global as any).fetch = fetchMock as any;
   141	
   142	    process.env.RUNPOD_CHAT_URL = 'https://runpod';
   143	    process.env.RUNPOD_CHAT_TOKEN = 'token';
   144	
   145	    const mod = await import('../api/ai.ts');
   146	    return { handler: mod.default, db, fetchMock };
   147	}
   148	
   149	describe('chat pipeline', () => {
   150	    it('strips chain-of-thought before saving', async () => {
   151	        const { handler, db } = await setup({ runpodReply: '<think>secret</think>final' });
   152	        const req: any = { method: 'POST', body: { message: 'hi' } };
   153	        const res = createRes();
   154	        await handler(req, res);
   155	        expect(db.messages[1].content).toBe('final');
   156	    });
   157	
   158	    it('doubles token limit when long mode enabled', async () => {
   159	        const { handler, fetchMock } = await setup({ runpodReply: 'final' });
   160	        const req: any = { method: 'POST', body: { message: 'hi', longMode: true } };
   161	        const res = createRes();
   162	        await handler(req, res);
   163	        const body = JSON.parse(fetchMock.mock.calls[0][1].body).input;        expect(body.max_tokens).toBe(2048);
   164	    });
   165	
   166	    it('respects persona and workspace toggles', async () => {
   167	        // toggles off
   168	        let ctx = await setup({ runpodReply: 'a', personaSummary: 'Persona', workspaceNote: 'Workspace', usePersona: false, useWorkspace: false });
   169	        let req: any = { method: 'POST', body: { message: 'hi', usePersona: false, useWorkspace: false } };
   170	        let res = createRes();
   171	        await ctx.handler(req, res);
   172	        let msgs = JSON.parse(ctx.fetchMock.mock.calls[0][1].body).input.messages;        expect(msgs.some((m: any) => m.content.includes('User profile'))).toBe(false);
   173	        expect(msgs.some((m: any) => m.content.includes('Workspace Memory'))).toBe(false);
   174	
   175	        // toggles on
   176	        ctx = await setup({ runpodReply: 'b', personaSummary: 'Persona', workspaceNote: 'Workspace', usePersona: true, useWorkspace: true });
   177	        req = { method: 'POST', body: { message: 'hi', usePersona: true, useWorkspace: true } };
   178	        res = createRes();
   179	        await ctx.handler(req, res);
   180	        msgs = JSON.parse(ctx.fetchMock.mock.calls[0][1].body).input.messages;        expect(msgs.some((m: any) => m.content.includes('User profile: Persona'))).toBe(true);
   181	        expect(msgs.some((m: any) => m.content.includes('Workspace Memory:\nWorkspace'))).toBe(true);
   182	    });
   183	});

========== FILE: ./vite.config.ts ==========

     1	import { defineConfig } from "vite";
     2	import react from "@vitejs/plugin-react-swc";
     3	import path from "path";
     4	
     5	// https://vitejs.dev/config/
     6	export default defineConfig(() => ({
     7	  server: {
     8	    host: "::",
     9	    port: 8080,
    10	  },
    11	  plugins: [
    12	    react(),
    13	    // removed: componentTagger() (Lovable)
    14	  ],
    15	  resolve: {
    16	    alias: {
    17	      "@": path.resolve(__dirname, "./src"),
    18	    },
    19	  },
    20	}));

========== FILE: ./vitest.config.ts ==========

     1	import { defineConfig } from 'vitest/config';
     2	
     3	export default defineConfig({
     4	    test: {
     5	        environment: 'jsdom'
     6	    }
     7	});
